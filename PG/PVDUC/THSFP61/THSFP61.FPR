Attribute VB_Name = "SSSMAIN0001"
Option Explicit
'Copyright 1994-2003 by AppliTech, Inc. All Rights Reserved.
'
'単プロジェクトごとの共通ライブラリ
Public PP_SSSMAIN As clsPP
' === 20110216 === UPDATE S TOM)Morimoto
Global WGDENKB          As String
'Public CP_SSSMAIN(7 + 0 + 0 + 1) As clsCP
'Public CL_SSSMAIN(7) As Integer
'Public CQ_SSSMAIN(7) As String
Public CP_SSSMAIN(8 + 0 + 0 + 1) As clsCP
Public CL_SSSMAIN(8) As Integer
Public CQ_SSSMAIN(8) As String
Type Cls_Dsp_Body_Bus_Inf
    dmy As String
End Type
Private Const gv_strTAB_CHAR = vbTab
' === 20110216 === UPDATE E

Function AE_AppendC_SSSMAIN(ByVal pm_ExMode As Integer, Optional ByVal pm_Current) As Integer 'Generated.
   If PP_SSSMAIN.Mode = Cn_Mode4 And PP_SSSMAIN.InitValStatus <> PP_SSSMAIN.Mode Then
      If PP_SSSMAIN.ChOprtMode = 0 Then
         If AE_MsgLibrary(PP_SSSMAIN, "AppendC") Then AE_AppendC_SSSMAIN = Cn_CuCurrent: Exit Function
      End If
   End If
   PP_SSSMAIN.ChOprtMode = Cn_Mode1
   Call AE_ModeChange_SSSMAIN(Cn_Mode1)
   Call AE_InitValAll_SSSMAIN
   Call AE_ClearInitValStatus_SSSMAIN
   AE_AppendC_SSSMAIN = Cn_CuInit
   PP_SSSMAIN.ChOprtMode = 0
End Function

Sub AE_Check_SSSMAIN_ENDTOKCD(ByVal CC_NewVal, ByVal pm_Status As Integer, ByVal pm_MoveCursor As Boolean, ByVal pm_HandIn As Boolean) 'Generated.
Dim wk_SaveMask As Boolean
Dim RC_ErrorC As Integer
Dim wk_RecalcSw As Boolean
Dim wk_Equal As Boolean
Dim Wk_Index As Integer
Dim wk_Index1 As Integer
' === 20110216 === UPDATE S TOM)Morimoto
'   With CP_SSSMAIN(5)
    Wk_Index = Get_Index("HD_ENDTOKCD", CQ_SSSMAIN)
   With CP_SSSMAIN(Wk_Index)
' === 20110216 === UPDATE E
   Dim ex_CheckRtnCode As Integer
   ex_CheckRtnCode = .CheckRtnCode
' === 20110216 === UPDATE S TOM)Morimoto
'   If .FormatClass = Cn_Code And .FormatChr <> "" And Not IsNull(CC_NewVal) Then CC_NewVal = AE_FormatC$(CP_SSSMAIN(5), CC_NewVal)
   If .FormatClass = Cn_Code And .FormatChr <> "" And Not IsNull(CC_NewVal) Then CC_NewVal = AE_FormatC$(CP_SSSMAIN(Wk_Index), CC_NewVal)
' === 20110216 === UPDATE E
   PP_SSSMAIN.SaveXV = .ExVal
   PP_SSSMAIN.SaveExStatus = .ExStatus
   .ExVal = .CuVal
   PP_SSSMAIN.SaveCV = .CuVal
   .ExStatus = .StatusF
   If IsNull(CC_NewVal) Then
      CC_NewVal = Space$(.MaxLength)
   ElseIf .Alignment = 1 And LenWid(CC_NewVal) < .MaxLength Then
      CC_NewVal = Space$(.MaxLength - LenWid(CC_NewVal)) & CC_NewVal
   End If
   .CuVal = CC_NewVal
   If Not PP_SSSMAIN.RecalcMode Then AE_StatusBar(PP_SSSMAIN.ScX) = "": AE_StatusCodeBar(PP_SSSMAIN.ScX) = ""
   If (.CheckRtnCode <> 0) Then
      Ck_Error = .CheckRtnCode
      Ck_Error = ENDTOKCD_Check(AE_NullCnv2_SSSMAIN(CC_NewVal))
   Else
      Ck_Error = ENDTOKCD_Check(AE_NullCnv2_SSSMAIN(CC_NewVal))
   End If
   .CheckRtnCode = AE_ErrorToInteger(Ck_Error)
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
      .CuVal = CC_NewVal
' === 20110216 === UPDATE S TOM)Morimoto
'      .TpStr = AE_Format$(CP_SSSMAIN(5), .CuVal, 0, True)
'      Call AE_CtSet(PP_SSSMAIN, 5, .TpStr, .TypeA, False)
      .TpStr = AE_Format$(CP_SSSMAIN(Wk_Index), .CuVal, 0, True)
      Call AE_CtSet(PP_SSSMAIN, Wk_Index, .TpStr, .TypeA, False)
' === 20110216 === UPDATE E
   PP_SSSMAIN.MaskMode = wk_SaveMask
   If AE_ErrorToInteger(Ck_Error) = 0 Or (pm_Status >= Cn_Status7 And PP_SSSMAIN.CheckErrNglct) Then
      If AE_IsNull_SSSMAIN(PP_SSSMAIN.SaveCV) And AE_IsNull_SSSMAIN(CC_NewVal) Or AE_NullCnv2_SSSMAIN(PP_SSSMAIN.SaveCV) = AE_NullCnv2_SSSMAIN(CC_NewVal) Then
         wk_Equal = True
      Else
         wk_Equal = False
' === 20110216 === UPDATE S TOM)Morimoto
'         Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(5))
         Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(Wk_Index))
' === 20110216 === UPDATE E
      End If
      If wk_Equal And ex_CheckRtnCode = 0 And pm_Status >= Cn_Status6 And pm_Status = .StatusC And Not PP_SSSMAIN.RecalcMode Then
         .ExVal = PP_SSSMAIN.SaveXV
         .ExStatus = PP_SSSMAIN.SaveExStatus
         Call AE_Later_SSSMAIN
         If pm_MoveCursor Then
            If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
         End If
      Else
         If pm_Status <> 0 Then .StatusC = pm_Status
         If pm_Status <> 0 Then .StatusF = pm_Status
' === 20110216 === UPDATE S TOM)Morimoto
'         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(5), CL_SSSMAIN(5))
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(Wk_Index), CL_SSSMAIN(Wk_Index))
' === 20110216 === UPDATE E
         If Not PP_SSSMAIN.RecalcMode Then
            PP_SSSMAIN.DerivedOrigin = "HD_ENDTOKCD"
' === 20110216 === UPDATE S TOM)Morimoto
'            CP_SSSMAIN(6).ExVal = CP_SSSMAIN(6).CuVal 'ENDTOKNM
'            CP_SSSMAIN(6).ExStatus = CP_SSSMAIN(6).StatusC
            wk_Index1 = Get_Index("HD_ENDTOKNM", CQ_SSSMAIN)
            CP_SSSMAIN(wk_Index1).ExVal = CP_SSSMAIN(wk_Index1).CuVal 'ENDTOKNM
            CP_SSSMAIN(wk_Index1).ExStatus = CP_SSSMAIN(wk_Index1).StatusC
' === 20110216 === UPDATE E
            Call AE_Derived_SSSMAIN_hd_ENDTOKNM(PP_SSSMAIN.De2)
            If PP_SSSMAIN.ErrorC = 0 Or wk_RecalcSw = False Then
               Call AE_Later_SSSMAIN
               If pm_MoveCursor Then
                  If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
               End If
            Else
               If pm_MoveCursor Then
                  If AE_CursorToError_SSSMAIN() = False Then
                     Call AE_Later_SSSMAIN
                     If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
                  End If
               End If
            End If
         End If
      End If
   Else
' === 20110216 === UPDATE S TOM)Morimoto
'      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(5))
'      Call AE_CheckSub2_SSSMAIN(5, 5, True)
      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(Wk_Index))
      Call AE_CheckSub2_SSSMAIN(Wk_Index, Wk_Index, True)
' === 20110216 === UPDATE E
      If AE_ErrorToInteger(Ck_Error) >= 0 Then
         PP_SSSMAIN.ErrorC = PP_SSSMAIN.ErrorC + 1
         wk_Bool = SSSMAIN_ErrorMsg(Ck_Error)
      Else
         wk_Bool = AE_MsgLibrary(PP_SSSMAIN, "PreCheck" & CStr(-Ck_Error))
      End If
   End If
   End With
End Sub

Sub AE_Check_SSSMAIN_ENDTOKNM(ByVal CC_NewVal, ByVal pm_Status As Integer, ByVal pm_MoveCursor As Boolean, ByVal pm_HandIn As Boolean) 'Generated.
Dim wk_SaveMask As Boolean
Dim RC_ErrorC As Integer
Dim wk_RecalcSw As Boolean
Dim wk_Equal As Boolean
Dim Wk_Index As Integer
' === 20110216 === UPDATE S TOM)Morimoto
'   With CP_SSSMAIN(6)
    Wk_Index = Get_Index("HD_ENDTOKNM", CQ_SSSMAIN)
   With CP_SSSMAIN(Wk_Index)
' === 20110216 === UPDATE E
   Dim ex_CheckRtnCode As Integer
   ex_CheckRtnCode = .CheckRtnCode
' === 20110216 === UPDATE S TOM)Morimoto
'   If .FormatClass = Cn_Code And .FormatChr <> "" And Not IsNull(CC_NewVal) Then CC_NewVal = AE_FormatC$(CP_SSSMAIN(6), CC_NewVal)
   If .FormatClass = Cn_Code And .FormatChr <> "" And Not IsNull(CC_NewVal) Then CC_NewVal = AE_FormatC$(CP_SSSMAIN(Wk_Index), CC_NewVal)
' === 20110216 === UPDATE E
   PP_SSSMAIN.SaveXV = .ExVal
   PP_SSSMAIN.SaveExStatus = .ExStatus
   .ExVal = .CuVal
   PP_SSSMAIN.SaveCV = .CuVal
   .ExStatus = .StatusF
   If IsNull(CC_NewVal) Then
      CC_NewVal = Space$(.MaxLength)
   ElseIf .Alignment = 1 And LenWid(CC_NewVal) < .MaxLength Then
      CC_NewVal = Space$(.MaxLength - LenWid(CC_NewVal)) & CC_NewVal
   End If
   .CuVal = CC_NewVal
   If Not PP_SSSMAIN.RecalcMode Then AE_StatusBar(PP_SSSMAIN.ScX) = "": AE_StatusCodeBar(PP_SSSMAIN.ScX) = ""
   Ck_Error = 0
   .CheckRtnCode = AE_ErrorToInteger(Ck_Error)
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
      .CuVal = CC_NewVal
' === 20110216 === UPDATE S TOM)Morimoto
'      .TpStr = AE_Format$(CP_SSSMAIN(6), .CuVal, 0, True)
'      Call AE_CtSet(PP_SSSMAIN, 6, .TpStr, .TypeA, False)
      .TpStr = AE_Format$(CP_SSSMAIN(Wk_Index), .CuVal, 0, True)
      Call AE_CtSet(PP_SSSMAIN, Wk_Index, .TpStr, .TypeA, False)
' === 20110216 === UPDATE E
   PP_SSSMAIN.MaskMode = wk_SaveMask
   If AE_ErrorToInteger(Ck_Error) = 0 Or (pm_Status >= Cn_Status7 And PP_SSSMAIN.CheckErrNglct) Then
      If AE_IsNull_SSSMAIN(PP_SSSMAIN.SaveCV) And AE_IsNull_SSSMAIN(CC_NewVal) Or AE_NullCnv2_SSSMAIN(PP_SSSMAIN.SaveCV) = AE_NullCnv2_SSSMAIN(CC_NewVal) Then
         wk_Equal = True
      Else
         wk_Equal = False
' === 20110216 === UPDATE S TOM)Morimoto
'         Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(6))
         Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(Wk_Index))
' === 20110216 === UPDATE E
      End If
      If wk_Equal And ex_CheckRtnCode = 0 And pm_Status >= Cn_Status6 And pm_Status = .StatusC And Not PP_SSSMAIN.RecalcMode Then
         .ExVal = PP_SSSMAIN.SaveXV
         .ExStatus = PP_SSSMAIN.SaveExStatus
         Call AE_Later_SSSMAIN
         If pm_MoveCursor Then
            If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
         End If
      Else
         If pm_Status <> 0 Then .StatusC = pm_Status
         If pm_Status <> 0 Then .StatusF = pm_Status
' === 20110216 === UPDATE S TOM)Morimoto
'         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(6), CL_SSSMAIN(6))
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(Wk_Index), CL_SSSMAIN(Wk_Index))
' === 20110216 === UPDATE E
         If Not PP_SSSMAIN.RecalcMode Then
            If PP_SSSMAIN.ErrorC = 0 Or wk_RecalcSw = False Then
               Call AE_Later_SSSMAIN
               If pm_MoveCursor Then
                  If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
               End If
            Else
               If pm_MoveCursor Then
                  If AE_CursorToError_SSSMAIN() = False Then
                     Call AE_Later_SSSMAIN
                     If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
                  End If
               End If
            End If
         End If
      End If
   Else
' === 20110216 === UPDATE S TOM)Morimoto
'      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(6))
'      Call AE_CheckSub2_SSSMAIN(6, 6, True)
      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(Wk_Index))
      Call AE_CheckSub2_SSSMAIN(Wk_Index, Wk_Index, True)
' === 20110216 === UPDATE E
      If AE_ErrorToInteger(Ck_Error) >= 0 Then
         PP_SSSMAIN.ErrorC = PP_SSSMAIN.ErrorC + 1
         wk_Bool = SSSMAIN_ErrorMsg(Ck_Error)
      Else
         wk_Bool = AE_MsgLibrary(PP_SSSMAIN, "PreCheck" & CStr(-Ck_Error))
      End If
   End If
   End With
End Sub

Sub AE_Check_SSSMAIN_OPEID(ByVal CC_NewVal, ByVal pm_Status As Integer, ByVal pm_MoveCursor As Boolean, ByVal pm_HandIn As Boolean) 'Generated.
Dim wk_SaveMask As Boolean
Dim RC_ErrorC As Integer
Dim wk_RecalcSw As Boolean
Dim wk_Equal As Boolean
   With CP_SSSMAIN(0)
   Dim ex_CheckRtnCode As Integer
   ex_CheckRtnCode = .CheckRtnCode
   If .FormatClass = Cn_Code And .FormatChr <> "" And Not IsNull(CC_NewVal) Then CC_NewVal = AE_FormatC$(CP_SSSMAIN(0), CC_NewVal)
   PP_SSSMAIN.SaveXV = .ExVal
   PP_SSSMAIN.SaveExStatus = .ExStatus
   .ExVal = .CuVal
   PP_SSSMAIN.SaveCV = .CuVal
   .ExStatus = .StatusF
   If IsNull(CC_NewVal) Then
      CC_NewVal = Space$(.MaxLength)
   ElseIf .Alignment = 1 And LenWid(CC_NewVal) < .MaxLength Then
      CC_NewVal = Space$(.MaxLength - LenWid(CC_NewVal)) & CC_NewVal
   End If
   .CuVal = CC_NewVal
   If Not PP_SSSMAIN.RecalcMode Then AE_StatusBar(PP_SSSMAIN.ScX) = "": AE_StatusCodeBar(PP_SSSMAIN.ScX) = ""
   Ck_Error = 0
   .CheckRtnCode = AE_ErrorToInteger(Ck_Error)
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
      .CuVal = CC_NewVal
      .TpStr = AE_Format$(CP_SSSMAIN(0), .CuVal, 0, True)
      Call AE_CtSet(PP_SSSMAIN, 0, .TpStr, .TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
   If AE_ErrorToInteger(Ck_Error) = 0 Or (pm_Status >= Cn_Status7 And PP_SSSMAIN.CheckErrNglct) Then
      If AE_IsNull_SSSMAIN(PP_SSSMAIN.SaveCV) And AE_IsNull_SSSMAIN(CC_NewVal) Or AE_NullCnv2_SSSMAIN(PP_SSSMAIN.SaveCV) = AE_NullCnv2_SSSMAIN(CC_NewVal) Then
         wk_Equal = True
      Else
         wk_Equal = False
         Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(0))
      End If
      If wk_Equal And ex_CheckRtnCode = 0 And pm_Status >= Cn_Status6 And pm_Status = .StatusC And Not PP_SSSMAIN.RecalcMode Then
         .ExVal = PP_SSSMAIN.SaveXV
         .ExStatus = PP_SSSMAIN.SaveExStatus
         Call AE_Later_SSSMAIN
         If pm_MoveCursor Then
            If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
         End If
      Else
         If pm_Status <> 0 Then .StatusC = pm_Status
         If pm_Status <> 0 Then .StatusF = pm_Status
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(0), CL_SSSMAIN(0))
         If Not PP_SSSMAIN.RecalcMode Then
            If PP_SSSMAIN.ErrorC = 0 Or wk_RecalcSw = False Then
               Call AE_Later_SSSMAIN
               If pm_MoveCursor Then
                  If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
               End If
            Else
               If pm_MoveCursor Then
                  If AE_CursorToError_SSSMAIN() = False Then
                     Call AE_Later_SSSMAIN
                     If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
                  End If
               End If
            End If
         End If
      End If
   Else
      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(0))
      Call AE_CheckSub2_SSSMAIN(0, 0, True)
      If AE_ErrorToInteger(Ck_Error) >= 0 Then
         PP_SSSMAIN.ErrorC = PP_SSSMAIN.ErrorC + 1
         wk_Bool = SSSMAIN_ErrorMsg(Ck_Error)
      Else
         wk_Bool = AE_MsgLibrary(PP_SSSMAIN, "PreCheck" & CStr(-Ck_Error))
      End If
   End If
   End With
End Sub

Sub AE_Check_SSSMAIN_OPENM(ByVal CC_NewVal, ByVal pm_Status As Integer, ByVal pm_MoveCursor As Boolean, ByVal pm_HandIn As Boolean) 'Generated.
Dim wk_SaveMask As Boolean
Dim RC_ErrorC As Integer
Dim wk_RecalcSw As Boolean
Dim wk_Equal As Boolean
   With CP_SSSMAIN(1)
   Dim ex_CheckRtnCode As Integer
   ex_CheckRtnCode = .CheckRtnCode
   If .FormatClass = Cn_Code And .FormatChr <> "" And Not IsNull(CC_NewVal) Then CC_NewVal = AE_FormatC$(CP_SSSMAIN(1), CC_NewVal)
   PP_SSSMAIN.SaveXV = .ExVal
   PP_SSSMAIN.SaveExStatus = .ExStatus
   .ExVal = .CuVal
   PP_SSSMAIN.SaveCV = .CuVal
   .ExStatus = .StatusF
   If IsNull(CC_NewVal) Then
      CC_NewVal = Space$(.MaxLength)
   ElseIf .Alignment = 1 And LenWid(CC_NewVal) < .MaxLength Then
      CC_NewVal = Space$(.MaxLength - LenWid(CC_NewVal)) & CC_NewVal
   End If
   .CuVal = CC_NewVal
   If Not PP_SSSMAIN.RecalcMode Then AE_StatusBar(PP_SSSMAIN.ScX) = "": AE_StatusCodeBar(PP_SSSMAIN.ScX) = ""
   Ck_Error = 0
   .CheckRtnCode = AE_ErrorToInteger(Ck_Error)
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
      .CuVal = CC_NewVal
      .TpStr = AE_Format$(CP_SSSMAIN(1), .CuVal, 0, True)
      Call AE_CtSet(PP_SSSMAIN, 1, .TpStr, .TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
   If AE_ErrorToInteger(Ck_Error) = 0 Or (pm_Status >= Cn_Status7 And PP_SSSMAIN.CheckErrNglct) Then
      If AE_IsNull_SSSMAIN(PP_SSSMAIN.SaveCV) And AE_IsNull_SSSMAIN(CC_NewVal) Or AE_NullCnv2_SSSMAIN(PP_SSSMAIN.SaveCV) = AE_NullCnv2_SSSMAIN(CC_NewVal) Then
         wk_Equal = True
      Else
         wk_Equal = False
         Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(1))
      End If
      If wk_Equal And ex_CheckRtnCode = 0 And pm_Status >= Cn_Status6 And pm_Status = .StatusC And Not PP_SSSMAIN.RecalcMode Then
         .ExVal = PP_SSSMAIN.SaveXV
         .ExStatus = PP_SSSMAIN.SaveExStatus
         Call AE_Later_SSSMAIN
         If pm_MoveCursor Then
            If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
         End If
      Else
         If pm_Status <> 0 Then .StatusC = pm_Status
         If pm_Status <> 0 Then .StatusF = pm_Status
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(1), CL_SSSMAIN(1))
         If Not PP_SSSMAIN.RecalcMode Then
            If PP_SSSMAIN.ErrorC = 0 Or wk_RecalcSw = False Then
               Call AE_Later_SSSMAIN
               If pm_MoveCursor Then
                  If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
               End If
            Else
               If pm_MoveCursor Then
                  If AE_CursorToError_SSSMAIN() = False Then
                     Call AE_Later_SSSMAIN
                     If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
                  End If
               End If
            End If
         End If
      End If
   Else
      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(1))
      Call AE_CheckSub2_SSSMAIN(1, 1, True)
      If AE_ErrorToInteger(Ck_Error) >= 0 Then
         PP_SSSMAIN.ErrorC = PP_SSSMAIN.ErrorC + 1
         wk_Bool = SSSMAIN_ErrorMsg(Ck_Error)
      Else
         wk_Bool = AE_MsgLibrary(PP_SSSMAIN, "PreCheck" & CStr(-Ck_Error))
      End If
   End If
   End With
End Sub

Sub AE_Check_SSSMAIN_STTTOKCD(ByVal CC_NewVal, ByVal pm_Status As Integer, ByVal pm_MoveCursor As Boolean, ByVal pm_HandIn As Boolean) 'Generated.
Dim wk_SaveMask As Boolean
Dim RC_ErrorC As Integer
Dim wk_RecalcSw As Boolean
Dim wk_Equal As Boolean
Dim Wk_Index As Integer
Dim wk_Index1 As Integer
' === 20110216 === UPDATE S TOM)Morimoto
'   With CP_SSSMAIN(3)
    Wk_Index = Get_Index("HD_STTTOKCD", CQ_SSSMAIN)
   With CP_SSSMAIN(Wk_Index)
' === 20110216 === UPDATE E
   Dim ex_CheckRtnCode As Integer
   ex_CheckRtnCode = .CheckRtnCode
' === 20110216 === UPDATE S TOM)Morimoto
'   If .FormatClass = Cn_Code And .FormatChr <> "" And Not IsNull(CC_NewVal) Then CC_NewVal = AE_FormatC$(CP_SSSMAIN(3), CC_NewVal)
   If .FormatClass = Cn_Code And .FormatChr <> "" And Not IsNull(CC_NewVal) Then CC_NewVal = AE_FormatC$(CP_SSSMAIN(Wk_Index), CC_NewVal)
' === 20110216 === UPDATE E
   PP_SSSMAIN.SaveXV = .ExVal
   PP_SSSMAIN.SaveExStatus = .ExStatus
   .ExVal = .CuVal
   PP_SSSMAIN.SaveCV = .CuVal
   .ExStatus = .StatusF
   If IsNull(CC_NewVal) Then
      CC_NewVal = Space$(.MaxLength)
   ElseIf .Alignment = 1 And LenWid(CC_NewVal) < .MaxLength Then
      CC_NewVal = Space$(.MaxLength - LenWid(CC_NewVal)) & CC_NewVal
   End If
   .CuVal = CC_NewVal
   If Not PP_SSSMAIN.RecalcMode Then AE_StatusBar(PP_SSSMAIN.ScX) = "": AE_StatusCodeBar(PP_SSSMAIN.ScX) = ""
   If (.CheckRtnCode <> 0) Then
      Ck_Error = .CheckRtnCode
      Ck_Error = STTTOKCD_Check(AE_NullCnv2_SSSMAIN(CC_NewVal))
   Else
      Ck_Error = STTTOKCD_Check(AE_NullCnv2_SSSMAIN(CC_NewVal))
   End If
   .CheckRtnCode = AE_ErrorToInteger(Ck_Error)
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
      .CuVal = CC_NewVal
' === 20110216 === UPDATE S TOM)Morimoto
'      .TpStr = AE_Format$(CP_SSSMAIN(3), .CuVal, 0, True)
'      Call AE_CtSet(PP_SSSMAIN, 3, .TpStr, .TypeA, False)
      .TpStr = AE_Format$(CP_SSSMAIN(Wk_Index), .CuVal, 0, True)
      Call AE_CtSet(PP_SSSMAIN, Wk_Index, .TpStr, .TypeA, False)
' === 20110216 === UPDATE E
   PP_SSSMAIN.MaskMode = wk_SaveMask
   If AE_ErrorToInteger(Ck_Error) = 0 Or (pm_Status >= Cn_Status7 And PP_SSSMAIN.CheckErrNglct) Then
      If AE_IsNull_SSSMAIN(PP_SSSMAIN.SaveCV) And AE_IsNull_SSSMAIN(CC_NewVal) Or AE_NullCnv2_SSSMAIN(PP_SSSMAIN.SaveCV) = AE_NullCnv2_SSSMAIN(CC_NewVal) Then
         wk_Equal = True
      Else
         wk_Equal = False
' === 20110216 === UPDATE S TOM)Morimoto
'         Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(3))
         Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(Wk_Index))
' === 20110216 === UPDATE E
      End If
      If wk_Equal And ex_CheckRtnCode = 0 And pm_Status >= Cn_Status6 And pm_Status = .StatusC And Not PP_SSSMAIN.RecalcMode Then
         .ExVal = PP_SSSMAIN.SaveXV
         .ExStatus = PP_SSSMAIN.SaveExStatus
         Call AE_Later_SSSMAIN
         If pm_MoveCursor Then
            If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
         End If
      Else
         If pm_Status <> 0 Then .StatusC = pm_Status
         If pm_Status <> 0 Then .StatusF = pm_Status
' === 20110216 === UPDATE S TOM)Morimoto
'         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(3), CL_SSSMAIN(3))
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(Wk_Index), CL_SSSMAIN(Wk_Index))
' === 20110216 === UPDATE E
         If Not PP_SSSMAIN.RecalcMode Then
            PP_SSSMAIN.DerivedOrigin = "HD_STTTOKCD"
' === 20110216 === UPDATE S TOM)Morimoto
'            CP_SSSMAIN(4).ExVal = CP_SSSMAIN(4).CuVal 'STTTOKNM
'            CP_SSSMAIN(4).ExStatus = CP_SSSMAIN(4).StatusC
            wk_Index1 = Get_Index("HD_STTTOKNM", CQ_SSSMAIN)
            CP_SSSMAIN(wk_Index1).ExVal = CP_SSSMAIN(wk_Index1).CuVal 'STTTOKNM
            CP_SSSMAIN(wk_Index1).ExStatus = CP_SSSMAIN(wk_Index1).StatusC
' === 20110216 === UPDATE E
            Call AE_Derived_SSSMAIN_hd_STTTOKNM(PP_SSSMAIN.De2)
            If PP_SSSMAIN.ErrorC = 0 Or wk_RecalcSw = False Then
               Call AE_Later_SSSMAIN
               If pm_MoveCursor Then
                  If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
               End If
            Else
               If pm_MoveCursor Then
                  If AE_CursorToError_SSSMAIN() = False Then
                     Call AE_Later_SSSMAIN
                     If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
                  End If
               End If
            End If
         End If
      End If
   Else
' === 20110216 === UPDATE S TOM)Morimoto
'      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(3))
'      Call AE_CheckSub2_SSSMAIN(3, 3, True)
      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(Wk_Index))
      Call AE_CheckSub2_SSSMAIN(Wk_Index, Wk_Index, True)
' === 20110216 === UPDATE E
      If AE_ErrorToInteger(Ck_Error) >= 0 Then
         PP_SSSMAIN.ErrorC = PP_SSSMAIN.ErrorC + 1
         wk_Bool = SSSMAIN_ErrorMsg(Ck_Error)
      Else
         wk_Bool = AE_MsgLibrary(PP_SSSMAIN, "PreCheck" & CStr(-Ck_Error))
      End If
   End If
   End With
End Sub

Sub AE_Check_SSSMAIN_STTTOKNM(ByVal CC_NewVal, ByVal pm_Status As Integer, ByVal pm_MoveCursor As Boolean, ByVal pm_HandIn As Boolean) 'Generated.
Dim wk_SaveMask As Boolean
Dim RC_ErrorC As Integer
Dim wk_RecalcSw As Boolean
Dim wk_Equal As Boolean
Dim Wk_Index As Integer
' === 20110216 === UPDATE S TOM)Morimoto
'   With CP_SSSMAIN(4)
    Wk_Index = Get_Index("HD_STTTOKNM", CQ_SSSMAIN)
   With CP_SSSMAIN(Wk_Index)
' === 20110216 === UPDATE E
   Dim ex_CheckRtnCode As Integer
   ex_CheckRtnCode = .CheckRtnCode
' === 20110216 === UPDATE S TOM)Morimoto
'   If .FormatClass = Cn_Code And .FormatChr <> "" And Not IsNull(CC_NewVal) Then CC_NewVal = AE_FormatC$(CP_SSSMAIN(4), CC_NewVal)
   If .FormatClass = Cn_Code And .FormatChr <> "" And Not IsNull(CC_NewVal) Then CC_NewVal = AE_FormatC$(CP_SSSMAIN(Wk_Index), CC_NewVal)
' === 20110216 === UPDATE E
   PP_SSSMAIN.SaveXV = .ExVal
   PP_SSSMAIN.SaveExStatus = .ExStatus
   .ExVal = .CuVal
   PP_SSSMAIN.SaveCV = .CuVal
   .ExStatus = .StatusF
   If IsNull(CC_NewVal) Then
      CC_NewVal = Space$(.MaxLength)
   ElseIf .Alignment = 1 And LenWid(CC_NewVal) < .MaxLength Then
      CC_NewVal = Space$(.MaxLength - LenWid(CC_NewVal)) & CC_NewVal
   End If
   .CuVal = CC_NewVal
   If Not PP_SSSMAIN.RecalcMode Then AE_StatusBar(PP_SSSMAIN.ScX) = "": AE_StatusCodeBar(PP_SSSMAIN.ScX) = ""
   Ck_Error = 0
   .CheckRtnCode = AE_ErrorToInteger(Ck_Error)
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
      .CuVal = CC_NewVal
' === 20110216 === UPDATE S TOM)Morimoto
'      .TpStr = AE_Format$(CP_SSSMAIN(4), .CuVal, 0, True)
'      Call AE_CtSet(PP_SSSMAIN, 4, .TpStr, .TypeA, False)
      .TpStr = AE_Format$(CP_SSSMAIN(Wk_Index), .CuVal, 0, True)
      Call AE_CtSet(PP_SSSMAIN, Wk_Index, .TpStr, .TypeA, False)
' === 20110216 === UPDATE E
   PP_SSSMAIN.MaskMode = wk_SaveMask
   If AE_ErrorToInteger(Ck_Error) = 0 Or (pm_Status >= Cn_Status7 And PP_SSSMAIN.CheckErrNglct) Then
      If AE_IsNull_SSSMAIN(PP_SSSMAIN.SaveCV) And AE_IsNull_SSSMAIN(CC_NewVal) Or AE_NullCnv2_SSSMAIN(PP_SSSMAIN.SaveCV) = AE_NullCnv2_SSSMAIN(CC_NewVal) Then
         wk_Equal = True
      Else
         wk_Equal = False
' === 20110216 === UPDATE S TOM)Morimoto
'         Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(4))
         Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(Wk_Index))
' === 20110216 === UPDATE E
      End If
      If wk_Equal And ex_CheckRtnCode = 0 And pm_Status >= Cn_Status6 And pm_Status = .StatusC And Not PP_SSSMAIN.RecalcMode Then
         .ExVal = PP_SSSMAIN.SaveXV
         .ExStatus = PP_SSSMAIN.SaveExStatus
         Call AE_Later_SSSMAIN
         If pm_MoveCursor Then
            If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
         End If
      Else
         If pm_Status <> 0 Then .StatusC = pm_Status
         If pm_Status <> 0 Then .StatusF = pm_Status
' === 20110216 === UPDATE S TOM)Morimoto
'         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(4), CL_SSSMAIN(4))
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(Wk_Index), CL_SSSMAIN(Wk_Index))
' === 20110216 === UPDATE E
         If Not PP_SSSMAIN.RecalcMode Then
            If PP_SSSMAIN.ErrorC = 0 Or wk_RecalcSw = False Then
               Call AE_Later_SSSMAIN
               If pm_MoveCursor Then
                  If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
               End If
            Else
               If pm_MoveCursor Then
                  If AE_CursorToError_SSSMAIN() = False Then
                     Call AE_Later_SSSMAIN
                     If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
                  End If
               End If
            End If
         End If
      End If
   Else
' === 20110216 === UPDATE S TOM)Morimoto
'      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(4))
'      Call AE_CheckSub2_SSSMAIN(4, 4, True)
      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(Wk_Index))
      Call AE_CheckSub2_SSSMAIN(Wk_Index, Wk_Index, True)
' === 20110216 === UPDATE E
      If AE_ErrorToInteger(Ck_Error) >= 0 Then
         PP_SSSMAIN.ErrorC = PP_SSSMAIN.ErrorC + 1
         wk_Bool = SSSMAIN_ErrorMsg(Ck_Error)
      Else
         wk_Bool = AE_MsgLibrary(PP_SSSMAIN, "PreCheck" & CStr(-Ck_Error))
      End If
   End If
   End With
End Sub

Sub AE_Check_SSSMAIN_THSCD(ByVal CC_NewVal, ByVal pm_Status As Integer, ByVal pm_MoveCursor As Boolean, ByVal pm_HandIn As Boolean) 'Generated.
Dim wk_SaveMask As Boolean
Dim RC_ErrorC As Integer
Dim wk_RecalcSw As Boolean
Dim wk_Equal As Boolean
   With CP_SSSMAIN(2)
   Dim ex_CheckRtnCode As Integer
   ex_CheckRtnCode = .CheckRtnCode
   If .FormatClass = Cn_Code And .FormatChr <> "" And Not IsNull(CC_NewVal) Then CC_NewVal = AE_FormatC$(CP_SSSMAIN(2), CC_NewVal)
   PP_SSSMAIN.SaveXV = .ExVal
   PP_SSSMAIN.SaveExStatus = .ExStatus
   .ExVal = .CuVal
   PP_SSSMAIN.SaveCV = .CuVal
   .ExStatus = .StatusF
   If IsNull(CC_NewVal) Then
      CC_NewVal = Space$(.MaxLength)
   ElseIf .Alignment = 1 And LenWid(CC_NewVal) < .MaxLength Then
      CC_NewVal = Space$(.MaxLength - LenWid(CC_NewVal)) & CC_NewVal
   End If
   .CuVal = CC_NewVal
   If Not PP_SSSMAIN.RecalcMode Then AE_StatusBar(PP_SSSMAIN.ScX) = "": AE_StatusCodeBar(PP_SSSMAIN.ScX) = ""
   CC_NewVal = AE_NullCnv2_SSSMAIN(CC_NewVal)
   If (.CheckRtnCode <> 0) Then
      Ck_Error = .CheckRtnCode
      Ck_Error = THSCD_Check(CC_NewVal)
   Else
      Ck_Error = THSCD_Check(CC_NewVal)
   End If
   .CheckRtnCode = AE_ErrorToInteger(Ck_Error)
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
      .CuVal = CC_NewVal
      .TpStr = AE_Format$(CP_SSSMAIN(2), .CuVal, 0, True)
      Call AE_CtSet(PP_SSSMAIN, 2, .TpStr, .TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
   If AE_ErrorToInteger(Ck_Error) = 0 Or (pm_Status >= Cn_Status7 And PP_SSSMAIN.CheckErrNglct) Then
      If AE_IsNull_SSSMAIN(PP_SSSMAIN.SaveCV) And AE_IsNull_SSSMAIN(CC_NewVal) Or AE_NullCnv2_SSSMAIN(PP_SSSMAIN.SaveCV) = AE_NullCnv2_SSSMAIN(CC_NewVal) Then
         wk_Equal = True
      Else
         wk_Equal = False
         Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(2))
      End If
      If wk_Equal And ex_CheckRtnCode = 0 And pm_Status >= Cn_Status6 And pm_Status = .StatusC And Not PP_SSSMAIN.RecalcMode Then
         .ExVal = PP_SSSMAIN.SaveXV
         .ExStatus = PP_SSSMAIN.SaveExStatus
         Call AE_Later_SSSMAIN
         If pm_MoveCursor Then
            If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
         End If
      Else
         If pm_Status <> 0 Then .StatusC = pm_Status
         If pm_Status <> 0 Then .StatusF = pm_Status
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(2), CL_SSSMAIN(2))
         If Not PP_SSSMAIN.RecalcMode Then
            If PP_SSSMAIN.ErrorC = 0 Or wk_RecalcSw = False Then
               Call AE_Later_SSSMAIN
               If pm_MoveCursor Then
                  If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
               End If
            Else
               If pm_MoveCursor Then
                  If AE_CursorToError_SSSMAIN() = False Then
                     Call AE_Later_SSSMAIN
                     If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
                  End If
               End If
            End If
         End If
      End If
   Else
      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(2))
      Call AE_CheckSub2_SSSMAIN(2, 2, True)
      If AE_ErrorToInteger(Ck_Error) >= 0 Then
         PP_SSSMAIN.ErrorC = PP_SSSMAIN.ErrorC + 1
         wk_Bool = SSSMAIN_ErrorMsg(Ck_Error)
      Else
         wk_Bool = AE_MsgLibrary(PP_SSSMAIN, "PreCheck" & CStr(-Ck_Error))
      End If
   End If
   End With
End Sub

Sub AE_CheckSub2_SSSMAIN(ByVal pm_Tx As Integer, ByVal pm_Px As Integer, ByVal pm_Sw As Boolean) 'Generated.
Dim wk_SS As Long
   If pm_Sw Then
      CP_SSSMAIN(pm_Px).CuVal = PP_SSSMAIN.SaveCV
      CP_SSSMAIN(pm_Px).ExVal = PP_SSSMAIN.SaveXV
      CP_SSSMAIN(pm_Px).ExStatus = PP_SSSMAIN.SaveExStatus
      CP_SSSMAIN(pm_Px).StatusC = Cn_Status2
      If CP_SSSMAIN(pm_Px).TypeA = Cn_NormalOrV Or CP_SSSMAIN(pm_Px).TypeA = Cn_InputOnly Then Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(pm_Px), CL_SSSMAIN(pm_Px))
   End If
   If pm_Tx >= 0 Then
      If CP_SSSMAIN(pm_Px).TypeA = Cn_NormalOrV Then
         If PP_SSSMAIN.SelValid And CP_SSSMAIN(pm_Px).FixedFormat <> 1 Then
            AE_Controls(PP_SSSMAIN.CtB + pm_Tx).SelStart = 0
            AE_Controls(PP_SSSMAIN.CtB + pm_Tx).SelLength = Len((AE_Controls(PP_SSSMAIN.CtB + pm_Tx)))
         Else
            wk_SS = AE_Controls(PP_SSSMAIN.CtB + pm_Tx).SelStart
            Do While wk_SS > 0
               wk_SS = wk_SS - 1
               If AE_KeyInOkChar(PP_SSSMAIN, Mid$((AE_Controls(PP_SSSMAIN.CtB + pm_Tx)), wk_SS + 1, 1), CP_SSSMAIN(pm_Px).KeyInOkClass) Then
                  AE_Controls(PP_SSSMAIN.CtB + pm_Tx).SelStart = wk_SS
                  AE_Controls(PP_SSSMAIN.CtB + pm_Tx).SelLength = PP_SSSMAIN.Override
                  Exit Sub
               End If
            Loop
            AE_Controls(PP_SSSMAIN.CtB + pm_Tx).SelLength = PP_SSSMAIN.Override
         End If
      End If
   End If
End Sub

Sub AE_ClearDe_SSSMAIN() 'Generated.
Dim wk_SaveDe As Integer
Dim wk_SaveDe2 As Integer
   If PP_SSSMAIN.Mode = Cn_Mode3 Then Beep: Call AE_CursorCurrent_SSSMAIN: Exit Sub
   If PP_SSSMAIN.RecalcMode Then Exit Sub
   PP_SSSMAIN.InitValStatus = Cn_ModeDataChanged
End Sub

Sub AE_ClearInitValStatus_SSSMAIN() 'Generated.
   PP_SSSMAIN.InitValStatus = PP_SSSMAIN.Mode
   Dim wk_Px As Integer
   wk_Px = 0
' === 20110216 === UPDATE S TOM)Morimoto
'   Do While wk_Px < 7
   Do While wk_Px < PP_SSSMAIN.HeadN
' === 20110216 === UPDATE E
      CP_SSSMAIN(wk_Px).Modified = PP_SSSMAIN.Mode
      wk_Px = wk_Px + 1
   Loop
End Sub

Sub AE_ClearItm_SSSMAIN(ByVal pm_HandIn As Boolean) 'Generated.
Dim wk_ClearedVal As Variant
Dim wk_De As Integer
   If PP_SSSMAIN.Mode = Cn_Mode3 Then Exit Sub
' === 20110216 === UPDATE S TOM)Morimoto
'   If PP_SSSMAIN.Tx < 0 Or PP_SSSMAIN.Tx >= 7 Then Exit Sub
   If PP_SSSMAIN.Tx < 0 Or PP_SSSMAIN.Tx >= PP_SSSMAIN.HeadN Then Exit Sub
' === 20110216 === UPDATE E
   PP_SSSMAIN.MaskMode = True
' === 20110216 === UPDATE S TOM)Morimoto
'   If PP_SSSMAIN.Tx < 7 Then
   If PP_SSSMAIN.Tx < PP_SSSMAIN.HeadN Then
' === 20110216 === UPDATE E
      Call AE_InitValHd_SSSMAIN(PP_SSSMAIN.Tx, False, CP_SSSMAIN(PP_SSSMAIN.Px).StatusF)
' === 20110216 === DELETE S TOM)Morimoto
'   ElseIf PP_SSSMAIN.Tx < 7 Then
'   ElseIf PP_SSSMAIN.Tx < 7 Then
'   ElseIf PP_SSSMAIN.Tx < 7 Then
' === 20110216 === DELETE E
   End If
   wk_ClearedVal = CP_SSSMAIN(PP_SSSMAIN.Px).CuVal
   CP_SSSMAIN(PP_SSSMAIN.Px).CuVal = CP_SSSMAIN(PP_SSSMAIN.Px).ExVal
   CP_SSSMAIN(PP_SSSMAIN.Px).StatusC = CP_SSSMAIN(PP_SSSMAIN.Px).ExStatus
   CP_SSSMAIN(PP_SSSMAIN.Px).StatusF = CP_SSSMAIN(PP_SSSMAIN.Px).ExStatus
   PP_SSSMAIN.MaskMode = False
      AE_StatusCodeBar(PP_SSSMAIN.ScX) = ""
      AE_StatusBar(PP_SSSMAIN.ScX) = ""
   If PP_SSSMAIN.InitValStatus >= Cn_Mode4 Then Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(PP_SSSMAIN.Px))
   Call AE_SetCheck_SSSMAIN(wk_ClearedVal, Cn_Status8, pm_HandIn)
End Sub

Static Function AE_CompleteCheck_SSSMAIN(ByVal pm_HeadCheck As Boolean) As Integer 'Generated.
Dim wk_De As Integer
Dim wk_Px As Integer
Dim wk_IncompletionC As Integer
Dim wk_IncompletionC2 As Integer
   wk_IncompletionC = 0
   wk_IncompletionC2 = 0
   PP_SSSMAIN.InCompletePx = -1
   Call AE_CompleteCheckSub_SSSMAIN(0, PP_SSSMAIN.BodyPx, wk_IncompletionC, wk_IncompletionC2) '0: HeadPx
   If wk_IncompletionC > 0 Then
      wk_Bool = AE_MsgLibrary(PP_SSSMAIN, "CompleteC")
   End If
   AE_CompleteCheck_SSSMAIN = wk_IncompletionC
End Function

Private Sub AE_CompleteCheckSub_SSSMAIN(ByVal pm_Px1 As Integer, ByVal pm_Px2 As Integer, ByRef pm_IncompletionC As Integer, ByRef pm_IncompletionC2 As Integer) 'Generated.
Dim wk_Px As Integer
   wk_Px = pm_Px1
   Do While wk_Px < pm_Px2
      If CP_SSSMAIN(wk_Px).TypeA = Cn_OptionButtonC Or CP_SSSMAIN(wk_Px).TypeA = Cn_CheckBox Then
      ElseIf CP_SSSMAIN(wk_Px).StatusC <= Cn_Status5 Then
         pm_IncompletionC = pm_IncompletionC + 1
         If wk_Px <> PP_SSSMAIN.Px Then pm_IncompletionC2 = pm_IncompletionC2 + 1
         If AE_IsWritableInOutMode(PP_SSSMAIN, CP_SSSMAIN(wk_Px)) Then PP_SSSMAIN.InCompletePx = wk_Px: Exit Do
      Else
         Dim fl_NullZero As Boolean
         fl_NullZero = AE_IsNullZero(PP_SSSMAIN, CP_SSSMAIN(wk_Px))
         If AE_GetInOutMode(CP_SSSMAIN(wk_Px).InOutMode, PP_SSSMAIN.Mode) Mod 2 = 1 Then
            If (Not fl_NullZero And IsNull(CP_SSSMAIN(wk_Px).CuVal)) Or (fl_NullZero And AE_IsNull_SSSMAIN(CP_SSSMAIN(wk_Px).CuVal)) Then
               pm_IncompletionC = pm_IncompletionC + 1
               If AE_IsWritableInOutMode(PP_SSSMAIN, CP_SSSMAIN(wk_Px)) Then pm_IncompletionC2 = pm_IncompletionC2 + 1: PP_SSSMAIN.InCompletePx = wk_Px: Exit Do
            ElseIf Left$(CP_SSSMAIN(wk_Px).CuVal, 1) = Space$(1) And CP_SSSMAIN(wk_Px).Alignment <> 1 And CP_SSSMAIN(wk_Px).FixedFormat = 1 Then
               pm_IncompletionC = pm_IncompletionC + 1
               If AE_IsWritableInOutMode(PP_SSSMAIN, CP_SSSMAIN(wk_Px)) Then pm_IncompletionC2 = pm_IncompletionC2 + 1: PP_SSSMAIN.InCompletePx = wk_Px: Exit Do
            ElseIf Right$(CP_SSSMAIN(wk_Px).CuVal, 1) = Space$(1) And CP_SSSMAIN(wk_Px).Alignment = 1 And CP_SSSMAIN(wk_Px).FixedFormat = 1 Then
               pm_IncompletionC = pm_IncompletionC + 1
               If AE_IsWritableInOutMode(PP_SSSMAIN, CP_SSSMAIN(wk_Px)) Then pm_IncompletionC2 = pm_IncompletionC2 + 1: PP_SSSMAIN.InCompletePx = wk_Px: Exit Do
            End If
         End If
      End If
      wk_Px = wk_Px + 1
   Loop
End Sub

Function AE_CursorCheck_SSSMAIN(ByVal pm_TypeA As Integer, ByVal pm_Tx As Integer) As Boolean 'Generated.
   If pm_Tx = -2 Then
      AE_CursorCheck_SSSMAIN = True
   ElseIf pm_TypeA = Cn_OutputOnly Or pm_TypeA = Cn_CheckBox Or pm_TypeA = Cn_OptionButtonH Or pm_TypeA = Cn_OptionButtonC Then
      AE_CursorCheck_SSSMAIN = False
   ElseIf AE_Controls(PP_SSSMAIN.CtB + pm_Tx).TabStop And AE_Controls(PP_SSSMAIN.CtB + pm_Tx).Enabled And AE_Controls(PP_SSSMAIN.CtB + pm_Tx).Visible Then
      AE_CursorCheck_SSSMAIN = True
   Else
      AE_CursorCheck_SSSMAIN = False
   End If
End Function

Sub AE_CursorCurrent_SSSMAIN() 'Generated.
   If PP_SSSMAIN.CursorSet = True Then Exit Sub
' === 20110216 === UPDATE S TOM)Morimoto
'   If PP_SSSMAIN.Tx >= 0 And PP_SSSMAIN.Tx < 7 Then
   If PP_SSSMAIN.Tx >= 0 And PP_SSSMAIN.Tx < PP_SSSMAIN.HeadN Then
' === 20110216 === UPDATE E
      If AE_Controls(PP_SSSMAIN.CtB + PP_SSSMAIN.Tx).Visible And AE_Controls(PP_SSSMAIN.CtB + PP_SSSMAIN.Tx).Enabled And AE_Controls(PP_SSSMAIN.CtB + PP_SSSMAIN.Tx).TabStop Then
         Call AE_CursorRestSub_SSSMAIN(PP_SSSMAIN.Tx)
         Exit Sub
      End If
   End If
   Call AE_CursorInit_SSSMAIN
End Sub

Function AE_CursorDown_SSSMAIN(ByVal pm_Tx As Integer, Optional ByVal pm_Int) As Boolean 'Generated.
Dim wk_Tx As Integer
Dim wk_ExTopDe As Integer
   wk_Tx = pm_Tx
' === 20110216 === UPDATE S TOM)Morimoto
'   Do While wk_Tx < 7
   Do While wk_Tx < PP_SSSMAIN.HeadN
' === 20110216 === UPDATE E
      wk_Tx = wk_Tx + 1
' === 20110216 === UPDATE S TOM)Morimoto
'      If wk_Tx < 7 Then
      If wk_Tx < PP_SSSMAIN.HeadN Then
' === 20110216 === UPDATE E
         If AE_CursorCheck_SSSMAIN(CP_SSSMAIN(AE_Px(PP_SSSMAIN, wk_Tx)).TypeA, wk_Tx) Then
            Call AE_CursorMove_SSSMAIN(wk_Tx)
            AE_CursorDown_SSSMAIN = True
            Exit Function
         End If
      End If
   Loop
   AE_CursorDown_SSSMAIN = False
End Function

Sub AE_CursorInit_SSSMAIN() 'Generated.
   PP_SSSMAIN.CursorDirection = Cn_Direction1 '1: Next
   If PP_SSSMAIN.Tx < 0 Then
      If FR_SSSMAIN.ActiveControl Is Nothing Then
         Call AE_CursorRestSub_SSSMAIN(Cn_CursorToHome)
      ElseIf FR_SSSMAIN.ActiveControl.TabIndex <> AE_CursorRest(PP_SSSMAIN.ScX).TabIndex Then
         Call AE_CursorRestSub_SSSMAIN(Cn_CursorToHome)
      Else
         wk_Int = AE_CursorNext_SSSMAIN(-1)
      End If
   Else
      If Not AE_CursorToError_SSSMAIN() Then
         Call AE_CursorRestSub_SSSMAIN(Cn_CursorToHome)
      End If
   End If
End Sub

Sub AE_CursorMove_SSSMAIN(ByVal pm_Tx As Integer) 'Generated.
Dim wk_Tx As Integer
   wk_Tx = pm_Tx
   If wk_Tx = -2 Then Exit Sub
' === 20110216 === UPDATE S TOM)Morimoto
'   If wk_Tx < 0 Or wk_Tx >= 7 Then Call AE_CursorRestSub_SSSMAIN(Cn_CursorToRest): Exit Sub
   If wk_Tx < 0 Or wk_Tx >= PP_SSSMAIN.HeadN Then Call AE_CursorRestSub_SSSMAIN(Cn_CursorToRest): Exit Sub
' === 20110216 === UPDATE E
   If AE_Controls(PP_SSSMAIN.CtB + wk_Tx).TabStop And AE_Controls(PP_SSSMAIN.CtB + wk_Tx).Enabled And AE_Controls(PP_SSSMAIN.CtB + wk_Tx).Visible Then
      If wk_Tx = PP_SSSMAIN.Tx Then
         Call AE_CursorRestSub_SSSMAIN(wk_Tx)
      Else 'If wk_Tx <> PP_SSSMAIN.Tx Then
         AE_CursorRest(PP_SSSMAIN.ScX).TabStop = False
         If Not PP_SSSMAIN.CursorSet Then
            PP_SSSMAIN.NextTx = wk_Tx
            On Error Resume Next
            AE_Controls(PP_SSSMAIN.CtB + wk_Tx).SetFocus
         End If
      End If
   Else
      Call AE_CursorRestSub_SSSMAIN(Cn_CursorToRest)
   End If
End Sub

Function AE_CursorNext_SSSMAIN(ByVal pm_Tx As Integer) As Boolean 'Generated.
Dim wk_Tx As Integer
Dim wk_ExTopDe As Integer
   wk_Tx = pm_Tx
' === 20110216 === UPDATE S TOM)Morimoto
'   Do While wk_Tx < 7
   Do While wk_Tx < PP_SSSMAIN.HeadN
' === 20110216 === UPDATE E
      wk_Tx = wk_Tx + 1
' === 20110216 === UPDATE S TOM)Morimoto
'      If wk_Tx < 7 Then
      If wk_Tx < PP_SSSMAIN.HeadN Then
' === 20110216 === UPDATE E
         If AE_CursorCheck_SSSMAIN(CP_SSSMAIN(AE_Px(PP_SSSMAIN, wk_Tx)).TypeA, wk_Tx) Then
            Call AE_CursorMove_SSSMAIN(wk_Tx)
            AE_CursorNext_SSSMAIN = True
            Exit Function
         End If
      End If
   Loop
   If PP_SSSMAIN.KeyDownMode = Cn_Mode3 And PP_SSSMAIN.Tx >= 0 Then
      PP_SSSMAIN.TimerWorkId = 9: AE_Timer(PP_SSSMAIN.ScX).Interval = 10: AE_Timer(PP_SSSMAIN.ScX) = True
   End If
   AE_CursorNext_SSSMAIN = False
End Function

Function AE_CursorNextDsp_SSSMAIN(ByVal pm_Tx As Integer) As Boolean 'Generated.
Dim wk_Tx As Integer
   wk_Tx = pm_Tx
' === 20110216 === UPDATE S TOM)Morimoto
'   Do While wk_Tx < 6
   Do While wk_Tx < PP_SSSMAIN.HeadN - 1
' === 20110216 === UPDATE E
      wk_Tx = wk_Tx + 1
' === 20110216 === UPDATE S TOM)Morimoto
'      If wk_Tx < 7 Then
      If wk_Tx < PP_SSSMAIN.HeadN Then
' === 20110216 === UPDATE E
         If AE_CursorCheck_SSSMAIN(CP_SSSMAIN(AE_Px(PP_SSSMAIN, wk_Tx)).TypeA, wk_Tx) Then
            Call AE_CursorMove_SSSMAIN(wk_Tx)
            AE_CursorNextDsp_SSSMAIN = True
            Exit Function
         End If
      End If
   Loop
   AE_CursorNextDsp_SSSMAIN = False
End Function

Function AE_CursorPrev_SSSMAIN(ByVal pm_Tx As Integer) As Boolean 'Generated.
Dim wk_Tx As Integer
Dim wk_LastTx As Integer
   wk_Tx = pm_Tx
   Do While wk_Tx >= 0
      wk_Tx = wk_Tx - 1
      If wk_Tx >= 0 Then
         If AE_CursorCheck_SSSMAIN(CP_SSSMAIN(AE_Px(PP_SSSMAIN, wk_Tx)).TypeA, wk_Tx) Then
            Call AE_CursorMove_SSSMAIN(wk_Tx)
            AE_CursorPrev_SSSMAIN = True
            Exit Function
         End If
      End If
   Loop
   AE_CursorPrev_SSSMAIN = False
End Function

Function AE_CursorPrevDsp_SSSMAIN(ByVal pm_Tx As Integer) As Boolean 'Generated.
Dim wk_Tx As Integer
   wk_Tx = pm_Tx
   Do While wk_Tx >= 0
      wk_Tx = wk_Tx - 1
      If wk_Tx >= 0 Then
         If AE_CursorCheck_SSSMAIN(CP_SSSMAIN(AE_Px(PP_SSSMAIN, wk_Tx)).TypeA, wk_Tx) Then
            Call AE_CursorMove_SSSMAIN(wk_Tx)
            AE_CursorPrevDsp_SSSMAIN = True
            Exit Function
         End If
      End If
   Loop
   AE_CursorPrevDsp_SSSMAIN = False
End Function

Sub AE_CursorRestSub_SSSMAIN(ByVal pm_CurSorTo As Integer) 'Generated.
   If PP_SSSMAIN.CursorSet = False And AE_CursorRest(PP_SSSMAIN.ScX).Visible And AE_CursorRest(PP_SSSMAIN.ScX).Enabled Then
      If FR_SSSMAIN.ActiveControl Is Nothing Then
      ElseIf FR_SSSMAIN.ActiveControl.TabIndex <> AE_CursorRest(PP_SSSMAIN.ScX).TabIndex Then
      Else
         Exit Sub
      End If
      AE_CursorRest(PP_SSSMAIN.ScX).TabStop = True
      PP_SSSMAIN.CursorToWhere = pm_CurSorTo
      PP_SSSMAIN.NextTx = Cn_NextTxCleared
      On Error Resume Next
      AE_CursorRest(PP_SSSMAIN.ScX).SetFocus
   End If
End Sub

Sub AE_CursorRivise_SSSMAIN() 'Generated.
   If Not PP_SSSMAIN.LostFocusCheck Then
   ElseIf PP_SSSMAIN.MouseDownTx <> -1 Then
      If PP_SSSMAIN.ModalFlag Or (CP_SSSMAIN(PP_SSSMAIN.MouseDownTx).TypeA = Cn_NormalOrV And Not PP_SSSMAIN.ChangeAtGotFocus) Then Call AE_CursorRestSub_SSSMAIN(PP_SSSMAIN.MouseDownTx)
   ElseIf PP_SSSMAIN.ModalFlag Then
      Call AE_CursorRestSub_SSSMAIN(PP_SSSMAIN.Tx)
   End If
   PP_SSSMAIN.LostFocusCheck = False
   PP_SSSMAIN.MouseDownTx = -1
   PP_SSSMAIN.ModalFlag = False
End Sub

Function AE_CursorSkip_SSSMAIN() As Boolean 'Generated.
Dim wk_Bool As Boolean
Dim wk_CursorDirection As Integer
   wk_Bool = True
   Select Case PP_SSSMAIN.CursorDest
      Case Cn_Dest2
         If Not AE_CursorNext_SSSMAIN(-1) Then Call AE_CursorRestSub_SSSMAIN(Cn_CursorToRest)
      Case Cn_Dest3
' === 20110216 === UPDATE S TOM)Morimoto
'         If Not AE_CursorPrev_SSSMAIN(7) Then Call AE_CursorRestSub_SSSMAIN(Cn_CursorToRest)
         If Not AE_CursorPrev_SSSMAIN(PP_SSSMAIN.HeadN) Then Call AE_CursorRestSub_SSSMAIN(Cn_CursorToRest)
' === 20110216 === UPDATE E
      Case Cn_Dest4
         PP_SSSMAIN.UpDownFlag = True
         If Not AE_CursorUp_SSSMAIN(PP_SSSMAIN.Tx) Then
            If Not AE_CursorNext_SSSMAIN(-1) Then Call AE_CursorRestSub_SSSMAIN(Cn_CursorToRest)
         End If
         PP_SSSMAIN.UpDownFlag = False
      Case Cn_Dest5
         PP_SSSMAIN.UpDownFlag = True
         If Not AE_CursorDown_SSSMAIN(PP_SSSMAIN.Tx) Then
' === 20110216 === UPDATE S TOM)Morimoto
'            If Not AE_CursorPrev_SSSMAIN(7) Then Call AE_CursorRestSub_SSSMAIN(Cn_CursorToRest)
            If Not AE_CursorPrev_SSSMAIN(PP_SSSMAIN.HeadN) Then Call AE_CursorRestSub_SSSMAIN(Cn_CursorToRest)
' === 20110216 === UPDATE E
         End If
         PP_SSSMAIN.UpDownFlag = False
      Case Cn_Dest6
         If Not AE_CursorNext_SSSMAIN(PP_SSSMAIN.Tx) Then
' === 20110216 === UPDATE S TOM)Morimoto
'            If Not AE_CursorPrev_SSSMAIN(7) Then Call AE_CursorRestSub_SSSMAIN(Cn_CursorToRest)
            If Not AE_CursorPrev_SSSMAIN(PP_SSSMAIN.HeadN) Then Call AE_CursorRestSub_SSSMAIN(Cn_CursorToRest)
' === 20110216 === UPDATE E
         End If
      Case Cn_Dest7
         If Not AE_CursorPrev_SSSMAIN(PP_SSSMAIN.Tx) Then
            If Not AE_CursorNext_SSSMAIN(-1) Then Call AE_CursorRestSub_SSSMAIN(Cn_CursorToRest)
         End If
      Case Cn_DestBySkip
         Select Case PP_SSSMAIN.CursorDirection
            Case Cn_Direction0, Cn_Direction1
               If AE_CursorNext_SSSMAIN(PP_SSSMAIN.Tx) Then
                  PP_SSSMAIN.CursorDirection = Cn_Direction1
                  AE_CursorSkip_SSSMAIN = True
                  Exit Function
               Else
                  PP_SSSMAIN.CursorDirection = Cn_Direction2
                  If AE_CursorPrev_SSSMAIN(PP_SSSMAIN.Tx) Then
                     PP_SSSMAIN.CursorDirection = Cn_Direction2
                     AE_CursorSkip_SSSMAIN = True
                     Exit Function
                  Else
                     PP_SSSMAIN.CursorDirection = Cn_Direction1
                     AE_CursorSkip_SSSMAIN = False
                     Exit Function
                  End If
               End If
           Case Cn_Direction2
               If AE_CursorPrev_SSSMAIN(PP_SSSMAIN.Tx) Then
                  PP_SSSMAIN.CursorDirection = Cn_Direction2
                  AE_CursorSkip_SSSMAIN = True
                  Exit Function
               Else
                  PP_SSSMAIN.CursorDirection = Cn_Direction1
                  If AE_CursorNext_SSSMAIN(PP_SSSMAIN.Tx) Then
                     PP_SSSMAIN.CursorDirection = Cn_Direction1
                     AE_CursorSkip_SSSMAIN = True
                     Exit Function
                  Else
                     PP_SSSMAIN.CursorDirection = Cn_Direction2
                     AE_CursorSkip_SSSMAIN = False
                     Exit Function
                  End If
               End If
            Case Cn_Direction3
               If AE_CursorDown_SSSMAIN(PP_SSSMAIN.Tx) Then
                  PP_SSSMAIN.CursorDirection = Cn_Direction3
                  AE_CursorSkip_SSSMAIN = True
                  Exit Function
               Else
                  PP_SSSMAIN.CursorDirection = Cn_Direction4
                  If AE_CursorUp_SSSMAIN(PP_SSSMAIN.Tx) Then
                     PP_SSSMAIN.CursorDirection = Cn_Direction4
                     AE_CursorSkip_SSSMAIN = True
                     Exit Function
                  Else
                     PP_SSSMAIN.CursorDirection = Cn_Direction3
                     AE_CursorSkip_SSSMAIN = False
                     Exit Function
                  End If
               End If
            Case Cn_Direction4
               If AE_CursorUp_SSSMAIN(PP_SSSMAIN.Tx) Then
                  PP_SSSMAIN.CursorDirection = Cn_Direction4
                  AE_CursorSkip_SSSMAIN = True
                  Exit Function
               Else
                  PP_SSSMAIN.CursorDirection = Cn_Direction3
                  If AE_CursorDown_SSSMAIN(PP_SSSMAIN.Tx) Then
                     PP_SSSMAIN.CursorDirection = Cn_Direction3
                     AE_CursorSkip_SSSMAIN = True
                     Exit Function
                  Else
                     PP_SSSMAIN.CursorDirection = Cn_Direction4
                     AE_CursorSkip_SSSMAIN = False
                     Exit Function
                   End If
               End If
         End Select
      Case Else
         Select Case PP_SSSMAIN.CursorDirection
            Case Is <= Cn_Direction1
               wk_CursorDirection = PP_SSSMAIN.CursorDirection
               wk_Bool = AE_CursorNext_SSSMAIN(PP_SSSMAIN.Tx)
               If PP_SSSMAIN.CursorDest = Cn_Dest1 And wk_Bool = False Then wk_Bool = AE_CursorNext_SSSMAIN(-1)
               PP_SSSMAIN.CursorDirection = wk_CursorDirection
            Case Cn_Direction2
               wk_CursorDirection = PP_SSSMAIN.CursorDirection
               wk_Bool = AE_CursorPrev_SSSMAIN(PP_SSSMAIN.Tx)
               If PP_SSSMAIN.CursorDest = Cn_Dest0 And wk_Bool = False Then wk_Bool = AE_CursorNext_SSSMAIN(-1)
' === 20110216 === UPDATE S TOM)Morimoto
'               If PP_SSSMAIN.CursorDest = Cn_Dest1 And wk_Bool = False Then wk_Bool = AE_CursorPrev_SSSMAIN(7)
               If PP_SSSMAIN.CursorDest = Cn_Dest1 And wk_Bool = False Then wk_Bool = AE_CursorPrev_SSSMAIN(PP_SSSMAIN.HeadN)
' === 20110216 === UPDATE E
               PP_SSSMAIN.CursorDirection = wk_CursorDirection
            Case Cn_Direction3
               wk_Bool = AE_CursorDown_SSSMAIN(PP_SSSMAIN.Tx)
            Case Cn_Direction4
               wk_Bool = AE_CursorUp_SSSMAIN(PP_SSSMAIN.Tx)
            Case Else
               wk_Bool = False
         End Select
   End Select
   AE_CursorSkip_SSSMAIN = wk_Bool
   If wk_Bool Or PP_SSSMAIN.Tx < 0 Or (Cn_ai21 And PP_SSSMAIN.CursorDest = 0) Then
   ElseIf Not AE_Controls(PP_SSSMAIN.CtB + PP_SSSMAIN.Tx).TabStop Or Not AE_Controls(PP_SSSMAIN.CtB + PP_SSSMAIN.Tx).Enabled Or Not AE_Controls(PP_SSSMAIN.CtB + PP_SSSMAIN.Tx).Visible Then
      Call AE_CursorRestSub_SSSMAIN(Cn_CursorToRest)
      AE_CursorSkip_SSSMAIN = True
   End If
End Function

Sub AE_CursorSub_SSSMAIN(ByVal pm_CurSor As Integer) 'Generated.
Dim wk_Tx As Integer
   If pm_CurSor = Cn_CuInCompletePx Then
      If PP_SSSMAIN.InCompletePx = -1 Then Call AE_CursorCurrent_SSSMAIN: Exit Sub
      If CP_SSSMAIN(PP_SSSMAIN.InCompletePx).TypeA = Cn_OptionButtonH Or CP_SSSMAIN(PP_SSSMAIN.InCompletePx).TypeA = Cn_OptionButtonC Or CP_SSSMAIN(PP_SSSMAIN.InCompletePx).TypeA = Cn_CheckBox Then PP_SSSMAIN.CursorDirection = Cn_Direction2: wk_Bool = AE_CursorPrev_SSSMAIN(PP_SSSMAIN.Tx): Exit Sub
      wk_Tx = AE_Tx(PP_SSSMAIN, PP_SSSMAIN.InCompletePx)
      If wk_Tx >= 0 Then
         Call AE_CursorMove_SSSMAIN(wk_Tx)
      Else
         Call AE_CursorCurrent_SSSMAIN
      End If
   ElseIf pm_CurSor = Cn_CuCurrent Then
      If CP_SSSMAIN(PP_SSSMAIN.Px).TypeA = Cn_OptionButtonH Or CP_SSSMAIN(PP_SSSMAIN.Px).TypeA = Cn_OptionButtonC Or CP_SSSMAIN(PP_SSSMAIN.Px).TypeA = Cn_CheckBox Then PP_SSSMAIN.CursorDirection = Cn_Direction2: wk_Bool = AE_CursorPrev_SSSMAIN(PP_SSSMAIN.Tx): Exit Sub
      Call AE_CursorCurrent_SSSMAIN
   ElseIf pm_CurSor = Cn_CuInit Then
      Call AE_CursorInit_SSSMAIN
   ElseIf pm_CurSor = Cn_CuCursorRest Then
      Call AE_CursorRestSub_SSSMAIN(Cn_CursorToRest)
   ElseIf pm_CurSor = Cn_CuExTx Then
      Call AE_CursorMove_SSSMAIN(PP_SSSMAIN.ExTx)
   End If
End Sub

Function AE_CursorToError_SSSMAIN() As Boolean 'Generated.
Dim wk_Tx As Integer
Dim wk_TxRel As Integer
Dim wk_Px As Integer
   wk_TxRel = -1
   wk_Tx = 0
' === 20110216 === UPDATE S TOM)Morimoto
'   Do While wk_Tx < 7
   Do While wk_Tx < PP_SSSMAIN.HeadN
' === 20110216 === UPDATE E
      wk_Px = AE_Px(PP_SSSMAIN, wk_Tx)
      If CP_SSSMAIN(wk_Px).StatusC >= Cn_Status2 And CP_SSSMAIN(wk_Px).StatusC <= Cn_Status5 Then
         Select Case CP_SSSMAIN(wk_Px).TypeA
            Case Cn_NormalOrV, Cn_InputOnly
               If AE_IsWritableInOutMode(PP_SSSMAIN, CP_SSSMAIN(wk_Px)) And AE_IsEnable(CP_SSSMAIN(wk_Px).BlockNo, PP_SSSMAIN.ActiveBlockNo) Then
                  If CP_SSSMAIN(wk_Px).StatusC = Cn_Status2 Then
                     Call AE_CursorMove_SSSMAIN(wk_Tx)
                     AE_CursorToError_SSSMAIN = True
                     Exit Function
                  ElseIf wk_TxRel = -1 Then
                     wk_TxRel = wk_Tx
                  End If
               End If
         End Select
      End If
      wk_Tx = wk_Tx + 1
   Loop
   If wk_TxRel >= 0 Then
      Call AE_CursorMove_SSSMAIN(wk_TxRel)
      AE_CursorToError_SSSMAIN = True
   Else
      AE_CursorToError_SSSMAIN = False
   End If
End Function

Function AE_CursorUp_SSSMAIN(ByVal pm_Tx As Integer) As Boolean 'Generated.
Dim wk_Tx As Integer
Dim wk_LastTx As Integer
   wk_Tx = pm_Tx
   Do While wk_Tx >= 0
      wk_Tx = wk_Tx - 1
      If wk_Tx >= 0 Then
         If AE_CursorCheck_SSSMAIN(CP_SSSMAIN(AE_Px(PP_SSSMAIN, wk_Tx)).TypeA, wk_Tx) Then
            Call AE_CursorMove_SSSMAIN(wk_Tx)
            AE_CursorUp_SSSMAIN = True
            Exit Function
         End If
      End If
   Loop
   AE_CursorUp_SSSMAIN = False
End Function

Function AE_Current_SSSMAIN() As Integer 'Generated.
   Call AE_InitValAll_SSSMAIN
' === 20110217 === DELETE S TOM)Morimoto
'   PP_SSSMAIN.LastDe = SSSMAIN_Current()
' === 20110217 === DELETE E
   If PP_SSSMAIN.LastDe = 0 Then
      If Not AE_MsgLibrary(PP_SSSMAIN, "Current") Then
         Call AE_InitValAll_SSSMAIN
      Else
         Call AE_RecalcAll_SSSMAIN
      End If
   Else
      Call AE_RecalcAll_SSSMAIN
   End If
   Call AE_ClearInitValStatus_SSSMAIN
   AE_Current_SSSMAIN = Cn_CuInit
End Function

Sub AE_Derived_SSSMAIN_hd_ENDTOKNM(ByVal De_Index) 'Generated.
Dim CC_NewVal As Variant
Dim wk_SaveMask As Boolean
Dim wk_Infdex As Integer
' === 20110216 === UPDATE S TOM)Morimoto
'   CC_NewVal = ENDTOKNM_Derived(AE_NullCnv2_SSSMAIN(CP_SSSMAIN(6).CuVal), AE_NullCnv2_SSSMAIN(CP_SSSMAIN(5).CuVal), PP_SSSMAIN.De2)
   wk_Infdex = Get_Index("HD_ENDTOKNM", CQ_SSSMAIN)
   CC_NewVal = ENDTOKNM_Derived(AE_NullCnv2_SSSMAIN(CP_SSSMAIN(wk_Infdex).CuVal), AE_NullCnv2_SSSMAIN(CP_SSSMAIN(wk_Infdex - 1).CuVal), PP_SSSMAIN.De2)
' === 20110216 === UPDATE E
   If IsEmpty(CC_NewVal) Then Exit Sub
' === 20110216 === UPDATE S TOM)Morimoto
'   CP_SSSMAIN(6).CheckRtnCode = 0
'   CC_NewVal = AE_NormData(CP_SSSMAIN(6), CC_NewVal)
'   If CC_NewVal = CP_SSSMAIN(6).CuVal And CP_SSSMAIN(6).StatusC >= Cn_Status6 Then
'   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(6), CL_SSSMAIN(6))
'   ElseIf IsNull(CC_NewVal) And IsNull(CP_SSSMAIN(6).CuVal) And CP_SSSMAIN(6).StatusC >= Cn_Status6 Then
   CP_SSSMAIN(wk_Infdex).CheckRtnCode = 0
   CC_NewVal = AE_NormData(CP_SSSMAIN(wk_Infdex), CC_NewVal)
   If CC_NewVal = CP_SSSMAIN(wk_Infdex).CuVal And CP_SSSMAIN(wk_Infdex).StatusC >= Cn_Status6 Then
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(wk_Infdex), CL_SSSMAIN(wk_Infdex))
   ElseIf IsNull(CC_NewVal) And IsNull(CP_SSSMAIN(wk_Infdex).CuVal) And CP_SSSMAIN(wk_Infdex).StatusC >= Cn_Status6 Then
' === 20110216 === UPDATE E
   Else
      wk_SaveMask = PP_SSSMAIN.MaskMode
      PP_SSSMAIN.MaskMode = True
' === 20110216 === UPDATE S TOM)Morimoto
'         CP_SSSMAIN(6).CuVal = CC_NewVal
'         CP_SSSMAIN(6).TpStr = AE_Format$(CP_SSSMAIN(6), CP_SSSMAIN(6).CuVal, 0, True)
'         Call AE_CtSet(PP_SSSMAIN, 6, CP_SSSMAIN(6).TpStr, CP_SSSMAIN(6).TypeA, False)
         CP_SSSMAIN(wk_Infdex).CuVal = CC_NewVal
         CP_SSSMAIN(wk_Infdex).TpStr = AE_Format$(CP_SSSMAIN(wk_Infdex), CP_SSSMAIN(wk_Infdex).CuVal, 0, True)
         Call AE_CtSet(PP_SSSMAIN, wk_Infdex, CP_SSSMAIN(wk_Infdex).TpStr, CP_SSSMAIN(wk_Infdex).TypeA, False)
' === 20110216 === UPDATE E
      PP_SSSMAIN.MaskMode = wk_SaveMask
' === 20110216 === UPDATE S TOM)Morimoto
'      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(6))
'      If CP_SSSMAIN(6).StatusC = Cn_StatusError Then
'         CP_SSSMAIN(6).StatusC = Cn_Status2
'         CP_SSSMAIN(6).StatusF = Cn_Status2
'         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(6), CL_SSSMAIN(6))
'      ElseIf CP_SSSMAIN(6).StatusC <> Cn_Status6 Then
'         CP_SSSMAIN(6).StatusC = Cn_Status7
'         CP_SSSMAIN(6).StatusF = Cn_Status7
'         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(6), CL_SSSMAIN(6))
      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(wk_Infdex))
      If CP_SSSMAIN(wk_Infdex).StatusC = Cn_StatusError Then
         CP_SSSMAIN(wk_Infdex).StatusC = Cn_Status2
         CP_SSSMAIN(wk_Infdex).StatusF = Cn_Status2
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(wk_Infdex), CL_SSSMAIN(wk_Infdex))
      ElseIf CP_SSSMAIN(wk_Infdex).StatusC <> Cn_Status6 Then
         CP_SSSMAIN(wk_Infdex).StatusC = Cn_Status7
         CP_SSSMAIN(wk_Infdex).StatusF = Cn_Status7
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(wk_Infdex), CL_SSSMAIN(wk_Infdex))
' === 20110216 === UPDATE E
      Else
' === 20110216 === UPDATE S TOM)Morimoto
'         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(6), CL_SSSMAIN(6))
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(wk_Infdex), CL_SSSMAIN(wk_Infdex))
' === 20110216 === UPDATE E
      End If
   End If
End Sub

Sub AE_Derived_SSSMAIN_hd_STTTOKNM(ByVal De_Index) 'Generated.
Dim CC_NewVal As Variant
Dim wk_SaveMask As Boolean
Dim Wk_Index As Integer
' === 20110216 === UPDATE S TOM)Morimoto
'   CC_NewVal = STTTOKNM_Derived(AE_NullCnv2_SSSMAIN(CP_SSSMAIN(4).CuVal), AE_NullCnv2_SSSMAIN(CP_SSSMAIN(3).CuVal), PP_SSSMAIN.De2)
    Wk_Index = Get_Index("HD_STTTOKNM", CQ_SSSMAIN)
   CC_NewVal = STTTOKNM_Derived(AE_NullCnv2_SSSMAIN(CP_SSSMAIN(Wk_Index).CuVal), AE_NullCnv2_SSSMAIN(CP_SSSMAIN(Wk_Index - 1).CuVal), PP_SSSMAIN.De2)
' === 20110216 === UPDATE E
   If IsEmpty(CC_NewVal) Then Exit Sub
' === 20110216 === UPDATE S TOM)Morimoto
'   CP_SSSMAIN(4).CheckRtnCode = 0
'   CC_NewVal = AE_NormData(CP_SSSMAIN(4), CC_NewVal)
'   If CC_NewVal = CP_SSSMAIN(4).CuVal And CP_SSSMAIN(4).StatusC >= Cn_Status6 Then
'   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(4), CL_SSSMAIN(4))
'   ElseIf IsNull(CC_NewVal) And IsNull(CP_SSSMAIN(4).CuVal) And CP_SSSMAIN(4).StatusC >= Cn_Status6 Then
   CP_SSSMAIN(Wk_Index).CheckRtnCode = 0
   CC_NewVal = AE_NormData(CP_SSSMAIN(Wk_Index), CC_NewVal)
   If CC_NewVal = CP_SSSMAIN(Wk_Index).CuVal And CP_SSSMAIN(Wk_Index).StatusC >= Cn_Status6 Then
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(Wk_Index), CL_SSSMAIN(Wk_Index))
   ElseIf IsNull(CC_NewVal) And IsNull(CP_SSSMAIN(Wk_Index).CuVal) And CP_SSSMAIN(Wk_Index).StatusC >= Cn_Status6 Then
' === 20110216 === UPDATE E
   Else
      wk_SaveMask = PP_SSSMAIN.MaskMode
      PP_SSSMAIN.MaskMode = True
' === 20110216 === UPDATE S TOM)Morimoto
'         CP_SSSMAIN(4).CuVal = CC_NewVal
'         CP_SSSMAIN(4).TpStr = AE_Format$(CP_SSSMAIN(4), CP_SSSMAIN(4).CuVal, 0, True)
'         Call AE_CtSet(PP_SSSMAIN, 4, CP_SSSMAIN(4).TpStr, CP_SSSMAIN(4).TypeA, False)
         CP_SSSMAIN(Wk_Index).CuVal = CC_NewVal
         CP_SSSMAIN(Wk_Index).TpStr = AE_Format$(CP_SSSMAIN(Wk_Index), CP_SSSMAIN(Wk_Index).CuVal, 0, True)
         Call AE_CtSet(PP_SSSMAIN, Wk_Index, CP_SSSMAIN(Wk_Index).TpStr, CP_SSSMAIN(Wk_Index).TypeA, False)
' === 20110216 === UPDATE E
      PP_SSSMAIN.MaskMode = wk_SaveMask
' === 20110216 === UPDATE S TOM)Morimoto
'      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(4))
'      If CP_SSSMAIN(4).StatusC = Cn_StatusError Then
'         CP_SSSMAIN(4).StatusC = Cn_Status2
'         CP_SSSMAIN(4).StatusF = Cn_Status2
'         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(4), CL_SSSMAIN(4))
'      ElseIf CP_SSSMAIN(4).StatusC <> Cn_Status6 Then
'         CP_SSSMAIN(4).StatusC = Cn_Status7
'         CP_SSSMAIN(4).StatusF = Cn_Status7
'         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(4), CL_SSSMAIN(4))
      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(Wk_Index))
      If CP_SSSMAIN(Wk_Index).StatusC = Cn_StatusError Then
         CP_SSSMAIN(Wk_Index).StatusC = Cn_Status2
         CP_SSSMAIN(Wk_Index).StatusF = Cn_Status2
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(Wk_Index), CL_SSSMAIN(Wk_Index))
      ElseIf CP_SSSMAIN(Wk_Index).StatusC <> Cn_Status6 Then
         CP_SSSMAIN(Wk_Index).StatusC = Cn_Status7
         CP_SSSMAIN(Wk_Index).StatusF = Cn_Status7
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(Wk_Index), CL_SSSMAIN(Wk_Index))
' === 20110216 === UPDATE E
      Else
' === 20110216 === UPDATE S TOM)Morimoto
'         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(4), CL_SSSMAIN(4))
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(Wk_Index), CL_SSSMAIN(Wk_Index))
' === 20110216 === UPDATE E
      End If
   End If
End Sub

Sub AE_EndCm_SSSMAIN() 'Generated.
   If PP_SSSMAIN.CloseCode = 29 Or (PP_SSSMAIN.CloseCode = 2 And PP_SSSMAIN.UnloadMode = 3) Then
   ElseIf PP_SSSMAIN.InitValStatus <> PP_SSSMAIN.Mode Then
      If AE_MsgLibrary(PP_SSSMAIN, "EndCk") Then Exit Sub
   Else
      If AE_MsgLibrary(PP_SSSMAIN, "EndCm") Then Exit Sub
   End If
' === 20110217 === DELETE S TOM)Morimoto
'   wk_Var = SSSMAIN_Close()
' === 20110217 === DELETE E
   If wk_Var = -1 Then
      wk_Int = CspPurgeFilterReq(FR_SSSMAIN.hwnd)
      Call AE_WindowProcReset(PP_SSSMAIN)
      ReleaseTabCapture FR_SSSMAIN.hwnd
      If PP_SSSMAIN.hIMC <> 0 Then
         Call ImmReleaseContext(PP_SSSMAIN.hIMCHwnd, PP_SSSMAIN.hIMC)
      End If
#If ActiveXcompile = 0 Then
      End
#End If
   ElseIf wk_Var = 1 Then
      wk_Int = CspPurgeFilterReq(FR_SSSMAIN.hwnd)
      Call AE_WindowProcReset(PP_SSSMAIN)
      ReleaseTabCapture FR_SSSMAIN.hwnd
      If PP_SSSMAIN.hIMC <> 0 Then
         Call ImmReleaseContext(PP_SSSMAIN.hIMCHwnd, PP_SSSMAIN.hIMC)
      End If
      FR_SSSMAIN.Hide
   End If
   PP_SSSMAIN.CloseCode = -1
End Sub

' === 20110217 === DELETE S TOM)Morimoto
'Function AE_Execute_SSSMAIN() As Integer 'Generated.
'Dim wk_ReturnCd As Integer
'Dim wk_De As Integer
'   With PP_SSSMAIN
'   If CP_SSSMAIN(.Px).StatusC = Cn_Status1 Then
'      Call AE_SetCheck_SSSMAIN(AE_Val2(CP_SSSMAIN(.Px)), Cn_Status6, True)
'   End If
'   If .Mode = Cn_Mode3 Then
'      Exit Function
'   End If
'   If AE_CompleteCheck_SSSMAIN(False) > 0 Then AE_Execute_SSSMAIN = Cn_CuInCompletePx: Exit Function
'   If .Mode = Cn_Mode1 Then
'      If AE_MsgLibrary(PP_SSSMAIN, "Append") Then AE_Execute_SSSMAIN = Cn_CuCurrent: Exit Function
'
'      wk_ReturnCd = SSSMAIN_Append()
'      .ServerCheck = 1000
'      If wk_ReturnCd >= .ServerCheck And wk_ReturnCd <= .ServerCheck + 5 Then
'         wk_ReturnCd = wk_ReturnCd - .ServerCheck
'      Else
'         .ServerCheck = False
'      End If
'      AE_Execute_SSSMAIN = Cn_CuInit
'      If wk_ReturnCd = 0 Then Exit Function
'      Call AE_Term_SSSMAIN
'      If wk_ReturnCd = 1 Then
'         AE_Execute_SSSMAIN = AE_SelectCm_SSSMAIN(Cn_Mode1, True)
'      ElseIf wk_ReturnCd = 2 Then
'         Call AE_ClearInitValStatus_SSSMAIN
'         AE_Execute_SSSMAIN = AE_Indicate_SSSMAIN(Cn_Mode1, .ServerCheck)
'      ElseIf wk_ReturnCd = 3 Then
'         Call AE_ClearInitValStatus_SSSMAIN
'         AE_Execute_SSSMAIN = AE_Indicate_SSSMAIN(Cn_Mode1, .ServerCheck)
'      ElseIf wk_ReturnCd = 4 Then
'         AE_Execute_SSSMAIN = AE_UpdateC_SSSMAIN(Cn_Mode1, .ServerCheck)
'      Else
'         Call AE_ClearInitValStatus_SSSMAIN
'         Call AE_InitValAll_SSSMAIN
'         AE_Execute_SSSMAIN = Cn_CuInit
'      End If
'      .ExMessage = (AE_StatusBar(.ScX))
'   ElseIf .Mode = Cn_Mode2 Then
'      If AE_MsgLibrary(PP_SSSMAIN, "SelectE") Then AE_Execute_SSSMAIN = Cn_CuCurrent: Exit Function
'      AE_Execute_SSSMAIN = AE_Indicate_SSSMAIN(Cn_Mode2, False)
'      Exit Function
'   ElseIf .Mode = Cn_Mode4 Then
'      If .InitValStatus <> .Mode Then
'         If AE_MsgLibrary(PP_SSSMAIN, "Update") Then AE_Execute_SSSMAIN = Cn_CuCurrent: Exit Function
'      Else
'         If AE_MsgLibrary(PP_SSSMAIN, "Update2") Then AE_Execute_SSSMAIN = Cn_CuCurrent: Exit Function
'      End If
'      wk_ReturnCd = SSSMAIN_Update()
'      .ServerCheck = 1000
'      If wk_ReturnCd >= .ServerCheck And wk_ReturnCd <= .ServerCheck + 5 Then
'         wk_ReturnCd = wk_ReturnCd - .ServerCheck
'      Else
'         .ServerCheck = False
'      End If
'      AE_Execute_SSSMAIN = Cn_CuInit
'      If wk_ReturnCd = 0 Then Exit Function
'      Call AE_Term_SSSMAIN
'      If wk_ReturnCd = 1 Then
'         Call AE_ClearInitValStatus_SSSMAIN
'         AE_Execute_SSSMAIN = AE_SelectCm_SSSMAIN(Cn_Mode4, True)
'      ElseIf wk_ReturnCd = 2 Then
'         Call AE_ClearInitValStatus_SSSMAIN
'         AE_Execute_SSSMAIN = AE_Indicate_SSSMAIN(Cn_Mode4, .ServerCheck)
'      ElseIf wk_ReturnCd = 3 Then
'         Call AE_ClearInitValStatus_SSSMAIN
'         AE_Execute_SSSMAIN = AE_Indicate_SSSMAIN(Cn_Mode4, .ServerCheck)
'      ElseIf wk_ReturnCd = 4 Then
'         If .ServerCheck = False Then AE_Execute_SSSMAIN = AE_NextCm_SSSMAIN(True)
'      ElseIf wk_ReturnCd = 104 Then
'         If .ServerCheck = False Then AE_Execute_SSSMAIN = AE_Current_SSSMAIN()
'      Else
'         Call AE_ClearInitValStatus_SSSMAIN
'         AE_Execute_SSSMAIN = AE_AppendC_SSSMAIN(Cn_Mode4)
'      End If
'      .ExMessage = (AE_StatusBar(.ScX))
'   End If
'   End With
'End Function
' === 20110217 === DELETE E

Function AE_ExecuteX_SSSMAIN() As Integer 'Generated.
Dim wk_Cursor As Integer
   AE_ExecuteX_SSSMAIN = Cn_CuCurrent
   If PP_SSSMAIN.Executing = False Then
      PP_SSSMAIN.Executing = True
' === 20110216 === UPDATE S TOM)Morimoto
'      wk_Cursor = AE_Execute_SSSMAIN()
'      AE_ExecuteX_SSSMAIN = wk_Cursor
    AE_Execute CP_SSSMAIN(Get_Index("HD_THSCD", CQ_SSSMAIN)).CuVal, CP_SSSMAIN(Get_Index("HD_FRNKB", CQ_SSSMAIN)).CuVal, AE_NullCnv2_SSSMAIN(CP_SSSMAIN(Get_Index("HD_STTTOKCD", CQ_SSSMAIN)).CuVal), AE_NullCnv2_SSSMAIN(CP_SSSMAIN(Get_Index("HD_ENDTOKCD", CQ_SSSMAIN)).CuVal)
' === 20110216 === UPDATE E
      PP_SSSMAIN.Executing = False
   End If
End Function

Static Function AE_FuncKey_SSSMAIN(ByVal pm_KeyCode As Integer, ByVal pm_Shift As Integer) As Integer 'Generated.
Dim wk_Cursor As Integer
   AE_FuncKey_SSSMAIN = True
   If Not PP_SSSMAIN.Operable Then Exit Function
   wk_Cursor = Cn_CuCurrent
   If False Then
   ElseIf pm_KeyCode = vbKeyF1 And pm_Shift = 0 Then
      SendKeys "%1"
   ElseIf pm_KeyCode = vbKeyF2 And pm_Shift = 0 Then
      SendKeys "%2"
   ElseIf pm_KeyCode = vbKeyF3 And pm_Shift = 0 Then
      SendKeys "%3"
   End If
End Function

Function AE_Indicate_SSSMAIN(ByVal pm_ExMode As Integer, ByVal pm_NextRec As Integer) As Integer 'Generated.
   If PP_SSSMAIN.Mode <> Cn_Mode2 And PP_SSSMAIN.InitValStatus <> PP_SSSMAIN.Mode And pm_NextRec <> 1000 Then
      If PP_SSSMAIN.ChOprtMode = 0 Then
         If AE_MsgLibrary(PP_SSSMAIN, "Indicate") Then AE_Indicate_SSSMAIN = Cn_CuCurrent: Exit Function
      End If
   End If
   PP_SSSMAIN.ChOprtMode = Cn_Mode3
   Call AE_ModeChange_SSSMAIN(PP_SSSMAIN.ChOprtMode)
   If PP_SSSMAIN.Mode = PP_SSSMAIN.ChOprtMode Then
      If pm_NextRec = 1000 Then
         Call AE_RecalcAll_SSSMAIN
      ElseIf pm_NextRec = -1 Then
         wk_Int = AE_NextCm_SSSMAIN(False)
      ElseIf pm_NextRec = 0 Then
         wk_Int = AE_Current_SSSMAIN()
      End If
      Call AE_ClearInitValStatus_SSSMAIN
      AE_Indicate_SSSMAIN = Cn_CuInit
   Else
      Call AE_ModeChange_SSSMAIN(pm_ExMode)
      AE_Indicate_SSSMAIN = Cn_CuCurrent
   End If
   PP_SSSMAIN.ChOprtMode = 0
End Function

Sub AE_InitValAll_SSSMAIN() 'Generated.
Dim wk_Px As Integer
Dim wk_De As Integer
Dim wk_InOutMode As Long
   wk_Px = 0
' === 20110216 === UPDATE S TOM)Morimoto
'   Do While wk_Px < 7
   Do While wk_Px < PP_SSSMAIN.HeadN
' === 20110216 === UPDATE E
      wk_InOutMode = (CP_SSSMAIN(wk_Px).InOutMode \ 256) And &HFF
      CP_SSSMAIN(wk_Px).InOutMode = wk_InOutMode * 256 + wk_InOutMode
      wk_Px = wk_Px + 1
   Loop
   PP_SSSMAIN.MaskMode = True
      Call AE_InitValHd_SSSMAIN(-2, False, Cn_Status0)
   PP_SSSMAIN.MaskMode = False
   Call AE_ClearInitValStatus_SSSMAIN
   Call AE_StatusClear(PP_SSSMAIN, Cn_ClErrorStatus)
' === 20110217 === DELETE S TOM)Morimoto
'   wk_Var = SSSMAIN_Init()
' === 20110217 === DELETE E
   wk_Px = 0
' === 20110216 === UPDATE S TOM)Morimoto
'   Do While wk_Px < 7
   Do While wk_Px < PP_SSSMAIN.HeadN
' === 20110216 === UPDATE E
      CP_SSSMAIN(wk_Px).IniStr = CP_SSSMAIN(wk_Px).TpStr
      wk_Px = wk_Px + 1
   Loop
End Sub

Sub AE_InitValBd_SSSMAIN() 'Generated.
Dim wk_Px As Integer
Dim wk_InOutMode As Long
Dim wk_De As Integer
' === 20110216 === UPDATE S TOM)Morimoto
'   wk_Px = 7
'   Do While wk_Px < 7
   wk_Px = PP_SSSMAIN.HeadN
   Do While wk_Px < PP_SSSMAIN.HeadN
' === 20110216 === UPDATE E
      wk_InOutMode = (CP_SSSMAIN(wk_Px).InOutMode \ 256) And &HFF
      CP_SSSMAIN(wk_Px).InOutMode = wk_InOutMode * 256 + wk_InOutMode
      wk_Px = wk_Px + 1
   Loop
   PP_SSSMAIN.UnDoDeOp = 0
   PP_SSSMAIN.ActiveDe = -1
   PP_SSSMAIN.InitValStatus = Cn_ModeDataChanged
End Sub

Sub AE_InitValEd_SSSMAIN() 'Generated.
Dim wk_Px As Integer
Dim wk_InOutMode As Long
Dim wk_De As Integer
' === 20110216 === UPDATE S TOM)Morimoto
'   wk_Px = 7
'   Do While wk_Px < 7
   wk_Px = PP_SSSMAIN.HeadN
   Do While wk_Px < PP_SSSMAIN.HeadN
' === 20110216 === UPDATE E
      wk_InOutMode = (CP_SSSMAIN(wk_Px).InOutMode \ 256) And &HFF
      CP_SSSMAIN(wk_Px).InOutMode = wk_InOutMode * 256 + wk_InOutMode
      wk_Px = wk_Px + 1
   Loop
   PP_SSSMAIN.UnDoEDeOp = 0
   PP_SSSMAIN.ActiveEDe = -1
   PP_SSSMAIN.InitValStatus = Cn_ModeDataChanged
End Sub

Sub AE_InitValHd_SSSMAIN(ByVal pm_Px As Integer, ByVal pm_SetInOut As Integer, ByVal pm_Status As Integer) 'Generated.
Dim wk_Tx As Integer
Dim RC_ErrorC As Integer
Dim wk_ww As Integer
Dim strName As String
Dim Wk_Index As Integer
   If pm_Px = -2 Then
' === 20110216 === UPDATE S TOM)Morimoto
'      Call AE_TabStop_SSSMAIN(0, 6, pm_SetInOut)
      Call AE_TabStop_SSSMAIN(0, PP_SSSMAIN.HeadN - 1, pm_SetInOut)
' === 20110216 === UPDATE E
   ElseIf pm_Px >= 0 Then
      wk_Tx = AE_Tx(PP_SSSMAIN, pm_Px)
      If wk_Tx >= 0 Then Call AE_TabStop_SSSMAIN(wk_Tx, wk_Tx, pm_SetInOut)
   End If
   If pm_Px = -2 Or pm_Px = 0 Then 'OPEID
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(0), OPEID_InitVal(AE_NullCnv2_SSSMAIN(CP_SSSMAIN(0).CuVal), PP_SSSMAIN, CP_SSSMAIN(0)), pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 1 Then 'OPENM
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(1), OPENM_InitVal(AE_NullCnv2_SSSMAIN(CP_SSSMAIN(1).CuVal), PP_SSSMAIN, CP_SSSMAIN(1)), pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 2 Then 'THSCD
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(2), THSCD_InitVal(), pm_Status)
   End If
' === 20110216 === INSERT S TOM)Morimoto
    If pm_Px >= 0 Then
        strName = CQ_SSSMAIN(pm_Px)
    End If
   If pm_Px = -2 Or strName = "HD_FRNKB" Then 'STTTOKCD
        Wk_Index = Get_Index("HD_FRNKB", CQ_SSSMAIN)
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(Wk_Index), FRNKB_InitVal(), pm_Status)
   End If
' === 20110216 === INSERT E
' === 20110216 === UPDATE S TOM)Morimoto
'   If pm_Px = -2 Or pm_Px = 3 Then 'STTTOKCD
'      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(3), STTTOKCD_InitVal(AE_NullCnv2_SSSMAIN(CP_SSSMAIN(3).CuVal)), pm_Status)
   If pm_Px = -2 Or strName = "HD_STTTOKCD" Then 'STTTOKCD
        Wk_Index = Get_Index("HD_STTTOKCD", CQ_SSSMAIN)
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(Wk_Index), STTTOKCD_InitVal(AE_NullCnv2_SSSMAIN(CP_SSSMAIN(Wk_Index).CuVal)), pm_Status)
' === 20110216 === UPDATE E
      Call AE_InitValHd_SSSMAIN_STTTOKCD(pm_Px)
   End If
' === 20110216 === UPDATE S TOM)Morimoto
'   If pm_Px = -2 Or pm_Px = 4 Then 'STTTOKNM
'      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(4), STTTOKNM_InitVal(AE_NullCnv2_SSSMAIN(CP_SSSMAIN(4).CuVal), AE_NullCnv2_SSSMAIN(CP_SSSMAIN(3).CuVal), PP_SSSMAIN.De2), pm_Status)
   If pm_Px = -2 Or strName = "HD_STTTOKNM" Then 'STTTOKNM
        Wk_Index = Get_Index("HD_STTTOKNM", CQ_SSSMAIN)
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(Wk_Index), STTTOKNM_InitVal(AE_NullCnv2_SSSMAIN(CP_SSSMAIN(Wk_Index).CuVal), AE_NullCnv2_SSSMAIN(CP_SSSMAIN(3).CuVal), PP_SSSMAIN.De2), pm_Status)
' === 20110216 === UPDATE E
   End If
' === 20110216 === UPDATE S TOM)Morimoto
'   If pm_Px = -2 Or pm_Px = 5 Then 'ENDTOKCD
'      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(5), ENDTOKCD_InitVal(AE_NullCnv2_SSSMAIN(CP_SSSMAIN(5).CuVal)), pm_Status)
   If pm_Px = -2 Or strName = "HD_ENDTOKCD" Then 'ENDTOKCD
        Wk_Index = Get_Index("HD_ENDTOKCD", CQ_SSSMAIN)
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(Wk_Index), ENDTOKCD_InitVal(AE_NullCnv2_SSSMAIN(CP_SSSMAIN(Wk_Index).CuVal)), pm_Status)
' === 20110216 === UPDATE E
      Call AE_InitValHd_SSSMAIN_ENDTOKCD(pm_Px)
   End If
' === 20110216 === UPDATE S TOM)Morimoto
'   If pm_Px = -2 Or pm_Px = 6 Then 'ENDTOKNM
'      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(6), ENDTOKNM_InitVal(AE_NullCnv2_SSSMAIN(CP_SSSMAIN(6).CuVal), AE_NullCnv2_SSSMAIN(CP_SSSMAIN(5).CuVal), PP_SSSMAIN.De2), pm_Status)
   If pm_Px = -2 Or strName = "HD_ENDTOKNM" Then 'ENDTOKNM
        Wk_Index = Get_Index("HD_ENDTOKNM", CQ_SSSMAIN)
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(Wk_Index), ENDTOKNM_InitVal(AE_NullCnv2_SSSMAIN(CP_SSSMAIN(Wk_Index).CuVal), AE_NullCnv2_SSSMAIN(CP_SSSMAIN(5).CuVal), PP_SSSMAIN.De2), pm_Status)
' === 20110216 === UPDATE E
   End If
   If pm_Px = -2 Then
      PP_SSSMAIN.DerivedFrom = "(InitVal)"
      PP_SSSMAIN.DerivedOrigin = ""
      Call AE_RecalcHdSub_SSSMAIN
   End If
End Sub

Sub AE_InitValHd_SSSMAIN_STTTOKCD(ByVal pm_Px As Integer) 'Generated.
Dim CC_NewVal As Variant
' === 20110216 === UPDATE S TOM)Morimoto
'   CC_NewVal = CP_SSSMAIN(6).CuVal
   CC_NewVal = CP_SSSMAIN(Get_Index("HD_ENDTOKNM", CQ_SSSMAIN)).CuVal
' === 20110216 === UPDATE E
   PP_SSSMAIN.DerivedOrigin = "HD_STTTOKCD"
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_hd_STTTOKNM(PP_SSSMAIN.De2)
End Sub

Sub AE_InitValHd_SSSMAIN_ENDTOKCD(ByVal pm_Px As Integer) 'Generated.
Dim CC_NewVal As Variant
' === 20110216 === UPDATE S TOM)Morimoto
'   CC_NewVal = CP_SSSMAIN(6).CuVal
   CC_NewVal = CP_SSSMAIN(Get_Index("HD_ENDTOKNM", CQ_SSSMAIN)).CuVal
' === 20110216 === UPDATE E
   PP_SSSMAIN.DerivedOrigin = "HD_ENDTOKCD"
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_hd_ENDTOKNM(PP_SSSMAIN.De2)
End Sub

Sub AE_InitVal_SSSMAIN(CP As clsCP, ByVal pm_Value, ByVal pm_Status As Integer) 'Generated.
Dim wk_Tx As Integer
   Call AE_InitValSubNorm(CP, pm_Value, pm_Status)
   wk_Tx = AE_Tx(PP_SSSMAIN, CP.CpPx)
   If wk_Tx >= 0 Then
      Call AE_CtSet(PP_SSSMAIN, CP.CpPx, CP.TpStr, CP.TypeA, False)
      Call AE_ColorSub2(PP_SSSMAIN, CP, CL_SSSMAIN(CP.CpPx), wk_Tx)
   End If
End Sub

Static Sub AE_InOutModeM_SSSMAIN(ByVal pm_ItemName$, ByVal pm_Mode$) 'Generated.
Dim wk_Qx As Integer
Dim wk_Tx As Integer
Dim wk_BodyV As Integer
Dim wk_Px1 As Integer
Dim wk_Px2 As Integer
Dim wk_UCaseObjA$
   wk_UCaseObjA$ = UCase$(pm_ItemName$)
   wk_Qx = 0
' === 20110216 === UPDATE S TOM)Morimoto
'   Do While wk_Qx < 7 And UCase$(Mid$(CQ_SSSMAIN(wk_Qx), Cn_AfterPrfx)) <> wk_UCaseObjA$
   Do While wk_Qx < PP_SSSMAIN.HeadN And UCase$(Mid$(CQ_SSSMAIN(wk_Qx), Cn_AfterPrfx)) <> wk_UCaseObjA$
' === 20110216 === UPDATE E
       wk_Qx = wk_Qx + 1
   Loop
   If UCase$(Mid$(CQ_SSSMAIN(wk_Qx), Cn_AfterPrfx)) <> wk_UCaseObjA$ Then
      Call AE_SystemError("AE_InOutModeM のパラメタ pm_ItemName$ に", 550)
      Exit Sub
   End If
   If Len(pm_Mode$) <> 4 Then
      Call AE_SystemError("AE_InOutModeM のパラメタ pm_Mode$ に", 551)
      Exit Sub
   End If
   wk_BodyV = 1
' === 20110216 === UPDATE S TOM)Morimoto
'   If wk_Qx < 7 Then
   If wk_Qx < PP_SSSMAIN.HeadN Then
' === 20110216 === UPDATE E
      wk_Px1 = wk_Qx
      wk_Px2 = wk_Px1 + 1
   End If
   Do While wk_Px1 < wk_Px2
      CP_SSSMAIN(wk_Px1).InOutMode = (CP_SSSMAIN(wk_Px1).InOutMode \ 256) * 256 + CLng(Mid$(pm_Mode$, 1, 1)) * 64 + CLng(Mid$(pm_Mode$, 2, 1)) * 16 + CLng(Mid$(pm_Mode$, 3, 1)) * 4 + CLng(Mid$(pm_Mode$, 4, 1))
      wk_Tx = AE_Tx(PP_SSSMAIN, wk_Px1)
      If wk_Tx >= 0 Then
         If CP_SSSMAIN(wk_Px1).TypeA = Cn_OutputOnly Then
         ElseIf CP_SSSMAIN(wk_Px1).TypeA = Cn_OptionButtonH Or CP_SSSMAIN(wk_Px1).TypeA = Cn_OptionButtonC Or CP_SSSMAIN(wk_Px1).TypeA = Cn_CheckBox Then
            AE_Controls(PP_SSSMAIN.CtB + wk_Tx).Enabled = (AE_GetInOutMode(CP_SSSMAIN(wk_Px1).InOutMode, PP_SSSMAIN.Mode) >= Cn_InOutMode2)
         Else
            AE_Controls(PP_SSSMAIN.CtB + wk_Tx).TabStop = (AE_GetInOutMode(CP_SSSMAIN(wk_Px1).InOutMode, PP_SSSMAIN.Mode) >= Cn_InOutMode2) And (AE_IsEnable(CP_SSSMAIN(wk_Px1).BlockNo, PP_SSSMAIN.ActiveBlockNo))
         End If
      End If
      wk_Px1 = wk_Px1 + wk_BodyV
   Loop
End Sub

Static Sub AE_InOutModeN_SSSMAIN(ByVal pm_ItemName$, ByVal pm_Mode$, Optional ByVal pm_De) 'Generated.
Dim wk_Qx As Integer
Dim wk_Tx As Integer
Dim wk_Px As Integer
Dim wk_UCaseObjA$
   wk_UCaseObjA$ = UCase$(pm_ItemName$)
   wk_Qx = 0
' === 20110216 === UPDATE S TOM)Morimoto
'   Do While wk_Qx < 7 And Mid$(CQ_SSSMAIN(wk_Qx), Cn_AfterPrfx) <> wk_UCaseObjA$
   Do While wk_Qx < PP_SSSMAIN.HeadN And Mid$(CQ_SSSMAIN(wk_Qx), Cn_AfterPrfx) <> wk_UCaseObjA$
' === 20110216 === UPDATE E
       wk_Qx = wk_Qx + 1
   Loop
   If UCase$(Mid$(CQ_SSSMAIN(wk_Qx), Cn_AfterPrfx)) <> wk_UCaseObjA$ Then
      Call AE_SystemError("AE_InOutModeN のパラメタ pm_ItemName$ に", 552)
      Exit Sub
   End If
   If Len(pm_Mode$) <> 4 Then
      Call AE_SystemError("AE_InOutModeN のパラメタ pm_Mode$ に", 553)
      Exit Sub
   End If
   If Not IsMissing(pm_De) Then
      If pm_De < 0 Or pm_De > -1 Then
         Call AE_SystemError("AE_InOutModeN のパラメタ pm_De に", 554)
         Exit Sub
      End If
   End If
' === 20110216 === UPDATE S TOM)Morimoto
'   If wk_Qx < 7 Then
   If wk_Qx < PP_SSSMAIN.HeadN Then
' === 20110216 === UPDATE E
      wk_Px = wk_Qx
   End If
   CP_SSSMAIN(wk_Px).InOutMode = (CP_SSSMAIN(wk_Px).InOutMode \ 256) * 256 + CLng(Mid$(pm_Mode$, 1, 1)) * 64 + CLng(Mid$(pm_Mode$, 2, 1)) * 16 + CLng(Mid$(pm_Mode$, 3, 1)) * 4 + CLng(Mid$(pm_Mode$, 4, 1))
   wk_Tx = AE_Tx(PP_SSSMAIN, wk_Px)
   If wk_Tx >= 0 Then
      If CP_SSSMAIN(wk_Px).TypeA = Cn_OutputOnly Then
      ElseIf CP_SSSMAIN(wk_Px).TypeA = Cn_OptionButtonH Or CP_SSSMAIN(wk_Px).TypeA = Cn_OptionButtonC Or CP_SSSMAIN(wk_Px).TypeA = Cn_CheckBox Then
         AE_Controls(PP_SSSMAIN.CtB + wk_Tx).Enabled = (AE_GetInOutMode(CP_SSSMAIN(wk_Px).InOutMode, PP_SSSMAIN.Mode) >= Cn_InOutMode2)
      Else
         AE_Controls(PP_SSSMAIN.CtB + wk_Tx).TabStop = (AE_GetInOutMode(CP_SSSMAIN(wk_Px).InOutMode, PP_SSSMAIN.Mode) >= Cn_InOutMode2) And (AE_IsEnable(CP_SSSMAIN(wk_Px).BlockNo, PP_SSSMAIN.ActiveBlockNo))
      End If
   End If
End Sub

Function AE_IsNull_SSSMAIN(ByVal Valu) As Boolean 'Generated.
   If IsNull(Valu) Then
       AE_IsNull_SSSMAIN = True
   ElseIf Trim$(Valu) = "" Then
       AE_IsNull_SSSMAIN = True
   Else
       AE_IsNull_SSSMAIN = False
   End If
End Function

Static Function AE_KeyDown_SSSMAIN(Ct As Control, ByRef pm_KeyCode As Integer, ByVal pm_Shift As Integer, ByRef pm_TA$) As Integer 'Generated.
Dim wk_TopDe As Integer
   PP_SSSMAIN.KeyDownMode = PP_SSSMAIN.Mode
Dim wk_Tx As Integer
Dim wk_Px As Integer
Dim wk_Txt$
Dim wk_SS As Long
Dim wk_SS2 As Long
Dim wk_Moji$
Dim wk_Ln As Integer
Dim wk_Ln2 As Long
Dim wk_DeC As Integer
Dim wk_FractionC As Integer
   If TypeOf Ct Is TextBox Then
      Ct.Locked = False
   End If
   wk_Txt$ = Ct
   wk_Tx = PP_SSSMAIN.Tx
   wk_Px = PP_SSSMAIN.Px
   PP_SSSMAIN.EditText = False
   PP_SSSMAIN.UnderFurigana = False
   PP_SSSMAIN.UnderFurigana22 = False
   Select Case CP_SSSMAIN(wk_Px).TypeA
      Case Cn_InputOnly, Cn_ListBox, Cn_OutputOnly
      Case Else
         wk_SS = Ct.SelStart
   End Select
   AE_KeyDown_SSSMAIN = False
   PP_SSSMAIN.CursorDest = Cn_Dest0
   If Not PP_SSSMAIN.Operable Then
      pm_KeyCode = 0
   ElseIf pm_KeyCode = vbKeyUp And pm_Shift = 0 Then
      PP_SSSMAIN.CursorDirection = Cn_Direction4 '4: Up
      pm_KeyCode = 0
      PP_SSSMAIN.CursorDest = Cn_Dest4
      GoTo CheckOrSkip
   ElseIf pm_KeyCode = vbKeyUp And pm_Shift = 2 Then
      PP_SSSMAIN.CursorDirection = Cn_Direction1 '1: Next
      PP_SSSMAIN.CursorDest = Cn_Dest2
      pm_KeyCode = 0
      GoTo CheckOrSkip
   ElseIf pm_KeyCode = vbKeyDown And pm_Shift = 0 Then
      PP_SSSMAIN.CursorDirection = Cn_Direction3 '3: Down
      pm_KeyCode = 0
         PP_SSSMAIN.CursorDest = Cn_Dest5
         GoTo CheckOrSkip
   ElseIf pm_KeyCode = vbKeyDown And pm_Shift = 2 Then
      PP_SSSMAIN.CursorDirection = Cn_Direction2 '2: Prev
      PP_SSSMAIN.CursorDest = Cn_Dest3
      pm_KeyCode = 0
      GoTo CheckOrSkip
   ElseIf pm_KeyCode = vbKeyRight And pm_Shift = 0 Then
      PP_SSSMAIN.CursorDirection = Cn_Direction1 '1: Next
      pm_KeyCode = 0
      Select Case CP_SSSMAIN(wk_Px).TypeA
         Case Cn_InputOnly, Cn_ListBox
            PP_SSSMAIN.CursorDest = Cn_Dest6: GoTo CheckOrSkip
      End Select
      If PP_SSSMAIN.Mode = Cn_Mode3 Then PP_SSSMAIN.CursorDest = Cn_Dest6: GoTo CheckOrSkip
      If Not (PP_SSSMAIN.Override = 1 And Ct.SelLength = 1) And PP_SSSMAIN.SelValid And Ct.SelLength = Len(wk_Txt$) And Len(wk_Txt$) > 0 Then
         If CP_SSSMAIN(wk_Px).Alignment <> 1 Then '左詰め
            wk_SS = Len(wk_Txt$) - PP_SSSMAIN.Override
            Do While wk_SS > 0
               wk_Moji$ = Mid$(wk_Txt$, wk_SS, 1)
               If wk_Moji$ <> Space$(1) And AE_KeyInOkChar(PP_SSSMAIN, wk_Moji$, CP_SSSMAIN(wk_Px).KeyInOkClass) Then
                  Ct.SelStart = wk_SS
                  GoTo AE_KeyDownRightEnd1_SSSMAIN
               End If
               wk_SS = wk_SS - 1
            Loop
            Ct.SelStart = 0
         Else
            Ct.SelStart = Len(wk_Txt$) - PP_SSSMAIN.Override
         End If
AE_KeyDownRightEnd1_SSSMAIN:
         Ct.SelLength = PP_SSSMAIN.Override
      Else
         wk_Ln = Len(wk_Txt$)
         If wk_SS = wk_Ln Then
            If PP_SSSMAIN.ArrowLimit = False And PP_SSSMAIN.AL = False Then PP_SSSMAIN.CursorDest = Cn_Dest6: GoTo CheckOrSkip
         ElseIf wk_SS <= wk_Ln - 2 Or wk_Ln <= 1 And CP_SSSMAIN(wk_Px).MaxLength <> 0 Then
            Do While wk_SS <= wk_Ln - 2
               wk_SS = wk_SS + 1
               wk_Moji$ = Mid$(wk_Txt$, wk_SS + 1, 1)
               If AE_KeyInOkChar(PP_SSSMAIN, wk_Moji$, CP_SSSMAIN(wk_Px).KeyInOkClass) Then
                  Ct.SelStart = wk_SS
                  Ct.SelLength = PP_SSSMAIN.Override
                  GoTo AE_KeyDownRightEnd2_SSSMAIN
               ElseIf wk_Moji$ = Space$(1) And AE_KeyInOkChar(PP_SSSMAIN, Mid$(wk_Txt$, wk_SS, 1), CP_SSSMAIN(wk_Px).KeyInOkClass) Then
                  Ct.SelStart = wk_SS
                  Ct.SelLength = PP_SSSMAIN.Override
                  GoTo AE_KeyDownRightEnd2_SSSMAIN
               ElseIf wk_Moji$ = Space$(1) And Mid$(wk_Txt$, wk_SS, 1) <> Space$(1) And CP_SSSMAIN(wk_Px).FixedFormat = 1 Then
                  Ct.SelStart = wk_SS
                  Ct.SelLength = PP_SSSMAIN.Override
                  GoTo AE_KeyDownRightEnd2_SSSMAIN
               ElseIf Mid$(wk_Txt$, wk_SS, 1) = Space$(1) And Not AE_KeyInOkChar(PP_SSSMAIN, Space$(1), CP_SSSMAIN(wk_Px).KeyInOkClass) Then
                  Exit Do
               End If
            Loop
            If PP_SSSMAIN.ArrowLimit = False And PP_SSSMAIN.AL = False Then PP_SSSMAIN.CursorDest = Cn_Dest6: GoTo CheckOrSkip
AE_KeyDownRightEnd2_SSSMAIN:
         Else
            If (CP_SSSMAIN(wk_Px).Alignment <> 1 And CP_SSSMAIN(wk_Px).MaxLength <> 0) Or PP_SSSMAIN.Mode = Cn_Mode3 Then '左詰め
               If PP_SSSMAIN.Override And PP_SSSMAIN.ArrowLimit = False And PP_SSSMAIN.AL = False Then PP_SSSMAIN.CursorDest = Cn_Dest6: GoTo CheckOrSkip
               If AE_KeyInOkChar(PP_SSSMAIN, Mid$(wk_Txt$, wk_SS + 1, 1), CP_SSSMAIN(wk_Px).KeyInOkClass) Then
                  Ct.SelStart = wk_SS + 1
                  Ct.SelLength = PP_SSSMAIN.Override
                  GoTo AE_KeyDownRightEnd2_SSSMAIN
               End If
            Else
               Ct.SelStart = wk_Ln
               Ct.SelLength = PP_SSSMAIN.Override
            End If
         End If
      End If
   ElseIf pm_KeyCode = vbKeyRight And pm_Shift = 2 Then
      PP_SSSMAIN.CursorDirection = Cn_Direction1 '1: Next
      pm_KeyCode = 0
      PP_SSSMAIN.CursorDest = Cn_Dest6: GoTo CheckOrSkip
   ElseIf pm_KeyCode = vbKeyLeft And pm_Shift = 0 Then
      PP_SSSMAIN.CursorDirection = Cn_Direction2 '2: Prev
      pm_KeyCode = 0
      Select Case CP_SSSMAIN(wk_Px).TypeA
         Case Cn_InputOnly, Cn_ListBox
            PP_SSSMAIN.CursorDest = Cn_Dest7: GoTo CheckOrSkip
      End Select
      If PP_SSSMAIN.Mode = Cn_Mode3 Then PP_SSSMAIN.CursorDest = Cn_Dest7: GoTo CheckOrSkip
      If Not (PP_SSSMAIN.Override = 1 And Ct.SelLength = 1) And PP_SSSMAIN.SelValid And Ct.SelLength = Len(wk_Txt$) And Len(wk_Txt$) > 0 Then
         If CP_SSSMAIN(wk_Px).Alignment = 1 Then '右詰め
            wk_SS = 0
            wk_Ln = Len(wk_Txt$) - PP_SSSMAIN.Override
            Do While wk_SS < wk_Ln
               wk_Moji$ = Mid$(wk_Txt$, wk_SS + 1, 1)
               If AE_KeyInOkChar(PP_SSSMAIN, wk_Moji$, CP_SSSMAIN(wk_Px).KeyInOkClass) Then
                  Ct.SelStart = wk_SS
                  GoTo AE_KeyDownLeftEnd1_SSSMAIN
               End If
               wk_SS = wk_SS + 1
            Loop
            Ct.SelStart = wk_Ln
         Else
            Ct.SelStart = 0
         End If
AE_KeyDownLeftEnd1_SSSMAIN:
         Ct.SelLength = PP_SSSMAIN.Override
      Else
         If wk_SS > 0 And wk_SS = Len(wk_Txt$) Then
            PP_SSSMAIN.Override = 1
            Ct.SelStart = wk_SS - 1
            Ct.SelLength = PP_SSSMAIN.Override
         ElseIf wk_SS = 0 Then
            If PP_SSSMAIN.ArrowLimit = False And PP_SSSMAIN.AL = False Then PP_SSSMAIN.CursorDest = Cn_Dest7: GoTo CheckOrSkip
         Else
            Do While wk_SS > 0
               wk_Moji$ = Mid$(wk_Txt$, wk_SS, 1)
               wk_SS = wk_SS - 1
               If AE_KeyInOkChar(PP_SSSMAIN, wk_Moji$, CP_SSSMAIN(wk_Px).KeyInOkClass) Then
                  Ct.SelStart = wk_SS
                  Ct.SelLength = PP_SSSMAIN.Override
                  GoTo AE_KeyDownLeftEnd2_SSSMAIN
               End If
            Loop
            If PP_SSSMAIN.ArrowLimit = False And PP_SSSMAIN.AL = False Then PP_SSSMAIN.CursorDest = Cn_Dest7: GoTo CheckOrSkip
         End If
AE_KeyDownLeftEnd2_SSSMAIN:
      End If
   ElseIf pm_KeyCode = vbKeyLeft And pm_Shift = 2 Then
      PP_SSSMAIN.CursorDirection = Cn_Direction2 '2: Prev
      pm_KeyCode = 0
      PP_SSSMAIN.CursorDest = Cn_Dest7: GoTo CheckOrSkip
   ElseIf pm_KeyCode = 126 Then
      PP_SSSMAIN.CursorDirection = Cn_Direction2 '2: Prev
      pm_KeyCode = 0
      PP_SSSMAIN.CursorDest = Cn_Dest7
      GoTo CheckOrSkip
   ElseIf (pm_KeyCode = vbKeyExecute Or pm_KeyCode = vbKeyReturn) And pm_Shift = 0 Or pm_KeyCode = 127 Then
KeyExecute:
      PP_SSSMAIN.CursorDirection = Cn_Direction1 '1: Next
      pm_KeyCode = 0
      AE_KeyDown_SSSMAIN = True
   ElseIf pm_KeyCode = vbKeyEnd And (pm_Shift And 1) <> 1 Then
      PP_SSSMAIN.CursorDirection = Cn_Direction2 '2: Prev
      PP_SSSMAIN.CursorDest = Cn_Dest3
      pm_KeyCode = 0
      GoTo CheckOrSkip
   ElseIf pm_KeyCode = vbKeyHome And (pm_Shift And 1) <> 1 Then
      PP_SSSMAIN.CursorDirection = Cn_Direction1 '1: Next
      PP_SSSMAIN.CursorDest = Cn_Dest2
      pm_KeyCode = 0
      GoTo CheckOrSkip
   ElseIf pm_KeyCode = vbKeyPageDown And pm_Shift = 0 Then
      pm_KeyCode = 0
   ElseIf pm_KeyCode = vbKeyPageUp And pm_Shift = 0 Then
      pm_KeyCode = 0
   ElseIf pm_KeyCode = 229 Then
      PP_SSSMAIN.EditText = True
   ElseIf pm_KeyCode = vbKeyDelete And pm_Shift <= 2 Then
      pm_KeyCode = 0
      If PP_SSSMAIN.Mode = Cn_Mode3 Then Exit Function
      wk_Ln = Len((Ct))
      If CP_SSSMAIN(wk_Px).KeyInOkClass = Asc("-") Then
         Exit Function
      ElseIf CP_SSSMAIN(wk_Px).TypeA = Cn_InputOnly Then
         Exit Function
      ElseIf Not AE_IsWritableInOutMode(PP_SSSMAIN, CP_SSSMAIN(wk_Px)) Or Not AE_IsEnable(CP_SSSMAIN(wk_Px).BlockNo, PP_SSSMAIN.ActiveBlockNo) Then
         Exit Function
      ElseIf CP_SSSMAIN(wk_Px).FixedFormat = 1 Then
         If AE_KeyInOkChar(PP_SSSMAIN, Space$(1), CP_SSSMAIN(wk_Px).KeyInOkClass) Then
            wk_Txt$ = Left$(wk_Txt$, wk_SS) & Space$(LenWid(Mid$(wk_Txt$, wk_SS + 1, 1))) & Mid$(wk_Txt$, wk_SS + 2)
            wk_Ln = Len(wk_Txt$) - PP_SSSMAIN.Override
            wk_SS = wk_SS + 1
            Do While wk_SS < wk_Ln
               wk_Moji$ = Mid$(wk_Txt$, wk_SS + 1, 1)
               If AE_KeyInOkChar(PP_SSSMAIN, wk_Moji$, CP_SSSMAIN(wk_Px).KeyInOkClass) Then Exit Do
               wk_SS = wk_SS + 1
            Loop
         Else
            Exit Function
         End If
      ElseIf Ct.SelLength = wk_Ln And wk_Ln > 1 Then
         wk_Txt$ = Space$(CP_SSSMAIN(wk_Px).MaxLength)
         If CP_SSSMAIN(wk_Px).Alignment = 1 And (PP_SSSMAIN.SelValid Or CP_SSSMAIN(wk_Px).FixedFormat = 1) Then wk_SS = CP_SSSMAIN(wk_Px).MaxLength
      ElseIf CP_SSSMAIN(wk_Px).MaxLength = 0 Then
         wk_Txt$ = Left$(wk_Txt$, wk_SS) & Mid$(wk_Txt$, wk_SS + 2)
      ElseIf CP_SSSMAIN(wk_Px).Alignment <> 1 Then
         If Ct.SelLength > 1 And (CP_SSSMAIN(wk_Px).FormatClass = Cn_Memo Or CP_SSSMAIN(wk_Px).FormatClass = Cn_Name) And AE_SSSWin Then
            wk_Txt$ = Left$(wk_Txt$, wk_SS) & Mid$(wk_Txt$, wk_SS + Ct.SelLength + 1) & Space$(LenWid(Mid$((Ct), wk_SS + 1, Ct.SelLength))) 'V6.52
         ElseIf Len(wk_Txt$) >= wk_SS + 1 Then
            wk_Txt$ = Left$(wk_Txt$, wk_SS) & Mid$(wk_Txt$, wk_SS + 2) & Space$(LenWid(Mid$((Ct), wk_SS + 1, 1)))
         End If
         If AE_Numerical(CP_SSSMAIN(wk_Px).FormatClass) Then
            If IsNull(AE_Val(CP_SSSMAIN(wk_Px), wk_Txt$, CP_SSSMAIN(wk_Px).FractionC)) Then
            ElseIf AE_Val(CP_SSSMAIN(wk_Px), wk_Txt$, CP_SSSMAIN(wk_Px).FractionC) = 0 Then
               wk_Txt$ = ""
            End If
         End If
      Else
         wk_SS2 = wk_SS: If Ct.SelLength = 0 And CP_SSSMAIN(wk_Px).Alignment = 1 And AE_Numerical(CP_SSSMAIN(wk_Px).FormatClass) And wk_SS > 0 Then wk_SS2 = wk_SS - 1
         If Mid$(wk_Txt$, wk_SS2 + 1, 1) = "." And AE_Numerical(CP_SSSMAIN(wk_Px).FormatClass) Then
            wk_Ln2 = Len(Trim$(AE_Format$(CP_SSSMAIN(wk_Px), AE_Val(CP_SSSMAIN(wk_Px), Left$(wk_Txt$, wk_SS2) & Mid$(wk_Txt$, wk_SS2 + 2), wk_FractionC), wk_FractionC, True)))
            If wk_Ln2 > CP_SSSMAIN(wk_Px).MaxLength Or _
               wk_Ln2 > CP_SSSMAIN(wk_Px).MaxLength - 1 And (CP_SSSMAIN(wk_Px).FormatClass = Cn_Snum Or CP_SSSMAIN(wk_Px).FormatClass = Cn_Schn) And InStr(wk_Txt$, "-") = 0 Then
               Beep
               Exit Function
            End If
         End If
         If Ct.SelLength > 1 And (CP_SSSMAIN(wk_Px).FormatClass = Cn_Memo Or CP_SSSMAIN(wk_Px).FormatClass = Cn_Name) And AE_SSSWin Then 'V6.52
            wk_Txt$ = Space$(LenWid(Mid$((Ct), wk_SS2 + 1, Ct.SelLength))) & Left$(wk_Txt$, wk_SS2) & Mid$(wk_Txt$, wk_SS2 + Ct.SelLength + 1) 'V6.52
         ElseIf Len(wk_Txt$) >= wk_SS + 1 Then
            wk_Txt$ = Space$(LenWid(Mid$((Ct), wk_SS2 + 1, 1))) & Left$(wk_Txt$, wk_SS2) & Mid$(wk_Txt$, wk_SS2 + 2)
         End If
         If AE_Numerical(CP_SSSMAIN(wk_Px).FormatClass) Then
            If IsNull(AE_Val(CP_SSSMAIN(wk_Px), wk_Txt$, CP_SSSMAIN(wk_Px).FractionC)) Then
               wk_SS = wk_Ln
            ElseIf AE_Val(CP_SSSMAIN(wk_Px), wk_Txt$, CP_SSSMAIN(wk_Px).FractionC) = 0 Then
               wk_Txt$ = ""
               wk_SS = wk_Ln
            End If
         End If
      End If
      pm_TA$ = AE_Format$(CP_SSSMAIN(wk_Px), AE_Val(CP_SSSMAIN(wk_Px), wk_Txt$, CP_SSSMAIN(wk_Px).FractionC), CP_SSSMAIN(wk_Px).FractionC, False)
      PP_SSSMAIN.MaskMode = True
         Ct = pm_TA$
         Ct.SelStart = wk_SS
         Call AE_SetSelLen(PP_SSSMAIN, CP_SSSMAIN(wk_Px), Ct, (PP_SSSMAIN.SelValid And Not CP_SSSMAIN(wk_Px).FixedFormat))
      PP_SSSMAIN.MaskMode = False
      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(wk_Px))
      CP_SSSMAIN(wk_Px).StatusC = Cn_Status1
      Ct.ForeColor = AE_Color(Cn_Status1)
      Select Case CP_SSSMAIN(wk_Px).TypeA
         Case Cn_NormalOrV, Cn_InputOnly
            Ct.BackColor = PP_SSSMAIN.BrightOnOff
      End Select
   ElseIf pm_KeyCode = vbKeyInsert Then
      If CP_SSSMAIN(wk_Px).TypeA = Cn_InputOnly Or CP_SSSMAIN(wk_Px).TypeA = Cn_ListBox Or CP_SSSMAIN(wk_Px).KeyInOkClass = Asc("1") Then Exit Function
      wk_Ln = Len(wk_Txt$)
      PP_SSSMAIN.Override = PP_SSSMAIN.Override Xor 1
      If CP_SSSMAIN(wk_Px).Alignment <> 1 And PP_SSSMAIN.Override = 1 And wk_SS > 0 And wk_SS = wk_Ln Then Ct.SelStart = wk_Ln - 1
      Ct.SelLength = PP_SSSMAIN.Override
   ElseIf pm_KeyCode >= vbKeyF1 And pm_KeyCode <= vbKeyF12 Then
      wk_Int = AE_FuncKey_SSSMAIN(pm_KeyCode, pm_Shift)
      If pm_KeyCode <> vbKeyF4 Or (pm_Shift And 6) <> 4 Then pm_KeyCode = 0
   ElseIf CP_SSSMAIN(wk_Px).TypeA = Cn_InputOnly Then
         pm_KeyCode = 0
   End If
   Exit Function
CheckOrSkip:
   If CP_SSSMAIN(wk_Px).StatusC = Cn_Status1 Then
      AE_KeyDown_SSSMAIN = True
   Else
      wk_Bool = AE_CursorSkip_SSSMAIN()
   End If
End Function

Function AE_Last_SSSMAIN(ByVal pm_Check As Integer) As Integer 'Generated.
   If pm_Check Then
      If AE_MsgLibrary(PP_SSSMAIN, "LastC") Then AE_Last_SSSMAIN = Cn_CuCurrent: Exit Function
   End If
   Call AE_InitValAll_SSSMAIN
' === 20110217 === DELETE S TOM)Morimoto
'   PP_SSSMAIN.LastDe = SSSMAIN_Last()
' === 20110217 === DELETE E
   If PP_SSSMAIN.LastDe = 0 Then
      If Not AE_MsgLibrary(PP_SSSMAIN, "LastCm") Then
         Call AE_InitValAll_SSSMAIN
      Else
         Call AE_RecalcAll_SSSMAIN
      End If
   Else
      Call AE_RecalcAll_SSSMAIN
   End If
   Call AE_ClearInitValStatus_SSSMAIN
   AE_Last_SSSMAIN = Cn_CuInit
End Function

Sub AE_Later_SSSMAIN() 'Generated.
   Select Case PP_SSSMAIN.ChOprtMode
      Case Cn_Mode1
         If PP_SSSMAIN.Mode <> Cn_Mode1 Then wk_Int = AE_AppendC_SSSMAIN(PP_SSSMAIN.Mode)
      Case Cn_Mode15
         wk_Int = AE_AppendC_SSSMAIN(PP_SSSMAIN.Mode, True)
      Case Cn_Mode16
         Call AE_InitValAll_SSSMAIN
      Case Cn_Mode2
         wk_Int = AE_SelectCm_SSSMAIN(PP_SSSMAIN.Mode, False)
      Case Cn_Mode25
         wk_Int = AE_SelectCm_SSSMAIN(PP_SSSMAIN.Mode, True)
      Case Cn_Mode3
         wk_Int = AE_Indicate_SSSMAIN(PP_SSSMAIN.Mode, False)
      Case Cn_Mode4
         wk_Int = AE_UpdateC_SSSMAIN(PP_SSSMAIN.Mode, False)
   End Select
   PP_SSSMAIN.ChOprtMode = 0
End Sub

Static Sub AE_ModeChange_SSSMAIN(ByVal pm_NewMode As Integer) 'Generated.
   Select Case pm_NewMode
      Case Cn_Mode1
         If PP_SSSMAIN.Mode <> Cn_Mode1 Then
            PP_SSSMAIN.Mode = Cn_Mode1: AE_ModeBar(PP_SSSMAIN.ScX) = "追加"
            Call AE_TabStop_SSSMAIN(0, 6, False)
            AE_CursorRest(PP_SSSMAIN.ScX).TabStop = False
         End If
      Case Cn_Mode2
         If PP_SSSMAIN.Mode <> Cn_Mode2 Then
            PP_SSSMAIN.Mode = Cn_Mode2: AE_ModeBar(PP_SSSMAIN.ScX) = "選択"
            Call AE_TabStop_SSSMAIN(0, 6, False)
            AE_CursorRest(PP_SSSMAIN.ScX).TabStop = False
         End If
      Case Cn_Mode3
         If PP_SSSMAIN.Mode <> Cn_Mode3 Then
            PP_SSSMAIN.Mode = Cn_Mode3: AE_ModeBar(PP_SSSMAIN.ScX) = "表示"
            Call AE_TabStop_SSSMAIN(0, 6, False)
            AE_CursorRest(PP_SSSMAIN.ScX).TabStop = True
         End If
      Case Cn_Mode4
         If PP_SSSMAIN.Mode <> Cn_Mode4 Then
            PP_SSSMAIN.Mode = Cn_Mode4: AE_ModeBar(PP_SSSMAIN.ScX) = "更新"
            Call AE_TabStop_SSSMAIN(0, 6, False)
            AE_CursorRest(PP_SSSMAIN.ScX).TabStop = False
         End If
      Case Else
         Call AE_SystemError("AE_ModeChange のパラメタに", 562)
   End Select
End Sub

Function AE_NextCm_SSSMAIN(ByVal pm_Check As Integer) As Integer 'Generated.
   If pm_Check Then
      If AE_MsgLibrary(PP_SSSMAIN, "NextC") Then AE_NextCm_SSSMAIN = Cn_CuCurrent: Exit Function
   End If
   Call AE_InitValAll_SSSMAIN
   ' === 20110217 === DELETE S TOM)Morimoto
'   PP_SSSMAIN.LastDe = SSSMAIN_Next()
   ' === 20110217 === DELETE E
   If PP_SSSMAIN.LastDe = 0 Then
      If Not AE_MsgLibrary(PP_SSSMAIN, "NextCm") Then
         If AE_Last_SSSMAIN(False) = Cn_CuInit Then AE_NextCm_SSSMAIN = Cn_CuInit: Exit Function
      Else
         Call AE_RecalcAll_SSSMAIN
      End If
   Else
      Call AE_RecalcAll_SSSMAIN
   End If
   Call AE_ClearInitValStatus_SSSMAIN
   AE_NextCm_SSSMAIN = Cn_CuInit
End Function

Function AE_NullCnv1_SSSMAIN(ByVal Valu) 'Generated.
   If IsEmpty(Valu) Then
       AE_NullCnv1_SSSMAIN = 0@
   ElseIf IsNull(Valu) Then
       AE_NullCnv1_SSSMAIN = 0@
   Else
       AE_NullCnv1_SSSMAIN = Valu
   End If
End Function

Function AE_NullCnv2_SSSMAIN(ByVal Valu) 'Generated.
   If IsEmpty(Valu) Then
       AE_NullCnv2_SSSMAIN = ""
   ElseIf IsNull(Valu) Then
       AE_NullCnv2_SSSMAIN = ""
   Else
       AE_NullCnv2_SSSMAIN = Valu
   End If
End Function

Sub AE_RecalcAll_SSSMAIN() 'Generated.
   PP_SSSMAIN.DerivedOrigin = ""
   Call AE_RecalcHd_SSSMAIN
End Sub

Sub AE_RecalcHd_SSSMAIN() 'Generated.
    Dim wkIndex As Integer
   PP_SSSMAIN.RecalcMode = True
   If AE_GetInOutMode(CP_SSSMAIN(0).InOutMode, Cn_Mode1) >= Cn_InOutMode2 Or AE_GetInOutMode(CP_SSSMAIN(0).InOutMode, Cn_Mode4) >= Cn_InOutMode2 Then
      If CP_SSSMAIN(0).StatusC >= Cn_Status2 Then Call AE_Check_SSSMAIN_OPEID(AE_Val2(CP_SSSMAIN(0)), CP_SSSMAIN(0).StatusF, False, False)
   End If
   If AE_GetInOutMode(CP_SSSMAIN(1).InOutMode, Cn_Mode1) >= Cn_InOutMode2 Or AE_GetInOutMode(CP_SSSMAIN(1).InOutMode, Cn_Mode4) >= Cn_InOutMode2 Then
      If CP_SSSMAIN(1).StatusC >= Cn_Status2 Then Call AE_Check_SSSMAIN_OPENM(AE_Val2(CP_SSSMAIN(1)), CP_SSSMAIN(1).StatusF, False, False)
   End If
   If AE_GetInOutMode(CP_SSSMAIN(2).InOutMode, Cn_Mode1) >= Cn_InOutMode2 Or AE_GetInOutMode(CP_SSSMAIN(2).InOutMode, Cn_Mode4) >= Cn_InOutMode2 Then
      If CP_SSSMAIN(2).StatusC >= Cn_Status2 Then Call AE_Check_SSSMAIN_THSCD(AE_Val2(CP_SSSMAIN(2)), CP_SSSMAIN(2).StatusF, False, False)
   End If
' === 20110216 === INSERT S TOM)Morimoto
    wkIndex = Get_Index("HD_FRNKB", CQ_SSSMAIN)
   If AE_GetInOutMode(CP_SSSMAIN(wkIndex).InOutMode, Cn_Mode1) >= Cn_InOutMode2 Or AE_GetInOutMode(CP_SSSMAIN(wkIndex).InOutMode, Cn_Mode4) >= Cn_InOutMode2 Then
      If CP_SSSMAIN(wkIndex).StatusC >= Cn_Status2 Then Call AE_Check_SSSMAIN_FRNKB(AE_Val2(CP_SSSMAIN(wkIndex)), CP_SSSMAIN(wkIndex).StatusF, False, False)
   End If
' === 20110216 === INSERT E
' === 20110216 === UPDATE S TOM)Morimoto
'   If AE_GetInOutMode(CP_SSSMAIN(3).InOutMode, Cn_Mode1) >= Cn_InOutMode2 Or AE_GetInOutMode(CP_SSSMAIN(3).InOutMode, Cn_Mode4) >= Cn_InOutMode2 Then
'      If CP_SSSMAIN(3).StatusC >= Cn_Status2 Then Call AE_Check_SSSMAIN_STTTOKCD(AE_Val2(CP_SSSMAIN(3)), CP_SSSMAIN(3).StatusF, False, False)
    wkIndex = Get_Index("HD_STTTOKCD", CQ_SSSMAIN)
   If AE_GetInOutMode(CP_SSSMAIN(wkIndex).InOutMode, Cn_Mode1) >= Cn_InOutMode2 Or AE_GetInOutMode(CP_SSSMAIN(wkIndex).InOutMode, Cn_Mode4) >= Cn_InOutMode2 Then
      If CP_SSSMAIN(wkIndex).StatusC >= Cn_Status2 Then Call AE_Check_SSSMAIN_STTTOKCD(AE_Val2(CP_SSSMAIN(wkIndex)), CP_SSSMAIN(wkIndex).StatusF, False, False)
' === 20110216 === UPDATE E
   End If
' === 20110216 === UPDATE S TOM)Morimoto
'   If AE_GetInOutMode(CP_SSSMAIN(4).InOutMode, Cn_Mode1) >= Cn_InOutMode2 Or AE_GetInOutMode(CP_SSSMAIN(4).InOutMode, Cn_Mode4) >= Cn_InOutMode2 Then
'      If CP_SSSMAIN(4).StatusC >= Cn_Status2 Then Call AE_Check_SSSMAIN_STTTOKNM(AE_Val2(CP_SSSMAIN(4)), CP_SSSMAIN(4).StatusF, False, False)
    wkIndex = Get_Index("HD_STTTOKNM", CQ_SSSMAIN)
   If AE_GetInOutMode(CP_SSSMAIN(wkIndex).InOutMode, Cn_Mode1) >= Cn_InOutMode2 Or AE_GetInOutMode(CP_SSSMAIN(wkIndex).InOutMode, Cn_Mode4) >= Cn_InOutMode2 Then
      If CP_SSSMAIN(wkIndex).StatusC >= Cn_Status2 Then Call AE_Check_SSSMAIN_STTTOKNM(AE_Val2(CP_SSSMAIN(wkIndex)), CP_SSSMAIN(wkIndex).StatusF, False, False)
' === 20110216 === UPDATE E
   End If
' === 20110216 === UPDATE S TOM)Morimoto
'   If AE_GetInOutMode(CP_SSSMAIN(5).InOutMode, Cn_Mode1) >= Cn_InOutMode2 Or AE_GetInOutMode(CP_SSSMAIN(5).InOutMode, Cn_Mode4) >= Cn_InOutMode2 Then
'      If CP_SSSMAIN(5).StatusC >= Cn_Status2 Then Call AE_Check_SSSMAIN_ENDTOKCD(AE_Val2(CP_SSSMAIN(5)), CP_SSSMAIN(5).StatusF, False, False)
    wkIndex = Get_Index("HD_ENDTOKCD", CQ_SSSMAIN)
   If AE_GetInOutMode(CP_SSSMAIN(wkIndex).InOutMode, Cn_Mode1) >= Cn_InOutMode2 Or AE_GetInOutMode(CP_SSSMAIN(wkIndex).InOutMode, Cn_Mode4) >= Cn_InOutMode2 Then
      If CP_SSSMAIN(wkIndex).StatusC >= Cn_Status2 Then Call AE_Check_SSSMAIN_ENDTOKCD(AE_Val2(CP_SSSMAIN(wkIndex)), CP_SSSMAIN(wkIndex).StatusF, False, False)
' === 20110216 === UPDATE E
   End If
' === 20110216 === UPDATE S TOM)Morimoto
'   If AE_GetInOutMode(CP_SSSMAIN(6).InOutMode, Cn_Mode1) >= Cn_InOutMode2 Or AE_GetInOutMode(CP_SSSMAIN(6).InOutMode, Cn_Mode4) >= Cn_InOutMode2 Then
'      If CP_SSSMAIN(6).StatusC >= Cn_Status2 Then Call AE_Check_SSSMAIN_ENDTOKNM(AE_Val2(CP_SSSMAIN(6)), CP_SSSMAIN(6).StatusF, False, False)
    wkIndex = Get_Index("HD_ENDTOKNM", CQ_SSSMAIN)
   If AE_GetInOutMode(CP_SSSMAIN(wkIndex).InOutMode, Cn_Mode1) >= Cn_InOutMode2 Or AE_GetInOutMode(CP_SSSMAIN(wkIndex).InOutMode, Cn_Mode4) >= Cn_InOutMode2 Then
      If CP_SSSMAIN(wkIndex).StatusC >= Cn_Status2 Then Call AE_Check_SSSMAIN_ENDTOKNM(AE_Val2(CP_SSSMAIN(wkIndex)), CP_SSSMAIN(wkIndex).StatusF, False, False)
' === 20110216 === UPDATE E
   End If
   PP_SSSMAIN.DerivedFrom = "(Recalc)"
   If Left$(PP_SSSMAIN.DerivedOrigin, 1) <> "H" Then
      PP_SSSMAIN.DerivedOrigin = ""
   End If
   Call AE_RecalcHdSub_SSSMAIN
   PP_SSSMAIN.RecalcMode = False
End Sub

Sub AE_RecalcHdSub_SSSMAIN() 'Generated.
   Call AE_Derived_SSSMAIN_hd_ENDTOKNM(PP_SSSMAIN.De2)
   Call AE_Derived_SSSMAIN_hd_STTTOKNM(PP_SSSMAIN.De2)
End Sub

Function AE_SelectCm_SSSMAIN(ByVal pm_ExMode As Integer, ByVal pm_Init As Boolean) As Integer 'Generated.
Dim wk_ReturnCd As Integer
   If PP_SSSMAIN.Mode = Cn_Mode2 Then AE_SelectCm_SSSMAIN = Cn_CuCurrent: Exit Function
   If PP_SSSMAIN.InitValStatus <> PP_SSSMAIN.Mode Then
      If PP_SSSMAIN.ChOprtMode = 0 Then
         If AE_MsgLibrary(PP_SSSMAIN, "SelectCm") Then AE_SelectCm_SSSMAIN = Cn_CuCurrent: Exit Function
      End If
   End If
   ' === 20110217 === DELETE S TOM)Morimoto
'   wk_ReturnCd = SSSMAIN_Select()
   ' === 20110217 === DELETE E
   If wk_ReturnCd = 0 Then
      PP_SSSMAIN.NeglectLostFocusCheck = True
      AE_SelectCm_SSSMAIN = Cn_CuCurrent
      PP_SSSMAIN.NeglectLostFocusCheck = False
   ElseIf wk_ReturnCd = 1 Then
      PP_SSSMAIN.ChOprtMode = Cn_Mode2
      Call AE_ModeChange_SSSMAIN(Cn_Mode2)
      Call AE_InitValAll_SSSMAIN
      AE_SelectCm_SSSMAIN = Cn_CuInit
   ElseIf wk_ReturnCd = 2 Then
      AE_SelectCm_SSSMAIN = AE_Indicate_SSSMAIN(pm_ExMode, False)
   ElseIf wk_ReturnCd = 3 Then
      AE_SelectCm_SSSMAIN = AE_Indicate_SSSMAIN(pm_ExMode, False)
   ElseIf wk_ReturnCd = 4 Then
      AE_SelectCm_SSSMAIN = AE_UpdateC_SSSMAIN(pm_ExMode, False)
   ElseIf wk_ReturnCd = 15 Then
      AE_SelectCm_SSSMAIN = AE_AppendC_SSSMAIN(pm_ExMode, True)
   Else
      AE_SelectCm_SSSMAIN = AE_AppendC_SSSMAIN(pm_ExMode)
   End If
   PP_SSSMAIN.ChOprtMode = 0
End Function

Sub AE_SetCheck_SSSMAIN(ByVal CC_NewVal, ByVal pm_Status As Integer, ByVal pm_HandIn As Boolean) 'Generated.
Dim wk_PxBase As Integer
   If PP_SSSMAIN.Tx < 0 Then
' === 20110216 === UPDATE S TOM)Morimoto
'   ElseIf PP_SSSMAIN.Tx < 7 Then
   ElseIf PP_SSSMAIN.Tx < PP_SSSMAIN.HeadN Then
' === 20110216 === UPDATE E
' === 20110216 === UPDATE S TOM)Morimoto
'      Select Case PP_SSSMAIN.Px
'         Case 0
      Select Case CQ_SSSMAIN(PP_SSSMAIN.Px)
         Case "HD_OPEID"
' === 20110216 === UPDATE E
            Call AE_Check_SSSMAIN_OPEID(CC_NewVal, pm_Status, False, pm_HandIn)
            If AE_ErrorToInteger(Ck_Error) = 0 Then
            End If
' === 20110216 === UPDATE S TOM)Morimoto
'         Case 1
         Case "HD_OPENM"
' === 20110216 === UPDATE E
            Call AE_Check_SSSMAIN_OPENM(CC_NewVal, pm_Status, False, pm_HandIn)
            If AE_ErrorToInteger(Ck_Error) = 0 Then
            End If
' === 20110216 === UPDATE S TOM)Morimoto
'         Case 2
         Case "HD_THSCD"
' === 20110216 === UPDATE E
            Call AE_Check_SSSMAIN_THSCD(CC_NewVal, pm_Status, False, pm_HandIn)
            If AE_ErrorToInteger(Ck_Error) = 0 Then
            End If
' === 20110216 === INSERT S TOM)Morimoto
         Case "HD_FRNKB"
            Call AE_Check_SSSMAIN_FRNKB(CC_NewVal, pm_Status, False, pm_HandIn)
            If AE_ErrorToInteger(Ck_Error) = 0 Then
            End If
' === 20110216 === INSERT E
' === 20110216 === UPDATE S TOM)Morimoto
'         Case 3
         Case "HD_STTTOKCD"
' === 20110216 === UPDATE E
            Call AE_Check_SSSMAIN_STTTOKCD(CC_NewVal, pm_Status, False, pm_HandIn)
            If AE_ErrorToInteger(Ck_Error) = 0 Then
            PP_SSSMAIN.DerivedOrigin = "HD_STTTOKCD"
            Call AE_Derived_SSSMAIN_hd_STTTOKNM(PP_SSSMAIN.De2)
            End If
' === 20110216 === UPDATE S TOM)Morimoto
'         Case 4
         Case "HD_STTTOKNM"
' === 20110216 === UPDATE E
            Call AE_Check_SSSMAIN_STTTOKNM(CC_NewVal, pm_Status, False, pm_HandIn)
            If AE_ErrorToInteger(Ck_Error) = 0 Then
            End If
' === 20110216 === UPDATE S TOM)Morimoto
'         Case 5
         Case "HD_ENDTOKCD"
' === 20110216 === UPDATE E
            Call AE_Check_SSSMAIN_ENDTOKCD(CC_NewVal, pm_Status, False, pm_HandIn)
            If AE_ErrorToInteger(Ck_Error) = 0 Then
            PP_SSSMAIN.DerivedOrigin = "HD_ENDTOKCD"
            Call AE_Derived_SSSMAIN_hd_ENDTOKNM(PP_SSSMAIN.De2)
            End If
' === 20110216 === UPDATE S TOM)Morimoto
'         Case 6
         Case "HD_ENDTOKNM"
' === 20110216 === UPDATE E
            Call AE_Check_SSSMAIN_ENDTOKNM(CC_NewVal, pm_Status, False, pm_HandIn)
            If AE_ErrorToInteger(Ck_Error) = 0 Then
            End If
      End Select
   End If
End Sub

Sub AE_Slist_SSSMAIN() 'Generated.
Dim wk_Slisted As Variant
Dim Wk_Index As Integer
Dim wk_Index1 As Integer
    Wk_Index = Get_Index("HD_STTTOKCD", CQ_SSSMAIN)
    wk_Index1 = Get_Index("HD_ENDTOKCD", CQ_SSSMAIN)
   If False Then
' === 20110216 === UPDATE S TOM)Morimoto
'   ElseIf PP_SSSMAIN.Tx = 3 Then
   ElseIf PP_SSSMAIN.Tx = Wk_Index Then
' === 20110216 === UPDATE E
      PP_SSSMAIN.SlistCom = Null
      PP_SSSMAIN.SlistPx = PP_SSSMAIN.Px
      PP_SSSMAIN.NeglectLostFocusCheck = True
' === 20110216 === DELETE S TOM)Morimoto
'      wk_Slisted = STTTOKCD_Slist(PP_SSSMAIN, AE_NullCnv2_SSSMAIN(CP_SSSMAIN(3).CuVal))
      wk_Slisted = STTTOKCD_Slist(PP_SSSMAIN, AE_NullCnv2_SSSMAIN(CP_SSSMAIN(Wk_Index).CuVal))
' === 20110216 === DELETE E
      PP_SSSMAIN.NeglectLostFocusCheck = False
      If IsEmpty(wk_Slisted) Then wk_Slisted = Null
      PP_SSSMAIN.CursorDirection = Cn_Direction1 '1: Next
      If Not IsNull(wk_Slisted) Then
         PP_SSSMAIN.CursorDest = Cn_Dest9
         PP_SSSMAIN.SlistPx = -1
         PP_SSSMAIN.JustAfterSList = True
         PP_SSSMAIN.SlistCom = Null
         If PP_SSSMAIN.Mode <> Cn_Mode3 Then
' === 20110216 === UPDATE S TOM)Morimoto
'            CP_SSSMAIN(3).TpStr = wk_Slisted
'            CP_SSSMAIN(3).CIn = Cn_ChrInput
'            AE_Controls(PP_SSSMAIN.CtB + 3) = wk_Slisted
'            Call AE_Check_SSSMAIN_STTTOKCD(AE_Val3(CP_SSSMAIN(3), (AE_Controls(PP_SSSMAIN.CtB + 3))), Cn_Status6, True, True)
            CP_SSSMAIN(Wk_Index).TpStr = wk_Slisted
            CP_SSSMAIN(Wk_Index).CIn = Cn_ChrInput
            AE_Controls(PP_SSSMAIN.CtB + Wk_Index) = wk_Slisted
            Call AE_Check_SSSMAIN_STTTOKCD(AE_Val3(CP_SSSMAIN(Wk_Index), (AE_Controls(PP_SSSMAIN.CtB + Wk_Index))), Cn_Status6, True, True)
' === 20110216 === UPDATE E
         End If
      Else
          PP_SSSMAIN.CursorDest = Cn_Dest0
          PP_SSSMAIN.NextTx = PP_SSSMAIN.Tx
      End If
' === 20110216 === UPDATE S TOM)Morimoto
'   ElseIf PP_SSSMAIN.Tx = 5 Then
   ElseIf PP_SSSMAIN.Tx = wk_Index1 Then
' === 20110216 === UPDATE E
      PP_SSSMAIN.SlistCom = Null
      PP_SSSMAIN.SlistPx = PP_SSSMAIN.Px
      PP_SSSMAIN.NeglectLostFocusCheck = True
' === 20110216 === DELETE S TOM)Morimoto
'      wk_Slisted = ENDTOKCD_Slist(PP_SSSMAIN, AE_NullCnv2_SSSMAIN(CP_SSSMAIN(5).CuVal))
      wk_Slisted = ENDTOKCD_Slist(PP_SSSMAIN, AE_NullCnv2_SSSMAIN(CP_SSSMAIN(wk_Index1).CuVal))
' === 20110216 === DELETE E
      PP_SSSMAIN.NeglectLostFocusCheck = False
      If IsEmpty(wk_Slisted) Then wk_Slisted = Null
      PP_SSSMAIN.CursorDirection = Cn_Direction1 '1: Next
      If Not IsNull(wk_Slisted) Then
         PP_SSSMAIN.CursorDest = Cn_Dest9
         PP_SSSMAIN.SlistPx = -1
         PP_SSSMAIN.JustAfterSList = True
         PP_SSSMAIN.SlistCom = Null
         If PP_SSSMAIN.Mode <> Cn_Mode3 Then
' === 20110216 === UPDATE S TOM)Morimoto
'            CP_SSSMAIN(5).TpStr = wk_Slisted
'            CP_SSSMAIN(5).CIn = Cn_ChrInput
'            AE_Controls(PP_SSSMAIN.CtB + 5) = wk_Slisted
'            Call AE_Check_SSSMAIN_ENDTOKCD(AE_Val3(CP_SSSMAIN(5), (AE_Controls(PP_SSSMAIN.CtB + 5))), Cn_Status6, True, True)
            CP_SSSMAIN(wk_Index1).TpStr = wk_Slisted
            CP_SSSMAIN(wk_Index1).CIn = Cn_ChrInput
            AE_Controls(PP_SSSMAIN.CtB + wk_Index1) = wk_Slisted
            Call AE_Check_SSSMAIN_ENDTOKCD(AE_Val3(CP_SSSMAIN(wk_Index1), (AE_Controls(PP_SSSMAIN.CtB + wk_Index1))), Cn_Status6, True, True)
' === 20110216 === UPDATE E
         End If
      Else
          PP_SSSMAIN.CursorDest = Cn_Dest0
          PP_SSSMAIN.NextTx = PP_SSSMAIN.Tx
      End If
   Else
      Beep
   End If
End Sub

Static Sub AE_TabStop_SSSMAIN(ByVal pm_FromTx As Integer, ByVal pm_ToTx As Integer, ByVal pm_SetInOut As Boolean) 'Generated.
Dim wk_Tx As Integer
Dim wk_Px As Integer
Dim wk_InOutMode As Long
   If pm_FromTx < 0 Or pm_ToTx < 0 Then Exit Sub
   wk_Tx = pm_FromTx
   Do While wk_Tx <= pm_ToTx
' === 20110216 === UPDATE S TOM)Morimoto
'      If wk_Tx >= PP_SSSMAIN.NrBodyTx And wk_Tx < 7 Then
      If wk_Tx >= PP_SSSMAIN.NrBodyTx And wk_Tx < PP_SSSMAIN.HeadN Then
' === 20110216 === UPDATE E
      Else
         wk_Px = AE_Px(PP_SSSMAIN, wk_Tx)
         wk_InOutMode = (CP_SSSMAIN(wk_Px).InOutMode \ 256) And &HFF
         If pm_SetInOut Then CP_SSSMAIN(wk_Px).InOutMode = wk_InOutMode * 256 + wk_InOutMode
         If CP_SSSMAIN(wk_Px).TypeA = Cn_OutputOnly Then
         ElseIf CP_SSSMAIN(wk_Px).TypeA = Cn_OptionButtonH Or CP_SSSMAIN(wk_Px).TypeA = Cn_OptionButtonC Or CP_SSSMAIN(wk_Px).TypeA = Cn_CheckBox Then
            AE_Controls(PP_SSSMAIN.CtB + wk_Tx).TabStop = False
            AE_Controls(PP_SSSMAIN.CtB + wk_Tx).Enabled = (AE_GetInOutMode(CP_SSSMAIN(wk_Px).InOutMode, PP_SSSMAIN.Mode) >= Cn_InOutMode2)
         Else
            AE_Controls(PP_SSSMAIN.CtB + wk_Tx).TabStop = (AE_GetInOutMode(CP_SSSMAIN(wk_Px).InOutMode, PP_SSSMAIN.Mode) >= Cn_InOutMode2) And (AE_IsEnable(CP_SSSMAIN(wk_Px).BlockNo, PP_SSSMAIN.ActiveBlockNo))
         End If
      End If
      wk_Tx = wk_Tx + 1
   Loop
End Sub

Sub AE_Term_SSSMAIN() 'Generated.
End Sub

Sub AE_UnDoItem_SSSMAIN() 'Generated.
Dim wk_ExVal As Variant
Dim wk_ExStatus As Integer
Dim wk_SaveValue As Variant
Dim wk_SaveStatus As Integer
   If CP_SSSMAIN(PP_SSSMAIN.Px).StatusC <= Cn_Status2 Then
      wk_ExVal = CP_SSSMAIN(PP_SSSMAIN.Px).CuVal
      wk_ExStatus = CP_SSSMAIN(PP_SSSMAIN.Px).StatusF
      wk_SaveValue = CP_SSSMAIN(PP_SSSMAIN.Px).ExVal
      wk_SaveStatus = CP_SSSMAIN(PP_SSSMAIN.Px).ExStatus
   Else
      wk_ExVal = CP_SSSMAIN(PP_SSSMAIN.Px).ExVal
      wk_ExStatus = CP_SSSMAIN(PP_SSSMAIN.Px).ExStatus
      If wk_ExStatus = 0 Then Exit Sub
      wk_SaveValue = CP_SSSMAIN(PP_SSSMAIN.Px).CuVal
      wk_SaveStatus = CP_SSSMAIN(PP_SSSMAIN.Px).StatusF
   End If
   If wk_ExStatus = Cn_Status8 Then
      Call AE_ClearItm_SSSMAIN(False)
   Else
      PP_SSSMAIN.MaskMode = True
         CP_SSSMAIN(PP_SSSMAIN.Px).TpStr = AE_Format$(CP_SSSMAIN(PP_SSSMAIN.Px), wk_ExVal, 0, True)
         Call AE_CtSet(PP_SSSMAIN, PP_SSSMAIN.Px, CP_SSSMAIN(PP_SSSMAIN.Px).TpStr, CP_SSSMAIN(PP_SSSMAIN.Px).TypeA, True)
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(PP_SSSMAIN.Px), CL_SSSMAIN(PP_SSSMAIN.Px))
      PP_SSSMAIN.MaskMode = False
      AE_StatusCodeBar(PP_SSSMAIN.ScX) = ""
      AE_StatusBar(PP_SSSMAIN.ScX) = ""
      Call AE_SetCheck_SSSMAIN(wk_ExVal, wk_ExStatus, False)
   End If
   Call AE_CursorCurrent_SSSMAIN
   CP_SSSMAIN(PP_SSSMAIN.Px).ExVal = wk_SaveValue
   CP_SSSMAIN(PP_SSSMAIN.Px).ExStatus = wk_SaveStatus
End Sub

Function AE_UpdateC_SSSMAIN(ByVal pm_ExMode As Integer, ByVal pm_NextRec As Integer) As Integer 'Generated.
   If PP_SSSMAIN.Mode <> Cn_Mode2 And PP_SSSMAIN.InitValStatus <> PP_SSSMAIN.Mode And pm_NextRec <> 1000 Then
      If PP_SSSMAIN.ChOprtMode = 0 Then
         If AE_MsgLibrary(PP_SSSMAIN, "UpdateC") Then AE_UpdateC_SSSMAIN = Cn_CuCurrent: Exit Function
      End If
   End If
   PP_SSSMAIN.ChOprtMode = Cn_Mode4
   Call AE_ModeChange_SSSMAIN(PP_SSSMAIN.ChOprtMode)
   If PP_SSSMAIN.Mode = PP_SSSMAIN.ChOprtMode Then
      If pm_NextRec = 1000 Then
         Call AE_RecalcAll_SSSMAIN
      ElseIf pm_NextRec = True Then
         wk_Int = AE_NextCm_SSSMAIN(False)
      ElseIf pm_NextRec = False Then
         wk_Int = AE_Current_SSSMAIN()
      End If
      Call AE_ClearInitValStatus_SSSMAIN
      AE_UpdateC_SSSMAIN = Cn_CuInit
   Else
      Call AE_ModeChange_SSSMAIN(pm_ExMode)
      AE_UpdateC_SSSMAIN = Cn_CuCurrent
   End If
   PP_SSSMAIN.ChOprtMode = 0
End Function

Function AE_WindowProc_SSSMAIN(ByVal hw As Long, ByVal uMsg As Long, ByVal wParam As Long, ByVal lParam As Long) As Long 'Generated.
Const WM_CONTEXTMENU = &H7B
   If uMsg = WM_CONTEXTMENU Then
      AE_WindowProc_SSSMAIN = 1
   Else
      AE_WindowProc_SSSMAIN = CallWindowProc(PP_SSSMAIN.lpPrevWndProc, hw, uMsg, wParam, lParam)
   End If
End Function

Sub AE_WindowProcSet_SSSMAIN() 'Generated.
   If Cn_DebugMode Then Exit Sub
Dim wk_Tx As Integer
   For wk_Tx = 0 To PP_SSSMAIN.ControlsC - 1
      PP_SSSMAIN.lpPrevWndProc = SetWindowLong(AE_Controls(PP_SSSMAIN.CtB + wk_Tx).hwnd, GWL_WNDPROC, AddressOf AE_WindowProc_SSSMAIN)
   Next wk_Tx
   PP_SSSMAIN.lpPrevWndProc = SetWindowLong(AE_StatusBar(PP_SSSMAIN.ScX).hwnd, GWL_WNDPROC, AddressOf AE_WindowProc_SSSMAIN)
   PP_SSSMAIN.lpPrevWndProc = SetWindowLong(AE_ModeBar(PP_SSSMAIN.ScX).hwnd, GWL_WNDPROC, AddressOf AE_WindowProc_SSSMAIN)
End Sub

Sub DP_SSSMAIN_ENDTOKCD(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
Dim Wk_Index As Integer
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
' === 20110216 === UPDATE S TOM)Morimoto
'   V = AE_NormData(CP_SSSMAIN(5), AE_Val3(CP_SSSMAIN(5), CStr(DBItem)))
'   If CP_SSSMAIN(5).CuVal <> V Or CP_SSSMAIN(5).StatusC <> Cn_Status8 Then
'      CP_SSSMAIN(5).StatusC = Cn_Status6: CP_SSSMAIN(5).StatusF = Cn_Status6
'   ElseIf (IsNull(CP_SSSMAIN(5).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(5).StatusC <> Cn_Status8 Then
'      CP_SSSMAIN(5).StatusC = Cn_Status6: CP_SSSMAIN(5).StatusF = Cn_Status6
    Wk_Index = Get_Index("HD_ENDTOKCD", CQ_SSSMAIN)
   V = AE_NormData(CP_SSSMAIN(Wk_Index), AE_Val3(CP_SSSMAIN(Wk_Index), CStr(DBItem)))
   If CP_SSSMAIN(Wk_Index).CuVal <> V Or CP_SSSMAIN(Wk_Index).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(Wk_Index).StatusC = Cn_Status6: CP_SSSMAIN(Wk_Index).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(Wk_Index).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(Wk_Index).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(Wk_Index).StatusC = Cn_Status6: CP_SSSMAIN(Wk_Index).StatusF = Cn_Status6
' === 20110216 === UPDATE E
   End If
' === 20110216 === UPDATE S TOM)Morimoto
'   CP_SSSMAIN(5).CheckRtnCode = 0
'   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(5), CL_SSSMAIN(5))
'   CP_SSSMAIN(5).CuVal = V
'   CP_SSSMAIN(5).TpStr = AE_Format$(CP_SSSMAIN(5), CP_SSSMAIN(5).CuVal, 0, True)
'   Call AE_CtSet(PP_SSSMAIN, 5, CP_SSSMAIN(5).TpStr, CP_SSSMAIN(5).TypeA, False)
   CP_SSSMAIN(Wk_Index).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(Wk_Index), CL_SSSMAIN(Wk_Index))
   CP_SSSMAIN(Wk_Index).CuVal = V
   CP_SSSMAIN(Wk_Index).TpStr = AE_Format$(CP_SSSMAIN(Wk_Index), CP_SSSMAIN(Wk_Index).CuVal, 0, True)
   Call AE_CtSet(PP_SSSMAIN, Wk_Index, CP_SSSMAIN(Wk_Index).TpStr, CP_SSSMAIN(Wk_Index).TypeA, False)
' === 20110216 === UPDATE E
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_ENDTOKNM(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
Dim Wk_Index As Integer
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
' === 20110216 === UPDATE S TOM)Morimoto
'   V = AE_NormData(CP_SSSMAIN(6), AE_Val3(CP_SSSMAIN(6), CStr(DBItem)))
'   If CP_SSSMAIN(6).CuVal <> V Or CP_SSSMAIN(6).StatusC <> Cn_Status8 Then
'      CP_SSSMAIN(6).StatusC = Cn_Status6: CP_SSSMAIN(6).StatusF = Cn_Status6
'   ElseIf (IsNull(CP_SSSMAIN(6).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(6).StatusC <> Cn_Status8 Then
'      CP_SSSMAIN(6).StatusC = Cn_Status6: CP_SSSMAIN(6).StatusF = Cn_Status6
    Wk_Index = Get_Index("HD_ENDTOKNM", CQ_SSSMAIN)
   V = AE_NormData(CP_SSSMAIN(Wk_Index), AE_Val3(CP_SSSMAIN(Wk_Index), CStr(DBItem)))
   If CP_SSSMAIN(Wk_Index).CuVal <> V Or CP_SSSMAIN(Wk_Index).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(Wk_Index).StatusC = Cn_Status6: CP_SSSMAIN(Wk_Index).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(Wk_Index).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(Wk_Index).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(Wk_Index).StatusC = Cn_Status6: CP_SSSMAIN(Wk_Index).StatusF = Cn_Status6
' === 20110216 === UPDATE E
   End If
' === 20110216 === UPDATE S TOM)Morimoto
'   CP_SSSMAIN(6).CheckRtnCode = 0
'   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(6), CL_SSSMAIN(6))
'   CP_SSSMAIN(6).CuVal = V
'   CP_SSSMAIN(6).TpStr = AE_Format$(CP_SSSMAIN(6), CP_SSSMAIN(6).CuVal, 0, True)
'   Call AE_CtSet(PP_SSSMAIN, 6, CP_SSSMAIN(6).TpStr, CP_SSSMAIN(6).TypeA, False)
   CP_SSSMAIN(Wk_Index).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(Wk_Index), CL_SSSMAIN(Wk_Index))
   CP_SSSMAIN(Wk_Index).CuVal = V
   CP_SSSMAIN(Wk_Index).TpStr = AE_Format$(CP_SSSMAIN(Wk_Index), CP_SSSMAIN(Wk_Index).CuVal, 0, True)
   Call AE_CtSet(PP_SSSMAIN, Wk_Index, CP_SSSMAIN(Wk_Index).TpStr, CP_SSSMAIN(Wk_Index).TypeA, False)
' === 20110216 === UPDATE E
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_OPEID(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   V = AE_NormData(CP_SSSMAIN(0), AE_Val3(CP_SSSMAIN(0), CStr(DBItem)))
   If CP_SSSMAIN(0).CuVal <> V Or CP_SSSMAIN(0).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(0).StatusC = Cn_Status6: CP_SSSMAIN(0).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(0).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(0).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(0).StatusC = Cn_Status6: CP_SSSMAIN(0).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(0).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(0), CL_SSSMAIN(0))
   CP_SSSMAIN(0).CuVal = V
   CP_SSSMAIN(0).TpStr = AE_Format$(CP_SSSMAIN(0), CP_SSSMAIN(0).CuVal, 0, True)
   Call AE_CtSet(PP_SSSMAIN, 0, CP_SSSMAIN(0).TpStr, CP_SSSMAIN(0).TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_OPENM(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   V = AE_NormData(CP_SSSMAIN(1), AE_Val3(CP_SSSMAIN(1), CStr(DBItem)))
   If CP_SSSMAIN(1).CuVal <> V Or CP_SSSMAIN(1).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(1).StatusC = Cn_Status6: CP_SSSMAIN(1).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(1).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(1).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(1).StatusC = Cn_Status6: CP_SSSMAIN(1).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(1).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(1), CL_SSSMAIN(1))
   CP_SSSMAIN(1).CuVal = V
   CP_SSSMAIN(1).TpStr = AE_Format$(CP_SSSMAIN(1), CP_SSSMAIN(1).CuVal, 0, True)
   Call AE_CtSet(PP_SSSMAIN, 1, CP_SSSMAIN(1).TpStr, CP_SSSMAIN(1).TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_STTTOKCD(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
Dim Wk_Index As Integer
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
' === 20110216 === UPDATE S TOM)Morimoto
'   V = AE_NormData(CP_SSSMAIN(3), AE_Val3(CP_SSSMAIN(3), CStr(DBItem)))
'   If CP_SSSMAIN(3).CuVal <> V Or CP_SSSMAIN(3).StatusC <> Cn_Status8 Then
'      CP_SSSMAIN(3).StatusC = Cn_Status6: CP_SSSMAIN(3).StatusF = Cn_Status6
'   ElseIf (IsNull(CP_SSSMAIN(3).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(3).StatusC <> Cn_Status8 Then
'      CP_SSSMAIN(3).StatusC = Cn_Status6: CP_SSSMAIN(3).StatusF = Cn_Status6
    Wk_Index = Get_Index("HD_STTTOKCD", CQ_SSSMAIN)
   V = AE_NormData(CP_SSSMAIN(Wk_Index), AE_Val3(CP_SSSMAIN(Wk_Index), CStr(DBItem)))
   If CP_SSSMAIN(Wk_Index).CuVal <> V Or CP_SSSMAIN(Wk_Index).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(Wk_Index).StatusC = Cn_Status6: CP_SSSMAIN(Wk_Index).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(Wk_Index).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(Wk_Index).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(Wk_Index).StatusC = Cn_Status6: CP_SSSMAIN(Wk_Index).StatusF = Cn_Status6
' === 20110216 === UPDATE E
   End If
' === 20110216 === UPDATE S TOM)Morimoto
'   CP_SSSMAIN(3).CheckRtnCode = 0
'   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(3), CL_SSSMAIN(3))
'   CP_SSSMAIN(3).CuVal = V
'   CP_SSSMAIN(3).TpStr = AE_Format$(CP_SSSMAIN(3), CP_SSSMAIN(3).CuVal, 0, True)
'   Call AE_CtSet(PP_SSSMAIN, 3, CP_SSSMAIN(3).TpStr, CP_SSSMAIN(3).TypeA, False)
   CP_SSSMAIN(Wk_Index).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(Wk_Index), CL_SSSMAIN(Wk_Index))
   CP_SSSMAIN(Wk_Index).CuVal = V
   CP_SSSMAIN(Wk_Index).TpStr = AE_Format$(CP_SSSMAIN(Wk_Index), CP_SSSMAIN(Wk_Index).CuVal, 0, True)
   Call AE_CtSet(PP_SSSMAIN, Wk_Index, CP_SSSMAIN(Wk_Index).TpStr, CP_SSSMAIN(Wk_Index).TypeA, False)
' === 20110216 === UPDATE E
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_STTTOKNM(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
Dim Wk_Index As Integer
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
' === 20110216 === UPDATE S TOM)Morimoto
'   V = AE_NormData(CP_SSSMAIN(4), AE_Val3(CP_SSSMAIN(4), CStr(DBItem)))
'   If CP_SSSMAIN(4).CuVal <> V Or CP_SSSMAIN(4).StatusC <> Cn_Status8 Then
'      CP_SSSMAIN(4).StatusC = Cn_Status6: CP_SSSMAIN(4).StatusF = Cn_Status6
'   ElseIf (IsNull(CP_SSSMAIN(4).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(4).StatusC <> Cn_Status8 Then
'      CP_SSSMAIN(4).StatusC = Cn_Status6: CP_SSSMAIN(4).StatusF = Cn_Status6
    Wk_Index = Get_Index("HD_STTTOKNM", CQ_SSSMAIN)
   V = AE_NormData(CP_SSSMAIN(Wk_Index), AE_Val3(CP_SSSMAIN(Wk_Index), CStr(DBItem)))
   If CP_SSSMAIN(Wk_Index).CuVal <> V Or CP_SSSMAIN(Wk_Index).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(Wk_Index).StatusC = Cn_Status6: CP_SSSMAIN(Wk_Index).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(Wk_Index).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(Wk_Index).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(Wk_Index).StatusC = Cn_Status6: CP_SSSMAIN(Wk_Index).StatusF = Cn_Status6
' === 20110216 === UPDATE E
   End If
' === 20110216 === UPDATE S TOM)Morimoto
'   CP_SSSMAIN(4).CheckRtnCode = 0
'   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(4), CL_SSSMAIN(4))
'   CP_SSSMAIN(4).CuVal = V
'   CP_SSSMAIN(4).TpStr = AE_Format$(CP_SSSMAIN(4), CP_SSSMAIN(4).CuVal, 0, True)
'   Call AE_CtSet(PP_SSSMAIN, 4, CP_SSSMAIN(4).TpStr, CP_SSSMAIN(4).TypeA, False)
   CP_SSSMAIN(Wk_Index).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(Wk_Index), CL_SSSMAIN(Wk_Index))
   CP_SSSMAIN(Wk_Index).CuVal = V
   CP_SSSMAIN(Wk_Index).TpStr = AE_Format$(CP_SSSMAIN(Wk_Index), CP_SSSMAIN(Wk_Index).CuVal, 0, True)
   Call AE_CtSet(PP_SSSMAIN, Wk_Index, CP_SSSMAIN(Wk_Index).TpStr, CP_SSSMAIN(Wk_Index).TypeA, False)
' === 20110216 === UPDATE E
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_THSCD(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   V = AE_NormData(CP_SSSMAIN(2), AE_Val3(CP_SSSMAIN(2), CStr(DBItem)))
   If CP_SSSMAIN(2).CuVal <> V Or CP_SSSMAIN(2).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(2).StatusC = Cn_Status6: CP_SSSMAIN(2).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(2).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(2).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(2).StatusC = Cn_Status6: CP_SSSMAIN(2).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(2).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(2), CL_SSSMAIN(2))
   CP_SSSMAIN(2).CuVal = V
   CP_SSSMAIN(2).TpStr = AE_Format$(CP_SSSMAIN(2), CP_SSSMAIN(2).CuVal, 0, True)
   Call AE_CtSet(PP_SSSMAIN, 2, CP_SSSMAIN(2).TpStr, CP_SSSMAIN(2).TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Function RD_SSSMAIN_ENDTOKCD(ByVal De As Integer) 'Generated.
Dim st_Work$
Dim Wk_Index As Integer
' === 20110216 === UPDATE S TOM)Morimoto
'   If IsNull(CP_SSSMAIN(5).CuVal) Then
    Wk_Index = Get_Index("HD_ENDTOKCD", CQ_SSSMAIN)
   If IsNull(CP_SSSMAIN(Wk_Index).CuVal) Then
' === 20110216 === UPDATE E
      RD_SSSMAIN_ENDTOKCD = Space$(5)
   Else
' === 20110216 === UPDATE S TOM)Morimoto
'      st_Work$ = CStr(CP_SSSMAIN(5).CuVal)
      st_Work$ = CStr(CP_SSSMAIN(Wk_Index).CuVal)
' === 20110216 === UPDATE E
      If LenWid(st_Work$) < 5 Then
' === 20110216 === UPDATE S TOM)Morimoto
'         RD_SSSMAIN_ENDTOKCD = CStr(CP_SSSMAIN(5).CuVal) & Space$(5 - LenWid(st_Work$))
         RD_SSSMAIN_ENDTOKCD = CStr(CP_SSSMAIN(Wk_Index).CuVal) & Space$(5 - LenWid(st_Work$))
' === 20110216 === UPDATE E
      Else
' === 20110216 === UPDATE S TOM)Morimoto
'         RD_SSSMAIN_ENDTOKCD = CStr(CP_SSSMAIN(5).CuVal)
         RD_SSSMAIN_ENDTOKCD = CStr(CP_SSSMAIN(Wk_Index).CuVal)
' === 20110216 === UPDATE E
      End If
   End If
End Function

Function RD_SSSMAIN_ENDTOKNM(ByVal De As Integer) 'Generated.
Dim st_Work$
' === 20110216 === UPDATE S TOM)Morimoto
'   If IsNull(CP_SSSMAIN(6).CuVal) Then
   If IsNull(CP_SSSMAIN(6).CuVal) Then
' === 20110216 === UPDATE E
      RD_SSSMAIN_ENDTOKNM = Space$(40)
   Else
' === 20110216 === UPDATE S TOM)Morimoto
'      st_Work$ = CStr(CP_SSSMAIN(6).CuVal)
      st_Work$ = CStr(CP_SSSMAIN(6).CuVal)
' === 20110216 === UPDATE E
      If LenWid(st_Work$) < 40 Then
' === 20110216 === UPDATE S TOM)Morimoto
'         RD_SSSMAIN_ENDTOKNM = CStr(CP_SSSMAIN(6).CuVal) & Space$(40 - LenWid(st_Work$))
         RD_SSSMAIN_ENDTOKNM = CStr(CP_SSSMAIN(6).CuVal) & Space$(40 - LenWid(st_Work$))
' === 20110216 === UPDATE E
      Else
' === 20110216 === UPDATE S TOM)Morimoto
'         RD_SSSMAIN_ENDTOKNM = CStr(CP_SSSMAIN(6).CuVal)
         RD_SSSMAIN_ENDTOKNM = CStr(CP_SSSMAIN(6).CuVal)
' === 20110216 === UPDATE E
      End If
   End If
End Function

Function RD_SSSMAIN_OPEID(ByVal De As Integer) 'Generated.
Dim st_Work$
   If IsNull(CP_SSSMAIN(0).CuVal) Then
      RD_SSSMAIN_OPEID = Space$(6)
   Else
      st_Work$ = CStr(CP_SSSMAIN(0).CuVal)
      If LenWid(st_Work$) < 6 Then
         RD_SSSMAIN_OPEID = CStr(CP_SSSMAIN(0).CuVal) & Space$(6 - LenWid(st_Work$))
      Else
         RD_SSSMAIN_OPEID = CStr(CP_SSSMAIN(0).CuVal)
      End If
   End If
End Function

Function RD_SSSMAIN_OPENM(ByVal De As Integer) 'Generated.
Dim st_Work$
   If IsNull(CP_SSSMAIN(1).CuVal) Then
      RD_SSSMAIN_OPENM = Space$(20)
   Else
      st_Work$ = CStr(CP_SSSMAIN(1).CuVal)
      If LenWid(st_Work$) < 20 Then
         RD_SSSMAIN_OPENM = CStr(CP_SSSMAIN(1).CuVal) & Space$(20 - LenWid(st_Work$))
      Else
         RD_SSSMAIN_OPENM = CStr(CP_SSSMAIN(1).CuVal)
      End If
   End If
End Function

Function RD_SSSMAIN_STTTOKCD(ByVal De As Integer) 'Generated.
Dim st_Work$
' === 20110216 === UPDATE S TOM)Morimoto
'   If IsNull(CP_SSSMAIN(3).CuVal) Then
   If IsNull(CP_SSSMAIN(3).CuVal) Then
' === 20110216 === UPDATE E
      RD_SSSMAIN_STTTOKCD = Space$(5)
   Else
' === 20110216 === UPDATE S TOM)Morimoto
'      st_Work$ = CStr(CP_SSSMAIN(3).CuVal)
      st_Work$ = CStr(CP_SSSMAIN(3).CuVal)
' === 20110216 === UPDATE E
      If LenWid(st_Work$) < 5 Then
' === 20110216 === UPDATE S TOM)Morimoto
'         RD_SSSMAIN_STTTOKCD = CStr(CP_SSSMAIN(3).CuVal) & Space$(5 - LenWid(st_Work$))
         RD_SSSMAIN_STTTOKCD = CStr(CP_SSSMAIN(3).CuVal) & Space$(5 - LenWid(st_Work$))
' === 20110216 === UPDATE E
      Else
' === 20110216 === UPDATE S TOM)Morimoto
'         RD_SSSMAIN_STTTOKCD = CStr(CP_SSSMAIN(3).CuVal)
         RD_SSSMAIN_STTTOKCD = CStr(CP_SSSMAIN(3).CuVal)
' === 20110216 === UPDATE E
      End If
   End If
End Function

Function RD_SSSMAIN_STTTOKNM(ByVal De As Integer) 'Generated.
Dim st_Work$
' === 20110216 === UPDATE S TOM)Morimoto
'   If IsNull(CP_SSSMAIN(4).CuVal) Then
   If IsNull(CP_SSSMAIN(4).CuVal) Then
' === 20110216 === UPDATE E
      RD_SSSMAIN_STTTOKNM = Space$(40)
   Else
' === 20110216 === UPDATE S TOM)Morimoto
'      st_Work$ = CStr(CP_SSSMAIN(4).CuVal)
      st_Work$ = CStr(CP_SSSMAIN(4).CuVal)
' === 20110216 === UPDATE E
      If LenWid(st_Work$) < 40 Then
' === 20110216 === UPDATE S TOM)Morimoto
'         RD_SSSMAIN_STTTOKNM = CStr(CP_SSSMAIN(4).CuVal) & Space$(40 - LenWid(st_Work$))
         RD_SSSMAIN_STTTOKNM = CStr(CP_SSSMAIN(4).CuVal) & Space$(40 - LenWid(st_Work$))
' === 20110216 === UPDATE E
      Else
' === 20110216 === UPDATE S TOM)Morimoto
'         RD_SSSMAIN_STTTOKNM = CStr(CP_SSSMAIN(4).CuVal)
         RD_SSSMAIN_STTTOKNM = CStr(CP_SSSMAIN(4).CuVal)
' === 20110216 === UPDATE E
      End If
   End If
End Function

Function RD_SSSMAIN_THSCD(ByVal De As Integer) 'Generated.
Dim st_Work$
   If IsNull(CP_SSSMAIN(2).CuVal) Then
      RD_SSSMAIN_THSCD = Space$(1)
   Else
      st_Work$ = CStr(CP_SSSMAIN(2).CuVal)
      If LenWid(st_Work$) < 1 Then
         RD_SSSMAIN_THSCD = CStr(CP_SSSMAIN(2).CuVal) & Space$(1 - LenWid(st_Work$))
      Else
         RD_SSSMAIN_THSCD = CStr(CP_SSSMAIN(2).CuVal)
      End If
   End If
End Function

' === 20110216 === INSERT S TOM)Morimoto
Private Function Get_Index(ByVal strctrlname As String, ByRef strCQ() As String) As Integer
    Dim I As Integer
    Dim flg As Boolean
    For I = 0 To UBound(strCQ)
        If strCQ(I) = strctrlname Then
            flg = True
            Exit For
        End If
    Next
    If flg Then
        Get_Index = I
    Else
        Get_Index = -1
    End If
End Function
Public Function AE_Check_SSSMAIN_FRNKB(ByVal CC_NewVal As Variant, ByVal pm_Status As Integer, ByVal pm_MoveCursor As Boolean, ByVal pm_HandIn As Boolean)
Dim wk_SaveMask As Boolean
Dim RC_ErrorC As Integer
Dim wk_RecalcSw As Boolean
Dim wk_Equal As Boolean
Dim Wk_Index As Integer
    Wk_Index = Get_Index("HD_FRNKB", CQ_SSSMAIN)
   With CP_SSSMAIN(Wk_Index)
   Dim ex_CheckRtnCode As Integer
   ex_CheckRtnCode = .CheckRtnCode
   If .FormatClass = Cn_Code And .FormatChr <> "" And Not IsNull(CC_NewVal) Then CC_NewVal = AE_FormatC$(CP_SSSMAIN(Wk_Index), CC_NewVal)
   PP_SSSMAIN.SaveXV = .ExVal
   PP_SSSMAIN.SaveExStatus = .ExStatus
   .ExVal = .CuVal
   PP_SSSMAIN.SaveCV = .CuVal
   .ExStatus = .StatusF
   If IsNull(CC_NewVal) Then
      CC_NewVal = Space$(.MaxLength)
   ElseIf .Alignment = 1 And LenWid(CC_NewVal) < .MaxLength Then
      CC_NewVal = Space$(.MaxLength - LenWid(CC_NewVal)) & CC_NewVal
   End If
   .CuVal = CC_NewVal
   If Not PP_SSSMAIN.RecalcMode Then AE_StatusBar(PP_SSSMAIN.ScX) = "": AE_StatusCodeBar(PP_SSSMAIN.ScX) = ""
   CC_NewVal = AE_NullCnv2_SSSMAIN(CC_NewVal)
   If (.CheckRtnCode <> 0) Then
      Ck_Error = .CheckRtnCode
      Ck_Error = FRNKB_Check(CC_NewVal)
   Else
      Ck_Error = FRNKB_Check(CC_NewVal)
   End If
   .CheckRtnCode = AE_ErrorToInteger(Ck_Error)
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
      .CuVal = CC_NewVal
      .TpStr = AE_Format$(CP_SSSMAIN(Wk_Index), .CuVal, 0, True)
      Call AE_CtSet(PP_SSSMAIN, Wk_Index, .TpStr, .TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
   If AE_ErrorToInteger(Ck_Error) = 0 Or (pm_Status >= Cn_Status7 And PP_SSSMAIN.CheckErrNglct) Then
      If AE_IsNull_SSSMAIN(PP_SSSMAIN.SaveCV) And AE_IsNull_SSSMAIN(CC_NewVal) Or AE_NullCnv2_SSSMAIN(PP_SSSMAIN.SaveCV) = AE_NullCnv2_SSSMAIN(CC_NewVal) Then
         wk_Equal = True
      Else
         wk_Equal = False
         Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(Wk_Index))
      End If
      If wk_Equal And ex_CheckRtnCode = 0 And pm_Status >= Cn_Status6 And pm_Status = .StatusC And Not PP_SSSMAIN.RecalcMode Then
         .ExVal = PP_SSSMAIN.SaveXV
         .ExStatus = PP_SSSMAIN.SaveExStatus
         Call AE_Later_SSSMAIN
         If pm_MoveCursor Then
            If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
         End If
      Else
         If pm_Status <> 0 Then .StatusC = pm_Status
         If pm_Status <> 0 Then .StatusF = pm_Status
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(Wk_Index), CL_SSSMAIN(Wk_Index))
         If Not PP_SSSMAIN.RecalcMode Then
            If PP_SSSMAIN.ErrorC = 0 Or wk_RecalcSw = False Then
               Call AE_Later_SSSMAIN
               If pm_MoveCursor Then
                  If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
               End If
            Else
               If pm_MoveCursor Then
                  If AE_CursorToError_SSSMAIN() = False Then
                     Call AE_Later_SSSMAIN
                     If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
                  End If
               End If
            End If
         End If
      End If
   Else
      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(Wk_Index))
      Call AE_CheckSub2_SSSMAIN(Wk_Index, Wk_Index, True)
      If AE_ErrorToInteger(Ck_Error) >= 0 Then
         PP_SSSMAIN.ErrorC = PP_SSSMAIN.ErrorC + 1
         wk_Bool = SSSMAIN_ErrorMsg(Ck_Error)
      Else
         wk_Bool = AE_MsgLibrary(PP_SSSMAIN, "PreCheck" & CStr(-Ck_Error))
      End If
   End If
   End With
End Function
'データ抽出
Public Sub AE_Execute(ByVal strTHSCD As String, ByVal strFRNKB As String, ByVal strSTTTOKCD As String, ByVal strENDTOKCD As String)
    Dim objrst As Object
    Dim intret As Integer
    Dim strFile As String
    Dim objfso As New FileSystemObject
    Dim objstream As TextStream
    Dim strSQL As String
    Dim I As Integer
    Dim strdmy() As String
    Dim strSQL1 As String
    Dim lngcnt As Long
    Dim J As Long
    On Error GoTo err_AE_Execute
    '実行問い合わせ
    If DSP_MsgBox("1", Mid(gc_strMsgTHSFP61_I_001, 2), 0) = vbNo Then
        DSP_MsgBox "1", Mid(gc_strMsgTHSFP61_I_004, 2), 0 '実行を中断します。
        Exit Sub
    End If
    'ファイル問い合わせ
    If FR_SSSMAIN.selectFile(strFile) = False Then
        DSP_MsgBox "1", Mid(gc_strMsgTHSFP61_I_004, 2), 0 '実行を中断します。
        Exit Sub
    Else
        If objfso.FileExists(strFile) Then
            If DSP_MsgBox("1", Mid(gc_strMsgTHSFP61_I_005, 2), 0) = vbNo Then 'ファイルが存在します。上書きしますか?
                'フォルダがありません。
                Exit Sub
            End If
        End If
    End If
    FR_SSSMAIN.formenabled False
    'DB接続
    Call CF_Ora_USR1_Open       'USR1
    'SQL文
    strSQL = vbNullString
    strSQL = strSQL & "  FROM "
    strSQL = strSQL & " (SELECT ZZ.TORMSTKB"
    strSQL = strSQL & "           ,CASE WHEN AA.THSCD = BB.THSCD THEN "
    strSQL = strSQL & "               AA.THSCD "
    strSQL = strSQL & "            ELSE  "
    strSQL = strSQL & "            CASE WHEN AA.THSCD IS NULL OR  BB.THSCD IS NULL THEN"
    strSQL = strSQL & "                   NVL(NVL(AA.THSCD,BB.THSCD),' ') "
    strSQL = strSQL & "            ELSE "
    strSQL = strSQL & "                   ' ' "
    strSQL = strSQL & "               END  "
    strSQL = strSQL & "            END THSCD"
    strSQL = strSQL & "           ,NVL(AA.FRNKB     , '0'                  ) FRNKB   "
    strSQL = strSQL & "           ,NVL(AA.TOKCD     , BB.SIRCD             ) TOKCD   "
    strSQL = strSQL & "           ,NVL(AA.TOKNMA    , BB.SIRNMA            ) TOKNMA  "
    strSQL = strSQL & "           ,NVL(AA.TOKNMB    , BB.SIRNMB            ) TOKNMB  "
    strSQL = strSQL & "           ,NVL(AA.TOKNMC    , BB.SIRNMC            ) TOKNMC  "
    strSQL = strSQL & "           ,NVL(AA.TOKNMD    , BB.SIRNMD            ) TOKNMD  "
    strSQL = strSQL & "           ,NVL(AA.TOKNK     , BB.SIRNK             ) TOKNK   "
    strSQL = strSQL & "           ,NVL(AA.TOKRN     , BB.SIRRN             ) TOKRN   "
    strSQL = strSQL & "           ,NVL(AA.TOKRNNK   , BB.SIRRNNK           ) TOKRNNK "
    strSQL = strSQL & "           ,NVL(AA.TOKZP     , BB.SIRZP             ) TOKZP   "
    strSQL = strSQL & "           ,NVL(AA.TOKADA    , BB.SIRADA            ) TOKADA  "
    strSQL = strSQL & "           ,NVL(AA.TOKADB    , BB.SIRADB            ) TOKADB  "
    strSQL = strSQL & "           ,NVL(AA.TOKADC    , BB.SIRADC            ) TOKADC  "
    strSQL = strSQL & "           ,NVL(AA.TOKTL     , BB.SIRTL             ) TOKTL   "
    strSQL = strSQL & "           ,NVL(AA.TOKFX     , BB.SIRFX             ) TOKFX   "
    strSQL = strSQL & "           ,NVL(AA.TOKBOSNM  , BB.SIRBOSNM          ) TOKBOSNM"
    strSQL = strSQL & "           ,NVL(AA.TOKSEICD  , ' '                  ) TOKSEICD"
    strSQL = strSQL & "           ,NVL(BB.SIRSHACD  , ' '                  ) SIRSHACD"
    strSQL = strSQL & "           ,NVL(AA.TOKTANNM  , ' '                  ) TOKTANNM"
    strSQL = strSQL & "           ,NVL(AA.TOKMLAD   , ' '                  ) TOKMLAD "
    strSQL = strSQL & "           ,NVL(AA.TANCD     , ' '                  ) ATANCD  "
    strSQL = strSQL & "           ,NVL(AA.TANNM     , ' '                  ) ATANNM  "
    strSQL = strSQL & "           ,NVL(BB.SIRCTANM  , ' '                  ) SIRCTANM"
    strSQL = strSQL & "           ,NVL(BB.SIRMLAD   , ' '                  ) SIRMLAD "
    strSQL = strSQL & "           ,NVL(BB.TANCD     , ' '                  ) BTANCD  "
    strSQL = strSQL & "           ,NVL(BB.TANNM     , ' '                  ) BTANNM  "
    strSQL = strSQL & "           ,NVL(AA.TUKKB     , ' '                  ) TUKKB   "
    strSQL = strSQL & "           ,NVL(AA.SIMUKE    , ' '                  ) SIMUKE  "
    strSQL = strSQL & "           ,NVL(AA.MAINHSCD  , ' '                  ) MAINHSCD"
    strSQL = strSQL & "           ,NVL(AA.GYOSHU    , BB.GYOSHU            ) GYOSHU  "
    strSQL = strSQL & "           ,NVL(AA.CHIIKI    , BB.CHIIKI            ) CHIIKI  "
    strSQL = strSQL & "           ,NVL(AA.BINCD     , ' '                  ) BINCD   "
    strSQL = strSQL & "           ,NVL(AA.TGRPCD    , BB.SGRPCD            ) TGRPCD  "
    strSQL = strSQL & "           ,NVL(AA.OLDTOKCD  , BB.OLDSIRCD          ) OLDTOKCD"
    strSQL = strSQL & "           ,NVL(AA.OLTGRPCD  , BB.OLSGRPCD          ) OLTGRPCD"
    strSQL = strSQL & "           ,NVL(AA.KIGYOCD   , ' '                  ) KIGYOCD "
    strSQL = strSQL & "           ,NVL(AA.KGYEDACD  , ' '                  ) KGYEDACD"
    strSQL = strSQL & "           ,DECODE(AA.LMTKN  , NULL, ' ', AA.LMTKN  ) LMTKN   "
    strSQL = strSQL & "           ,NVL(AA.TOKCLANM  , ' '                  ) TOKCLANM"
    strSQL = strSQL & "           ,NVL(AA.KAKZUKE   , ' '                  ) KAKZUKE "
    strSQL = strSQL & "           ,NVL(AA.TOKSMEKB  , ' '                  ) TOKSMEKB"
    strSQL = strSQL & "           ,NVL(AA.TOKSMEDT  , ' '                  ) TOKSMEDT"
    strSQL = strSQL & "           ,NVL(AA.TOKSMEDD  , ' '                  ) TOKSMEDD"
    strSQL = strSQL & "           ,NVL(AA.TOKKESCC  , ' '                  ) TOKKESCC"
    strSQL = strSQL & "           ,NVL(AA.TOKSDWKB  , ' '                  ) TOKSDWKB"
    strSQL = strSQL & "           ,NVL(AA.TOKKDWKB  , ' '                  ) TOKKDWKB"
    strSQL = strSQL & "           ,NVL(AA.TOKSMECC  , ' '                  ) TOKSMECC"
    strSQL = strSQL & "           ,NVL(AA.TOKKESDD  , ' '                  ) TOKKESDD"
    strSQL = strSQL & "           ,NVL(BB.SIRSMEKB  , ' '                  ) SIRSMEKB"
    strSQL = strSQL & "           ,NVL(BB.SIRSMEDT  , ' '                  ) SIRSMEDT"
    strSQL = strSQL & "           ,NVL(BB.SIRSMEDD  , ' '                  ) SIRSMEDD"
    strSQL = strSQL & "           ,NVL(BB.SIRKESCC  , ' '                  ) SIRKESCC"
    strSQL = strSQL & "           ,NVL(BB.SIRSDWKB  , ' '                  ) SIRSDWKB"
    strSQL = strSQL & "           ,NVL(BB.SIRKDEKB  , ' '                  ) SIRKDEKB"
    strSQL = strSQL & "           ,NVL(BB.SIRSMECC  , ' '                  ) SIRSMECC"
    strSQL = strSQL & "           ,NVL(BB.SIRKESDD  , ' '                  ) SIRKESDD"
    strSQL = strSQL & "           ,NVL(AA.BNKCD     , ' '                  ) ABNKCD  "
    strSQL = strSQL & "           ,NVL(AA.YKNKB     , ' '                  ) AYKNKB  "
    strSQL = strSQL & "           ,NVL(AA.KOZNO     , ' '                  ) AKOZNO  "
    strSQL = strSQL & "           ,NVL(AA.HMEIGI    , ' '                  ) AHMEIGI "
    strSQL = strSQL & "           ,NVL(AA.SHAKB     , ' '                  ) SHAKB   "
    strSQL = strSQL & "           ,DECODE(AA.TEGSHKN, NULL, ' ', AA.TEGSHKN) ATEGSHKN"
    strSQL = strSQL & "           ,DECODE(AA.TEGRT  , NULL, ' ', AA.TEGRT  ) TEGRT   "
    strSQL = strSQL & "           ,DECODE(AA.NYUDD  , NULL, ' ', AA.NYUDD  ) NYUDD   "
    strSQL = strSQL & "           ,NVL(AA.FCTCMCD   , ' '                  ) AFCTCMCD"
    strSQL = strSQL & "           ,NVL(AA.TEGSHBS   , ' '                  ) ATEGSHBS"
    strSQL = strSQL & "           ,NVL(AA.HTSUKB    , ' '                  ) AHTSUKB "
    strSQL = strSQL & "           ,NVL(BB.BNKCD     , ' '                  ) BBNKCD  "
    strSQL = strSQL & "           ,NVL(BB.YKNKB     , ' '                  ) BYKNKB  "
    strSQL = strSQL & "           ,NVL(BB.KOZNO     , ' '                  ) BKOZNO  "
    strSQL = strSQL & "           ,NVL(BB.HMEIGI    , ' '                  ) BHMEIGI "
    strSQL = strSQL & "           ,NVL(BB.SHJAKB    , ' '                  ) SHJAKB  "
    strSQL = strSQL & "           ,NVL(BB.SHJBKB    , ' '                  ) SHJBKB  "
    strSQL = strSQL & "           ,NVL(BB.SHJCKB    , ' '                  ) SHJCKB  "
    strSQL = strSQL & "           ,NVL(BB.TEGSHBS   , ' '                  ) BTEGSHBS"
    strSQL = strSQL & "           ,NVL(BB.HTSUKB    , ' '                  ) BHTSUKB "
    strSQL = strSQL & "           ,DECODE(BB.TEGSHKN, NULL, ' ', BB.TEGSHKN) BTEGSHKN"
    strSQL = strSQL & "           ,NVL(BB.FCTCMCD   , ' '                  ) BFCTCMCD"
    strSQL = strSQL & "           ,NVL(BB.SHATKMDT  , ' '                  ) SHATKMDT"
    strSQL = strSQL & "        FROM (SELECT * FROM TOKMTA WHERE DATKB = '1' "
    If strTHSCD = "0" Then
        strSQL = strSQL & "        AND TOKCD = TGRPCD"
    End If
    strSQL = strSQL & "             ) AA ,"
    strSQL = strSQL & "             (SELECT * FROM SIRMTA WHERE DATKB = '1' "
    If strTHSCD = "0" Then
        strSQL = strSQL & "        AND SIRCD = SGRPCD"
    End If
    strSQL = strSQL & "             ) BB ,"
    strSQL = strSQL & "     (SELECT TORCD"
    strSQL = strSQL & "               ,SUM(TORMSTKB) TORMSTKB"
    strSQL = strSQL & "           FROM (SELECT TOKCD TORCD"
    strSQL = strSQL & "                       ,'1'   TORMSTKB"
    strSQL = strSQL & "                   FROM TOKMTA"
    strSQL = strSQL & "                  WHERE DATKB = '1'"
' === 20110219 === INSERT TOM)Morimoto 代表会社対応
    If strTHSCD = "0" Then
        strSQL = strSQL & "        AND TOKCD = TGRPCD"
    End If
' === 20110219 === INSERT TOM)Morimoto E
    strSQL = strSQL & "                  UNION ALL"
    strSQL = strSQL & "                 SELECT SIRCD TORCD"
    strSQL = strSQL & "                       ,'2'   TORMSTKB"
    strSQL = strSQL & "                   FROM SIRMTA"
    strSQL = strSQL & "                  WHERE DATKB = '1'"
' === 20110219 === INSERT TOM)Morimoto 代表会社対応
    If strTHSCD = "0" Then
        strSQL = strSQL & "        AND SIRCD = SGRPCD"
    End If
' === 20110219 === INSERT TOM)Morimoto E
    strSQL = strSQL & "                )"
    strSQL = strSQL & "          GROUP BY TORCD"
    strSQL = strSQL & "        ) ZZ "
    strSQL = strSQL & "      WHERE ZZ.TORCD = AA.TOKCD (+)"
    strSQL = strSQL & "        AND ZZ.TORCD = BB.SIRCD (+)"
'    If strTHSCD = "0" Then
'        strSQL = strSQL & "        AND AA.TOKCD = AA.TGRPCD"
'        strSQL = strSQL & "        AND BB.SIRCD = BB.SGRPCD"
'    End If
    strSQL = strSQL & " )T1,"
    strSQL = strSQL & "       TOKMTA M1 ,"
    strSQL = strSQL & "       SIRMTA M2 ,"
    strSQL = strSQL & "      (SELECT MEICDA"
    strSQL = strSQL & "             ,MEINMA"
    strSQL = strSQL & "         FROM MEIMTA"
    strSQL = strSQL & "        WHERE KEYCD = '014'"
    strSQL = strSQL & "          AND DATKB = '1'"
    strSQL = strSQL & "      ) M3 ,"
    strSQL = strSQL & "       NHSMTA M4 ,"
    strSQL = strSQL & "      (SELECT MEICDA"
    strSQL = strSQL & "             ,MEINMA"
    strSQL = strSQL & "         FROM MEIMTA"
    strSQL = strSQL & "        WHERE KEYCD = '003'"
    strSQL = strSQL & "          AND DATKB = '1'"
    strSQL = strSQL & "      ) M5 ,"
    strSQL = strSQL & "      (SELECT MEICDA"
    strSQL = strSQL & "             ,MEINMA"
    strSQL = strSQL & "         FROM MEIMTA"
    strSQL = strSQL & "        WHERE KEYCD = '004'"
    strSQL = strSQL & "          AND DATKB = '1'"
    strSQL = strSQL & "      ) M6 ,"
    strSQL = strSQL & "      (SELECT MEICDA"
    strSQL = strSQL & "             ,MEINMA"
    strSQL = strSQL & "         FROM MEIMTA"
    strSQL = strSQL & "        WHERE KEYCD = '002'"
    strSQL = strSQL & "          AND DATKB = '1'"
    strSQL = strSQL & "      ) M7 ,"
    strSQL = strSQL & "        BNKMTA M8 ,"
    strSQL = strSQL & "        BNKMTA M9"
    strSQL = strSQL & " WHERE T1.TOKSEICD = M1.TOKCD (+)"
    strSQL = strSQL & "   AND T1.SIRSHACD = M2.SIRCD (+)"
    strSQL = strSQL & "   AND T1.SIMUKE   = M3.MEICDA(+)"
    strSQL = strSQL & "   AND T1.MAINHSCD = M4.NHSCD (+)"
    strSQL = strSQL & "   AND T1.GYOSHU   = M5.MEICDA(+)"
    strSQL = strSQL & "   AND T1.CHIIKI   = M6.MEICDA(+)"
    strSQL = strSQL & "   AND T1.BINCD    = M7.MEICDA(+)"
    strSQL = strSQL & "   AND T1.ABNKCD   = M8.BNKCD (+)"
    strSQL = strSQL & "   AND T1.BBNKCD   = M9.BNKCD (+)"
    Select Case strTHSCD
    Case "1", "2", "3"
    strSQL = strSQL & "   AND T1.THSCD    = '" & strTHSCD & "'"
    Case "0"
    End Select
    If strTHSCD <> "2" And strFRNKB <> "9" Then
        strSQL = strSQL & "   AND T1.FRNKB    = ':FRNKB'"
    End If
    If Len(Trim(strSTTTOKCD)) > 0 Then
        strSQL = strSQL & "   AND T1.TOKCD >= '" & strSTTTOKCD & "'"
    End If
    If Len(Trim(strENDTOKCD)) > 0 Then
        strSQL = strSQL & "   AND T1.TOKCD <= '" & strENDTOKCD & "ﾝ'"
    End If
    strSQL = strSQL & " ORDER BY T1.TOKCD"
    strSQL = Replace(strSQL, ":FRNKB", strFRNKB)
    'SQL文発行(カウント抽出)
    If get_select("select count(*) " & strSQL, objrst) Then
    Else
        DSP_MsgBox "2", Mid(gc_strMsgTHSFP61_E_010, 2), 9  'DBエラー
        DB_ORA_Close
        Set objrst = Nothing
        Set objfso = Nothing
        FR_SSSMAIN.formenabled True
        Exit Sub
    End If
    If objrst.Fields(0).Value = 0 Then
        DSP_MsgBox "2", Mid(gc_strMsgTHSFP61_E_009, 2), 0 'データ無し
        FR_SSSMAIN.formenabled True
        objrst.Close
        DB_ORA_Close
        Set objrst = Nothing
        Set objfso = Nothing
        Exit Sub
    End If
    lngcnt = objrst.Fields(0).Value
    objrst.Close
    strSQL1 = vbNullString
    strSQL1 = strSQL1 & "SELECT "
    strSQL1 = strSQL1 & "       TORMSTKB"
    strSQL1 = strSQL1 & "      ,T1.THSCD                      ""取引先分類"""
    strSQL1 = strSQL1 & "      ,T1.FRNKB                      ""海外取引区分"""
    strSQL1 = strSQL1 & "      ,T1.TOKCD                      ""取引先ｺｰﾄﾞ"""
    strSQL1 = strSQL1 & "      ,T1.TOKNMA                     ""名称１"""
    strSQL1 = strSQL1 & "      ,T1.TOKNMB                     ""名称２"""
    strSQL1 = strSQL1 & "      ,T1.TOKNMC                     ""名称(半角)１"""
    strSQL1 = strSQL1 & "      ,T1.TOKNMD                     ""名称(半角)２"""
    strSQL1 = strSQL1 & "      ,T1.TOKNK                      ""カナ"""
    strSQL1 = strSQL1 & "      ,T1.TOKRN                      ""略称"""
    strSQL1 = strSQL1 & "      ,T1.TOKRNNK                    ""略称カナ"""
    strSQL1 = strSQL1 & "      ,T1.TOKZP                      ""*郵便番号"""
    strSQL1 = strSQL1 & "      ,T1.TOKADA                     ""*住所１"""
    strSQL1 = strSQL1 & "      ,T1.TOKADB                     ""*住所２"""
    strSQL1 = strSQL1 & "      ,T1.TOKADC                     ""*住所３"""
    strSQL1 = strSQL1 & "      ,T1.TOKTL                      ""*TEL(電話番号）"""
    strSQL1 = strSQL1 & "      ,T1.TOKFX                      ""*FAX(FAX番号)"""
    strSQL1 = strSQL1 & "      ,T1.TOKBOSNM                   ""*代表者名"""
    strSQL1 = strSQL1 & "      ,T1.TOKSEICD                   ""請求先（コード）"""
    strSQL1 = strSQL1 & "      ,NVL(M1.TOKNMA, ' ')           ""請求先（名称）"""
    strSQL1 = strSQL1 & "      ,T1.SIRSHACD                   ""支払先（コード）"""
    strSQL1 = strSQL1 & "      ,NVL(M2.SIRNMA, ' ')           ""支払先（名称）"""
    strSQL1 = strSQL1 & "      ,T1.TOKTANNM                   ""*得意先御担当者"""
    strSQL1 = strSQL1 & "      ,T1.TOKMLAD                    ""*得意先ﾒｰﾙｱﾄﾞﾚｽ"""
    strSQL1 = strSQL1 & "      ,T1.ATANCD                     ""*営業担当者(得意先)(コード)"""
    strSQL1 = strSQL1 & "      ,T1.ATANNM                     ""営業担当者(得意先)(名称)"""
    strSQL1 = strSQL1 & "      ,T1.SIRCTANM                   ""*仕入先御担当者"""
    strSQL1 = strSQL1 & "      ,T1.SIRMLAD                    ""*仕入先ﾒｰﾙｱﾄﾞﾚｽ"""
    strSQL1 = strSQL1 & "      ,T1.BTANCD                     ""*担当者(仕入先)(コード)"""
    strSQL1 = strSQL1 & "      ,T1.BTANNM                     ""担当者(仕入先)(名称)"""
    strSQL1 = strSQL1 & "      ,T1.TUKKB                      ""通貨区分(コード)"""
    strSQL1 = strSQL1 & "      ,NVL(M3.MEINMA, ' ')           ""仕向地（名称）"""
    strSQL1 = strSQL1 & "      ,T1.MAINHSCD                   ""代表納入先（コード）"""
    strSQL1 = strSQL1 & "      ,NVL(M4.NHSNMA, ' ')           ""代表納入先（名称）"""
    strSQL1 = strSQL1 & "      ,T1.GYOSHU                     ""*業種（コード）"""
    strSQL1 = strSQL1 & "      ,NVL(M5.MEINMA, ' ')           ""業種（名称）"""
    strSQL1 = strSQL1 & "      ,T1.CHIIKI                     ""*地域（コード）"""
    strSQL1 = strSQL1 & "      ,NVL(M6.MEINMA, ' ')           ""地域（名称）"""
    strSQL1 = strSQL1 & "      ,T1.BINCD                      ""*便区分(コード)"""
    strSQL1 = strSQL1 & "      ,NVL(M7.MEINMA, ' ')           ""便区分（名称）"""
    strSQL1 = strSQL1 & "      ,T1.TGRPCD                     ""代表会社ｺｰﾄﾞ"""
    strSQL1 = strSQL1 & "      ,T1.OLDTOKCD                   ""旧取引先コード"""
    strSQL1 = strSQL1 & "      ,T1.OLTGRPCD                   ""旧代表会社ｺｰﾄﾞ"""
    strSQL1 = strSQL1 & "      ,T1.KIGYOCD                    ""統一企業コード(識別)"""
    strSQL1 = strSQL1 & "      ,T1.KGYEDACD                   ""統一企業コード(枝番)"""
    strSQL1 = strSQL1 & "      ,T1.LMTKN                      ""与信限度額"""
    strSQL1 = strSQL1 & "      ,T1.TOKCLANM                   ""限度額設定日"""
    strSQL1 = strSQL1 & "      ,T1.KAKZUKE                    ""格付"""
    strSQL1 = strSQL1 & "      ,T1.TOKSMEKB                   ""得意先締区分"""
    strSQL1 = strSQL1 & "      ,T1.TOKSMEDT                   ""得意先請求締日付"""
    strSQL1 = strSQL1 & "      ,T1.TOKSMEDD                   ""得意先締め初期日付"""
    strSQL1 = strSQL1 & "      ,T1.TOKKESCC                   ""得意先回収ｻｲｸﾙ"""
    strSQL1 = strSQL1 & "      ,T1.TOKSDWKB                   ""得意先締め曜日"""
    strSQL1 = strSQL1 & "      ,T1.TOKKDWKB                   ""得意先回収曜日"""
    strSQL1 = strSQL1 & "      ,T1.TOKSMECC                   ""得意先締めｻｲｸﾙ"""
    strSQL1 = strSQL1 & "      ,T1.TOKKESDD                   ""得意先回収日"""
    strSQL1 = strSQL1 & "      ,T1.SIRSMEKB                   ""仕入先締区分"""
    strSQL1 = strSQL1 & "      ,T1.SIRSMEDT                   ""仕入先支払締日付"""
    strSQL1 = strSQL1 & "      ,T1.SIRSMEDD                   ""仕入先締め初期日付"""
    strSQL1 = strSQL1 & "      ,T1.SIRKESCC                   ""仕入先支払ｻｲｸﾙ"""
    strSQL1 = strSQL1 & "      ,T1.SIRSDWKB                   ""仕入先締め曜日"""
    strSQL1 = strSQL1 & "      ,T1.SIRKDEKB                   ""仕入先支払曜日"""
    strSQL1 = strSQL1 & "      ,T1.SIRSMECC                   ""仕入先締めｻｲｸﾙ"""
    strSQL1 = strSQL1 & "      ,T1.SIRKESDD                   ""仕入先支払日"""
    strSQL1 = strSQL1 & "      ,T1.ABNKCD                     ""得意先銀行ｺｰﾄﾞ"""
    strSQL1 = strSQL1 & "      ,NVL(M8.BNKNM , ' ')           ""得意先銀行(名称)"""
    strSQL1 = strSQL1 & "      ,NVL(M8.STNNM , ' ')           ""得意先銀行(支店名)"""
    strSQL1 = strSQL1 & "      ,T1.AYKNKB                     ""得意先預金種別"""
    strSQL1 = strSQL1 & "      ,T1.AKOZNO                     ""得意先口座番号"""
    strSQL1 = strSQL1 & "      ,T1.AHMEIGI                    ""得意先振込名義"""
    strSQL1 = strSQL1 & "      ,T1.SHAKB                      ""得意先支払区分"""
    strSQL1 = strSQL1 & "      ,T1.ATEGSHKN                   ""得意先手形支払金額"""
    strSQL1 = strSQL1 & "      ,T1.TEGRT                      ""得意先手形比率"""
    strSQL1 = strSQL1 & "      ,T1.NYUDD                      ""得意先サイト"""
    strSQL1 = strSQL1 & "      ,T1.AFCTCMCD                   ""得意先ﾌｧｸﾀﾘﾝｸﾞ会社ｺｰﾄﾞ"""
    strSQL1 = strSQL1 & "      ,T1.ATEGSHBS                   ""得意先手形支払場所"""
    strSQL1 = strSQL1 & "      ,T1.AHTSUKB                    ""得意先振込手数料負担区分"""
    strSQL1 = strSQL1 & "      ,T1.BBNKCD                     ""仕入先銀行ｺｰﾄﾞ"""
    strSQL1 = strSQL1 & "      ,NVL(M9.BNKNM , ' ')           ""仕入先銀行(名称)"""
    strSQL1 = strSQL1 & "      ,NVL(M9.STNNM , ' ')           ""仕入先銀行(支店名)"""
    strSQL1 = strSQL1 & "      ,T1.BYKNKB                     ""仕入先預金種別"""
    strSQL1 = strSQL1 & "      ,T1.BKOZNO                     ""仕入先口座番号"""
    strSQL1 = strSQL1 & "      ,T1.BHMEIGI                    ""仕入先振込名義"""
    strSQL1 = strSQL1 & "      ,T1.SHJAKB                     ""仕入先支払条件１"""
    strSQL1 = strSQL1 & "      ,T1.SHJBKB                     ""仕入先支払条件２"""
    strSQL1 = strSQL1 & "      ,T1.SHJCKB                     ""仕入先支払条件３"""
    strSQL1 = strSQL1 & "      ,T1.BTEGSHBS                   ""仕入先手形支払場所"""
    strSQL1 = strSQL1 & "      ,T1.BHTSUKB                    ""仕入先振込手数料負担区分"""
    strSQL1 = strSQL1 & "      ,T1.BTEGSHKN                   ""仕入先手形支払金額"""
    strSQL1 = strSQL1 & "      ,T1.BFCTCMCD                   ""仕入先ファクタリング会社コード"""
    strSQL1 = strSQL1 & "      ,T1.SHATKMDT                   ""仕入先支払方法取決日"""
    If get_select(strSQL1 & strSQL, objrst) Then
        Set objstream = objfso.CreateTextFile(strFile)
        ReDim strdmy(objrst.Fields.count - 2)
        For I = 1 To objrst.Fields.count - 1
            strdmy(I - 1) = objrst.Fields(I).NAME
        Next
        objstream.WriteLine Join(strdmy, gv_strTAB_CHAR)
        'データ抽出
        FR_SSSMAIN.show_GAGE True
        DoEvents
        While Not (objrst.EOF Or PP_SSSMAIN.ButtonClick)
            If Str(objrst.Fields(0).Value) = Str(objrst.Fields(1).Value) Then
                For I = 1 To objrst.Fields.count - 1
                    strdmy(I - 1) = IIf(IsNull(objrst.Fields(I).Value), " ", Trim(objrst.Fields(I).Value))
                    strdmy(I - 1) = IIf(Len(strdmy(I - 1)) = 0, " ", strdmy(I - 1))
                Next
                FR_SSSMAIN.count_GAGE J, lngcnt
            Else
                For I = 1 To objrst.Fields.count - 1
                    strdmy(I - 1) = " "
                Next
                strdmy(0) = "エラー"
                strdmy(2) = IIf(IsNull(objrst.Fields(3).Value), " ", Trim(objrst.Fields(3).Value))
                strdmy(3) = IIf(IsNull(objrst.Fields(4).Value), " ", Trim(objrst.Fields(4).Value))
                strdmy(4) = "システム管理者に連絡してください"
            End If
            objstream.WriteLine Join(strdmy, gv_strTAB_CHAR)
            DoEvents
            objrst.MoveNext
            J = J + 1
        Wend
        FR_SSSMAIN.show_GAGE False
        objrst.Close
        objstream.Close
        If PP_SSSMAIN.ButtonClick Then
            PP_SSSMAIN.ButtonClick = False
            DSP_MsgBox "1", Mid(gc_strMsgTHSFP61_I_004, 2), 0 '実行を中断します。
            objfso.DeleteFile strFile
        Else
            DSP_MsgBox "1", Mid(gc_strMsgTHSFP61_I_003, 2), 0   '処理が終了しました。
        End If
    Else
        DSP_MsgBox "2", Mid(gc_strMsgTHSFP61_E_010, 2), 9 'DBエラー
    End If
        DB_ORA_Close
        Set objrst = Nothing
        Set objstream = Nothing
        Set objfso = Nothing
        FR_SSSMAIN.formenabled True
    Exit Sub
err_AE_Execute:
    DSP_MsgBox "2", Mid(gc_strMsgTHSFP61_E_011, 2), 0 'ファイルエラー
    DB_ORA_Close
    Set objstream = Nothing
    Set objrst = Nothing
    Set objfso = Nothing
    FR_SSSMAIN.formenabled True
End Sub
' === 20110216 === INSERT E


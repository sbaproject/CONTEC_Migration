Attribute VB_Name = "SSSMAIN_PR2"
Option Explicit


'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'for ＮｅｗＲＲＲ ＶＡ０３                                                             '
'                                                                             --2001.10 '
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Sub CNT_GAUGE()
    '
    FR_SSSMAIN!GAUGE.ForeColor = Cn_WHITE
    FR_SSSMAIN!GAUGE.FloodPercent = 100
    DoEvents
End Sub

Function FSTART_GetEvent() As Integer
    '
    '#Start/2002.1.23
    If CP_SSSMAIN(PP_SSSMAIN.Px).StatusC = Cn_Status1 Then
        Call AE_SetCheck_SSSMAIN(AE_Val2(CP_SSSMAIN(PP_SSSMAIN.Px)), Cn_Status6, True)
    End If
    Call AE_RecalcAll_SSSMAIN
    If AE_CompleteCheck_SSSMAIN(0) <> 0 Then
        Call AE_CursorSub_SSSMAIN(Cn_CuInCompletePx)
        PP_SSSMAIN.CursorSet = True
        FSTART_GetEvent = False
        Exit Function
    End If
    '#End/2002.1.23
    SSS_Makkb = SSS_FILE
    If SSS_ExportFLG Then
        Call SSS_Export
    Else
        Call SSS_LIST(SSS_FILE)
    End If
End Function

Function LCANCEL_GetEvent()
    SSS_LSTOP = True
    LCANCEL_GetEvent = True
End Function

Function LCONFIG_GetEvent() As Integer
    ' プリンター設定
    LCONFIG_GetEvent = True
    WLS_PRN.Show 1
End Function

Function LSTART_GetEvent() As Integer
    '#Start/2001.11.28
    If CP_SSSMAIN(PP_SSSMAIN.Px).StatusC = Cn_Status1 Then
        Call AE_SetCheck_SSSMAIN(AE_Val2(CP_SSSMAIN(PP_SSSMAIN.Px)), Cn_Status6, True)
    End If
    Call AE_RecalcAll_SSSMAIN
    If AE_CompleteCheck_SSSMAIN(0) <> 0 Then
        Call AE_CursorSub_SSSMAIN(Cn_CuInCompletePx)
        PP_SSSMAIN.CursorSet = True
        LSTART_GetEvent = False
        Exit Function
    End If
    '#End/2001.11.28
    LSTART_GetEvent = True
    SSS_Makkb = SSS_PRINTER
    Call SSS_LIST(SSS_PRINTER)
End Function

Function MNSTART_GetEvent() As Integer
    MNSTART_GetEvent = True
    Call INQ_LIST
End Function

Sub SSS_CLOSE()
    '
    Call CRW_CLOSE
    Call CRW_END
    '
    Call DB_RESET
    Call DB_End
    '
    DoEvents
    '
    On Error Resume Next
End Sub

Sub SSS_Export()
Dim Rtn As Integer
Dim wkRptId$
    '
    Call WORKING_VIEW(True)
    ' クリスタルレポートのオープン
    If CRW_INIT() = False Then
        Call Error_Exit("ERROR CRW_INIT")
    Else
        '伝票種別によるRPTファイルの選択(オプションユニットなどでSYSTBIを読んでおく)
        If Trim(SSS_RPTID) = "" Then
            wkRptId = SSS_PrgId
        Else
            wkRptId = SSS_RPTID
        End If
        If CRW_OPEN(SSS_INIDAT(2) & "RPT\" & wkRptId & ".RPT") = False Then
            Call Error_Exit("ERROR CRW_OPEN")
        End If
    End If

    '出力状態のチェックのための区分をクリア
    SSS_OUTKB = 0

    '
    Call Set_Value
    '
    If CRW_DOCHECK() = False Then
        MsgBox "他で実行中の為、実行できません。", MB_ICONEXCLAMATION
        '
        Call CRW_CLOSE
        '
        Call WORKING_VIEW(False)
        Exit Sub
    End If
    '
    SSS_LSTOP = False
    SSS_MFILCNT = 0
    SSS_LFILCNT = 0
    '
    If SSS_ExportFileKB Then GoTo Next_Proc
    '
    Screen.MousePointer = 13                        '矢印と砂時計を表示

    Call Loop_Mfil
    '
    ' キャンセル処理
    If SSS_LSTOP = True Then
        Call WORKING_VIEW(False)
        '
        Call CRW_CLOSE
        '
        Exit Sub
    End If
    '
    '参照先を切り替える
    Rtn = Crw_ChgLoc
    If Rtn = 0 Then
        MsgBox "CRW_PRINT.CRW_STATUS : " & Rtn & Chr(13) & CRW_GETERRMSG(HCRW)
        Exit Sub
    End If

    If SSS_LFILCNT = 0 Then
        'メッセージ格納変数に文字が入っていればそれを表示。
        If Trim(SSS_Message) <> "" Then
            Call MsgBox(SSS_Message, vbInformation)
            Call WORKING_VIEW(False)
            Call CRW_CLOSE
            Exit Sub
        Else
            Rtn = DSP_MsgBox(SSS_ERROR, "RNOTFOUND", 0)
            Call WORKING_VIEW(False)
            Call CRW_CLOSE
            Exit Sub
        End If
    Else
        Screen.MousePointer = 11                    '砂時計
        Call WORKING_VIEW(False)
        If Rtn = False Then
            Error_Exit ("ERROR SSS_LIST 出力先選択 RTN=[" & Str$(Rtn) & "]")
        Else
            On Error Resume Next
                Kill SSS_CRWOPATH & SSS_PrgId & ".TXT"
            On Error GoTo 0
            FR_SSSMAIN.Enabled = False
            DoEvents
            Rtn = PEDiscardSavedData(HCRW)
            If SSS_ExportFileName = vbNullString Then SSS_ExportFileName = SSS_PrgId        '(1998/11/19 追加）
            If reportExportX(HCRW, SSS_CRWOPATH & SSS_ExportFileName & "." & SSS_ExportFileEXT & Chr$(0), SSS_ExportFileType, 0, SSS_ExportSep & Chr$(0), SSS_ExportQuat & Chr$(0)) <> 1 Then
                Rtn = DSP_MsgBox(SSS_ERROR, "CANTDELFILE", 0)
                Call WORKING_VIEW(False)
                Error_Exit ("ERROR SSS_LIST CRW_PRINT")
            End If

            '出力状態のチェックのための区分をセット
            SSS_OUTKB = SSS_FILE
            '
        End If
        Call WORKING_VIEW(False)
        Screen.MousePointer = 11                    '砂時計
        Do While CRW_VIEWCHECK()
            Call Sleep(200)
            DoEvents
        Loop
        FR_SSSMAIN.Enabled = True
        DoEvents

    End If
    '
Next_Proc:
    Call WORKING_VIEW(False)
    ''
    If SSS_DYNASQL Then
        'PR2系帳票でダイナミックなSQL文を使う場合
        Call DB_Execute(SSS_LSTMFIL, "DROP TABLE " & Get_DBHEAD() & "_" & Trim(DB_PARA(SSS_LSTMFIL).DBID) & "." & SSS_PrgId & "_" & SSS_CLTID)
    End If
    ''
    Call CRW_CLOSE
    Call Chain_Proc
End Sub

Sub SSS_LIST(LSTKB As Integer)
Dim Rtn As Integer
Dim wkRptId$
Dim wkWindowOption As T_PEWindowOptions
Dim wkPrintOption As T_PEPrintOptions
Dim wkTop%, wkLeft%, wkWidth%, wkHeight%
Dim wkStr As String * 128
'Dim StartTime, PointTime, Time1, Time2, Time3      '計測用
'Dim msg1$                                          '計測用

    '出力処理中に再度出力処理を呼ぶとエラーになるためボタンを非表示にする
    FR_SSSMAIN!CM_LSTART.Visible = False
    FR_SSSMAIN!CM_VSTART.Visible = False
    FR_SSSMAIN!CM_FSTART.Visible = False
    'StartTime = Timer
    'PointTime = Timer
    Call WORKING_VIEW(True)
    ' クリスタルレポートのオープン
    If CRW_INIT() = False Then
        Call Error_Exit("ERROR CRW_INIT")
    Else
        '伝票種別によるRPTファイルの選択(オプションユニットなどでSYSTBIを読んでおく)
        If Trim(SSS_RPTID) = "" Then
            wkRptId = SSS_PrgId
        Else
            wkRptId = SSS_RPTID
        End If
        If CRW_OPEN(SSS_INIDAT(2) & "RPT\" & wkRptId & ".RPT") = False Then
            Call Error_Exit("ERROR CRW_OPEN")
        End If
    End If

    '出力状態のチェックのための区分をクリア
    SSS_OUTKB = 0
    '
    Call Set_Value
    '
    If CRW_DOCHECK() = False Then
        MsgBox "他で印刷中の為、実行できません。", MB_ICONEXCLAMATION
        '
        '出力処理中に再度出力処理を呼ぶとエラーになるため非表示にしていたボタンを表示にする
'CHG START FKS)INABA 2006/11/15******************************************************************
'先に取得した権限により、Preview画面の印刷ボタン、プリンタ設定ボタン、ファイル出力ボタンを制御する
        If gs_PRTAUTH = "1" Then '印刷権限有り
            FR_SSSMAIN!CM_LSTART.Visible = True
            FR_SSSMAIN!CM_VSTART.Visible = True
        Else
            FR_SSSMAIN!CM_LSTART.Visible = False
            FR_SSSMAIN!CM_VSTART.Visible = True
        End If
        If gs_FILEAUTH = "1" Then 'ファイル出力権限有り
            FR_SSSMAIN!CM_VSTART.Visible = True
            FR_SSSMAIN!CM_FSTART.Visible = True
        Else
            FR_SSSMAIN!CM_VSTART.Visible = True
            FR_SSSMAIN!CM_FSTART.Visible = False
        End If
'        FR_SSSMAIN!CM_LSTART.Visible = True
'        FR_SSSMAIN!CM_VSTART.Visible = True
'        FR_SSSMAIN!CM_FSTART.Visible = True
                                                                                                                                                                
'CHG  END  FKS)INABA 2006/11/15******************************************************************
        Call CRW_CLOSE
        '
        Call WORKING_VIEW(False)
        Exit Sub
    End If
    SSS_LSTOP = False
    SSS_MFILCNT = 0
    SSS_LFILCNT = 0
    '
    'Debug.Print "    印刷データの SQL への出力を開始するまでの時間:" & Str$(Timer - PointTime)
    'Time1 = Timer - PointTime
    'PointTime = Timer
    Call Loop_Mfil

    'Debug.Print "    印刷データを SQL に出力するのに要した時間" & chr(9) & ": " & Str$(Timer - PointTime)
    'Time2 = Timer - PointTime
    'PointTime = Timer
    'キャンセル処理
    If SSS_LSTOP = True Then
        Call WORKING_VIEW(False)
        '
        '出力処理中に再度出力処理を呼ぶとエラーになるため非表示にしていたボタンを表示にする
'CHG START FKS)INABA 2006/11/15******************************************************************
'先に取得した権限により、Preview画面の印刷ボタン、プリンタ設定ボタン、ファイル出力ボタンを制御する
        If gs_PRTAUTH = "1" Then '印刷権限有り
            FR_SSSMAIN!CM_LSTART.Visible = True
            FR_SSSMAIN!CM_VSTART.Visible = True
        Else
            FR_SSSMAIN!CM_LSTART.Visible = False
            FR_SSSMAIN!CM_VSTART.Visible = True
        End If
        If gs_FILEAUTH = "1" Then 'ファイル出力権限有り
            FR_SSSMAIN!CM_VSTART.Visible = True
            FR_SSSMAIN!CM_FSTART.Visible = True
        Else
            FR_SSSMAIN!CM_VSTART.Visible = True
            FR_SSSMAIN!CM_FSTART.Visible = False
        End If
'        FR_SSSMAIN!CM_LSTART.Visible = True
'        FR_SSSMAIN!CM_VSTART.Visible = True
'        FR_SSSMAIN!CM_FSTART.Visible = True
                                                                                                                                                                
'CHG  END  FKS)INABA 2006/11/15******************************************************************
        Call CRW_CLOSE
        '
        Exit Sub
    End If
    '
    If SSS_LFILCNT = 0 Then
        'メッセージ格納変数に文字が入っていればそれを表示。
        If Trim(SSS_Message) <> "" Then
            Call MsgBox(SSS_Message, vbInformation)
            Call WORKING_VIEW(False)
        Else
            Rtn = DSP_MsgBox(SSS_ERROR, "RNOTFOUND", 0)
            Call WORKING_VIEW(False)
        End If
    Else
        'ダイアログによりプリンタ切替えをされたものを再設定する。
        '専用帳票の場合クリスタルレポートのユーザー定義を優先する。
        If IsNull(SSS_Lconfig) Then SSS_Lconfig = ""
        If SSS_Lconfig <> "USR" Then Call CRW_SET_PRINTER
        Select Case LSTKB
            Case SSS_PRINTER
                
                Rtn = CRW_PUTPRINTER()
                '印刷部数の指定
                wkPrintOption.StructSize = PE_SIZEOF_PRINT_OPTIONS
                Rtn = PEGetPrintOptions(HCRW, wkPrintOption)
                wkPrintOption.StartPageN = SSS_StartPageNo
                wkPrintOption.stopPageN = SSS_StopPageNo
                wkPrintOption.nReportCopies = SSS_Copies
                If SSS_Copies > 1 Then
                        wkPrintOption.collation = IIf((SSS_Collation = 1), PE_COLLATED, PE_UNCOLLATED)
                End If
                Rtn = PESetPrintOptions(HCRW, wkPrintOption)
            Case SSS_VIEW
                'プレビュー画面のデフォルトサイズを指定
                Rtn = GetPrivateProfileString("REPORT", "CRW_LEFT", "", wkStr, 128, ByVal "SSSWIN.INI")
                If Rtn > 0 Then wkLeft = Int(Left$(wkStr, Rtn))
                Rtn = GetPrivateProfileString("REPORT", "CRW_TOP", "", wkStr, 128, ByVal "SSSWIN.INI")
                If Rtn > 0 Then wkTop = Int(Left$(wkStr, Rtn))
                Rtn = GetPrivateProfileString("REPORT", "CRW_HEIGHT", "", wkStr, 128, ByVal "SSSWIN.INI")
                If Rtn > 0 Then wkHeight = Int(Left$(wkStr, Rtn))
                Rtn = GetPrivateProfileString("REPORT", "CRW_WIDTH", "", wkStr, 128, ByVal "SSSWIN.INI")
                If Rtn > 0 Then wkWidth = Int(Left$(wkStr, Rtn))
                
                '正確性チェック
                If wkTop <= 0 Or wkTop >= Screen.Height / 15 Then wkTop = 0
                If wkLeft <= 0 Or wkLeft >= Screen.Width / 15 Then wkLeft = 0
                If wkWidth <= 0 Or wkWidth >= Screen.Width / 15 Then wkWidth = Screen.Width / 15
                If wkHeight <= 0 Or wkHeight >= Screen.Height / 15 Then wkHeight = Screen.Height / 15
                If wkLeft + wkWidth > Screen.Width / 15 Then wkWidth = Screen.Width / 15 - wkLeft
                If wkTop + wkHeight > Screen.Height / 15 Then wkHeight = Screen.Height / 15 - wkHeight
                '
                Rtn = CRW_PUTWINDOW(CStr(FR_SSSMAIN.Caption) & "･ﾚﾎﾟｰﾄ", wkLeft, wkTop, wkWidth, wkHeight)
                'プレビュー画面でのボタン表示／非表示
                wkWindowOption.StructSize = PE_SIZEOF_WINDOW_OPTIONS
                Rtn = PEGetWindowOptions(HCRW, wkWindowOption)
'CHG START FKS)INABA 2006/11/15******************************************************************
'先に取得した権限により、Preview画面の印刷ボタン、プリンタ設定ボタン、ファイル出力ボタンを制御する
                If gs_PRTAUTH = "1" Then '印刷権限有り
                    wkWindowOption.hasPrintButton = 1
                    wkWindowOption.hasPrintSetupButton = 1
                Else
                    wkWindowOption.hasPrintButton = 0
                    wkWindowOption.hasPrintSetupButton = 0
                End If
                If gs_FILEAUTH = "1" Then 'ファイル出力権限有り
                    wkWindowOption.hasExportButton = 1
                Else
                    wkWindowOption.hasExportButton = 0
                End If
                                                                                                                                                                
                'wkWindowOption.hasPrintButton = IIf((SSS_Hide_Prnbutton), 0, 1)
                'wkWindowOption.hasExportButton = IIf((SSS_Hide_Expbutton), 0, 1)
                'wkWindowOption.hasPrintSetupButton = IIf((SSS_Hide_Prnset), 0, 1)
'CHG  END  FKS)INABA 2006/11/15******************************************************************
                
                Rtn = PESetWindowOptions(HCRW, wkWindowOption)
            Case SSS_FILE
                Rtn = CRW_SETEXPATR()
        End Select
        If Rtn = False Then
            Error_Exit ("ERROR SSS_LIST 出力先選択 RTN=[" & Str$(Rtn) & "]")
        End If
        If Rtn = True Or Rtn = 1 Then
            FR_SSSMAIN.Enabled = False
            DoEvents
            If CRW_PRINT() = False Then Error_Exit ("ERROR SSS_LIST CRW_PRINT")
            '出力状態のチェックのための区分をセット
            SSS_OUTKB = LSTKB
            '
        ElseIf Rtn <> PE_ERR_USERCANCELLED Then
            'CRWでエラーが発生した場合
            Rtn = MsgBox("SSS_LISTでCRWエラーが発生しました：[" & Str(Rtn) & "]")
            Error_Exit ("ERROR SSS_LIST 出力先選択 RTN=[" & Str$(Rtn) & "]")
        End If
        Call WORKING_VIEW(False)
        'Debug.Print "    クリスタルレポートが出力に要した時間" & chr(9) & chr(9) & ": " & Str$(Timer - PointTime)
        'Time3 = Timer - PointTime
        'Debug.Print "トータルで画面表示に要した時間" & Chr(9) & Chr(9) & ": " & Str$(Timer - StartTime)
        'Debug.Print ""
        'msg1$ = "印刷データの Jet への出力を開始するまでの時間" & Chr(9) & ": " & Str$(Time1) & Chr(13)
        'msg1$ = msg1$ + "印刷データを Jet に出力するのに要した時間" & Chr(9) & ": " & Str$(Time2) & Chr(13)
        'msg1$ = msg1$ + "クリスタルレポートが出力に要した時間" & Chr(9) & Chr(9) & ": " & Str$(Time3) & Chr(13)
        'msg1$ = msg1$ + "画面表示に要した時間" & Chr(9) & Chr(9) & Chr(9) & ": " & Str$(Timer - StartTime)
        'MsgBox msg1$
        Do While CRW_VIEWCHECK()
            Call Sleep(200)
            DoEvents
        Loop
        FR_SSSMAIN.Enabled = True
        DoEvents
    End If
    '
    '出力処理中に再度出力処理を呼ぶとエラーになるため非表示にしていたボタンを表示にする
'CHG START FKS)INABA 2006/11/15******************************************************************
'先に取得した権限により、Preview画面の印刷ボタン、プリンタ設定ボタン、ファイル出力ボタンを制御する
        If gs_PRTAUTH = "1" Then '印刷権限有り
            FR_SSSMAIN!CM_LSTART.Visible = True
            FR_SSSMAIN!CM_VSTART.Visible = True
        Else
            FR_SSSMAIN!CM_LSTART.Visible = False
            FR_SSSMAIN!CM_VSTART.Visible = True
        End If
        If gs_FILEAUTH = "1" Then 'ファイル出力権限有り
            FR_SSSMAIN!CM_VSTART.Visible = True
            FR_SSSMAIN!CM_FSTART.Visible = True
        Else
            FR_SSSMAIN!CM_VSTART.Visible = True
            FR_SSSMAIN!CM_FSTART.Visible = False
        End If
'        FR_SSSMAIN!CM_LSTART.Visible = True
'        FR_SSSMAIN!CM_VSTART.Visible = True
'        FR_SSSMAIN!CM_FSTART.Visible = True
                                                                                                                                                                
'CHG  END  FKS)INABA 2006/11/15******************************************************************
    ''
    If SSS_DYNASQL Then
        'PR2系帳票でダイナミックなSQL文を使う場合
        Call DB_Execute(SSS_LSTMFIL, "DROP TABLE " & Get_DBHEAD() & "_" & Trim(DB_PARA(SSS_LSTMFIL).DBID) & "." & SSS_PrgId & "_" & SSS_CLTID)
    End If
    ''
    Call CRW_CLOSE
    
End Sub

Function SSSMAIN_Append()
'ファイルにカレントレコードの追加処理を行う。
    Call INQ_LIST
    '印字条件をｸﾘｱしない
    SSSMAIN_Append = 1
End Function

Function SSSMAIN_BeginPrg()
'画面表示前の初期設定処理を行う。
    If App.PrevInstance Then
        MsgBox "【" & Trim(SSS_PrgNm) & "】は既に起動中です。重複して起動する事はできません。", vbExclamation Or vbOKOnly, SSS_PrgNm
        End
    End If
    ' "しばらくお待ちください" ウィンドウ表示
    Load ICN_ICON
    SSSMAIN_BeginPrg = True
    SSS_ExportFLG = False                           '初期値：印刷処理
    '----------------------------------
    '   SSSWIN プログラム起動チェック
    '----------------------------------
    Call SSSWIN_INIT
    Call SSSWIN_OPEN
    '
    'デフォルト用紙サイズと印刷の向きを読み取り
    Call Set_defaultPrintInfo
    
    Call InitDsp
    ' "しばらくお待ちください" ウィンドウ消去
    Unload ICN_ICON
End Function

Function SSSMAIN_Close()
'終了時の後処理を行う。
    Call SSSWIN_CLOSE
    SSSMAIN_Close = True
End Function

Function SSSMAIN_Current()
    SSSMAIN_Current = 0
End Function

Function SSSMAIN_Init()
    '
    Call WORKING_VIEW(False)
    SSSMAIN_Init = True
End Function

Function SSSMAIN_Last()
    SSSMAIN_Last = 0
End Function

Function SSSMAIN_Next()
    SSSMAIN_Next = 0
End Function

Function SSSMAIN_Select()
'処理対象のデータの範囲を設定する。
    'SSSMAIN_Select = SET_GAMEN_KEY()
End Function

Function SSSMAIN_Update()
'ファイルの中のカレントレコードの更新を行う。
    Dim Wk
    'MsgBox "データを更新しました。"
    SSSMAIN_Update = 9
End Function

Function VSTART_GetEvent() As Integer
    '
    VSTART_GetEvent = True
    '
    '#Start/2002.1.23
    If CP_SSSMAIN(PP_SSSMAIN.Px).StatusC = Cn_Status1 Then
        Call AE_SetCheck_SSSMAIN(AE_Val2(CP_SSSMAIN(PP_SSSMAIN.Px)), Cn_Status6, True)
    End If
    Call AE_RecalcAll_SSSMAIN
    If AE_CompleteCheck_SSSMAIN(0) <> 0 Then
        Call AE_CursorSub_SSSMAIN(Cn_CuInCompletePx)
        PP_SSSMAIN.CursorSet = True
        VSTART_GetEvent = False
        Exit Function
    End If
    '#End/2002.1.23
    SSS_Makkb = SSS_VIEW
    Call SSS_LIST(SSS_VIEW)
    '
End Function

Sub WLS_SLIST_MOVE(ByVal SlistCom As Variant, ByVal LENGTH As Integer)
    PP_SSSMAIN.SlistCom = LeftWid$(SlistCom, LENGTH)
End Sub

Sub WORKING_VIEW(Sw As Integer)
    'ゲージの表示 etc...
    FR_SSSMAIN!GAUGE.FloodPercent = 0
    If Sw Then
        Screen.MousePointer = 11                    '砂時計
        Call AE_StatusOut(PP_SSSMAIN, "作業中！ しばらくお待ちください。", Cn_BLUE)
        FR_SSSMAIN!GAUGE.Visible = True
        FR_SSSMAIN!CM_LCANCEL.Visible = True
    Else
        Screen.MousePointer = 0                     '既定値
        FR_SSSMAIN!TX_Message.Text = ""
        FR_SSSMAIN!GAUGE.Visible = False
        FR_SSSMAIN!CM_LCANCEL.Visible = False
    End If
    DoEvents
End Sub

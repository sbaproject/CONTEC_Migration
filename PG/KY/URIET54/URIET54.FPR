Attribute VB_Name = "SSSMAIN0001"
Option Explicit
'Copyright 1994-2003 by AppliTech, Inc. All Rights Reserved.
'
'単プロジェクトごとの共通ライブラリ
Public PP_SSSMAIN As clsPP
Public CP_SSSMAIN(74 + 31 + 0 + 1) As clsCP
Public CL_SSSMAIN(74) As Integer
Public CQ_SSSMAIN(74) As String

'20090115 ADD START RISE)Tanimura '連絡票No.523
Public g_strURIKB       As String
'20090115 ADD END   RISE)Tanimura

Function AE_AppendC_SSSMAIN(ByVal pm_ExMode As Integer, Optional ByVal pm_Current) As Integer 'Generated.
   If PP_SSSMAIN.Mode = Cn_Mode4 And PP_SSSMAIN.InitValStatus <> PP_SSSMAIN.Mode Then
      If PP_SSSMAIN.ChOprtMode = 0 Then
         If AE_MsgLibrary(PP_SSSMAIN, "AppendC") Then AE_AppendC_SSSMAIN = Cn_CuCurrent: Exit Function
      End If
   End If
   PP_SSSMAIN.ChOprtMode = Cn_Mode1
   If SSSMAIN_AppendC() Then
      Call AE_ModeChange_SSSMAIN(Cn_Mode1)
      If IsMissing(pm_Current) Then
         Call AE_InitValAll_SSSMAIN
      Else
         wk_Int = AE_Current_SSSMAIN()
      End If
      Call AE_ClearInitValStatus_SSSMAIN
      AE_AppendC_SSSMAIN = Cn_CuInit
   Else
      Call AE_ModeChange_SSSMAIN(pm_ExMode)
      AE_AppendC_SSSMAIN = Cn_CuCurrent
   End If
   PP_SSSMAIN.ChOprtMode = 0
End Function

Sub AE_Check_SSSMAIN_HINCD(ByVal CC_NewVal, ByVal pm_Status As Integer, ByVal pm_MoveCursor As Boolean, ByVal pm_HandIn As Boolean) 'Generated.
Dim wk_SaveMask As Boolean
Dim RC_ErrorC As Integer
Dim wk_RecalcSw As Boolean
Dim wk_Equal As Boolean
Dim wk_Tx As Integer
Dim wk_Px As Integer
   wk_Px = 38 + 31 * PP_SSSMAIN.De
   wk_Tx = AE_Tx(PP_SSSMAIN, wk_Px)
   With CP_SSSMAIN(wk_Px)
   Dim ex_CheckRtnCode As Integer
   ex_CheckRtnCode = .CheckRtnCode
   If .FormatClass = Cn_Code And .FormatChr <> "" And Not IsNull(CC_NewVal) Then CC_NewVal = AE_FormatC$(CP_SSSMAIN(wk_Px), CC_NewVal)
   If PP_SSSMAIN.De = PP_SSSMAIN.LastDe And AE_GetInOutMode(.InOutMode, PP_SSSMAIN.Mode) = Cn_InOutMode3 And PP_SSSMAIN.ActiveDe < 0 And Not PP_SSSMAIN.CheckErrNglct And Not PP_SSSMAIN.RecalcMode Then
      If IsNull(CC_NewVal) Then
         If pm_MoveCursor Then
            If AE_CursorDown_SSSMAIN(PP_SSSMAIN.Tx) = False Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
         End If
         Exit Sub
      ElseIf RTrim$(CC_NewVal) = RTrim$(.IniStr) Then
         If pm_MoveCursor Then
            If AE_CursorDown_SSSMAIN(PP_SSSMAIN.Tx) = False Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
         End If
         Exit Sub
      End If
   End If
   PP_SSSMAIN.SaveXV = .ExVal
   PP_SSSMAIN.SaveExStatus = .ExStatus
   .ExVal = .CuVal
   PP_SSSMAIN.SaveCV = .CuVal
   .ExStatus = .StatusF
   If IsNull(CC_NewVal) Then
      CC_NewVal = Space$(.MaxLength)
   ElseIf .Alignment = 1 And LenWid(CC_NewVal) < .MaxLength Then
      CC_NewVal = Space$(.MaxLength - LenWid(CC_NewVal)) & CC_NewVal
   End If
   .CuVal = CC_NewVal
   If Not PP_SSSMAIN.RecalcMode Then AE_StatusBar(PP_SSSMAIN.ScX) = "": AE_StatusCodeBar(PP_SSSMAIN.ScX) = ""
   Ck_Error = 0
   .CheckRtnCode = AE_ErrorToInteger(Ck_Error)
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
      .CuVal = CC_NewVal
      .TpStr = AE_Format$(CP_SSSMAIN(wk_Px), .CuVal, 0, True)
      Call AE_CtSet(PP_SSSMAIN, wk_Px, .TpStr, .TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
   If AE_ErrorToInteger(Ck_Error) = 0 Or (pm_Status >= Cn_Status7 And PP_SSSMAIN.CheckErrNglct) Then
      If AE_IsNull_SSSMAIN(PP_SSSMAIN.SaveCV) And AE_IsNull_SSSMAIN(CC_NewVal) Or AE_NullCnv2_SSSMAIN(PP_SSSMAIN.SaveCV) = AE_NullCnv2_SSSMAIN(CC_NewVal) Then
         wk_Equal = True
      Else
         wk_Equal = False
         Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(wk_Px))
      End If
      If wk_Equal And ex_CheckRtnCode = 0 And pm_Status >= Cn_Status6 And pm_Status = .StatusC And Not PP_SSSMAIN.RecalcMode Then
         .ExVal = PP_SSSMAIN.SaveXV
         .ExStatus = PP_SSSMAIN.SaveExStatus
         Call AE_Later_SSSMAIN
         If pm_MoveCursor Then
            If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
         End If
      Else
         If pm_Status <> 0 Then .StatusC = pm_Status
         If pm_Status <> 0 Then .StatusF = pm_Status
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(wk_Px), CL_SSSMAIN(wk_Px))
         If Not PP_SSSMAIN.RecalcMode Then
            PP_SSSMAIN.DerivedOrigin = "BD_HINCD"
            CP_SSSMAIN(48 + 31 * PP_SSSMAIN.De).ExVal = CP_SSSMAIN(48 + 31 * PP_SSSMAIN.De).CuVal 'UDNDKBID
            CP_SSSMAIN(48 + 31 * PP_SSSMAIN.De).ExStatus = CP_SSSMAIN(48 + 31 * PP_SSSMAIN.De).StatusC
            CP_SSSMAIN(59 + 31 * PP_SSSMAIN.De).ExVal = CP_SSSMAIN(59 + 31 * PP_SSSMAIN.De).CuVal 'UZEKN
            CP_SSSMAIN(59 + 31 * PP_SSSMAIN.De).ExStatus = CP_SSSMAIN(59 + 31 * PP_SSSMAIN.De).StatusC
            CP_SSSMAIN(62 + 31 * PP_SSSMAIN.De).ExVal = CP_SSSMAIN(62 + 31 * PP_SSSMAIN.De).CuVal 'ZKMUZEKN
            CP_SSSMAIN(62 + 31 * PP_SSSMAIN.De).ExStatus = CP_SSSMAIN(62 + 31 * PP_SSSMAIN.De).StatusC
            CP_SSSMAIN(71).ExVal = CP_SSSMAIN(71).CuVal 'SBAUZEKN
            CP_SSSMAIN(71).ExStatus = CP_SSSMAIN(71).StatusC
            CP_SSSMAIN(72).ExVal = CP_SSSMAIN(72).CuVal 'SBAUZKKN
            CP_SSSMAIN(72).ExStatus = CP_SSSMAIN(72).StatusC
            Call AE_Derived_SSSMAIN_BV_UDNDKBID(PP_SSSMAIN, PP_SSSMAIN.De2)
            Call AE_Derived_SSSMAIN_BV_UZEKN(PP_SSSMAIN.De2, CP_SSSMAIN(59 + 31 * PP_SSSMAIN.De))
            PP_SSSMAIN.DerivedFrom = "BV_UZEKN"
            Call AE_Derived_SSSMAIN_BV_ZKMUZEKN(PP_SSSMAIN.De2)
            Call AE_Derived_SSSMAIN_TV_SBAUZEKN(PP_SSSMAIN)
            PP_SSSMAIN.DerivedFrom = "BV_ZKMUZEKN"
            Call AE_Derived_SSSMAIN_TV_SBAUZKKN(PP_SSSMAIN)
            If PP_SSSMAIN.ErrorC = 0 Or wk_RecalcSw = False Then
               Call AE_Later_SSSMAIN
               If pm_MoveCursor Then
                  If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
               End If
            Else
               If pm_MoveCursor Then
                  If AE_CursorToError_SSSMAIN() = False Then
                     Call AE_Later_SSSMAIN
                     If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
                  End If
               End If
            End If
         End If
      End If
   Else
      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(wk_Px))
      Call AE_CheckSub2_SSSMAIN(wk_Tx, wk_Px, True)
      If AE_ErrorToInteger(Ck_Error) >= 0 Then
         PP_SSSMAIN.ErrorC = PP_SSSMAIN.ErrorC + 1
         wk_Bool = SSSMAIN_ErrorMsg(Ck_Error)
      Else
         wk_Bool = AE_MsgLibrary(PP_SSSMAIN, "PreCheck" & CStr(-Ck_Error))
      End If
   End If
   End With
End Sub

Sub AE_Check_SSSMAIN_HINNMA(ByVal CC_NewVal, ByVal pm_Status As Integer, ByVal pm_MoveCursor As Boolean, ByVal pm_HandIn As Boolean) 'Generated.
Dim wk_SaveMask As Boolean
Dim RC_ErrorC As Integer
Dim wk_RecalcSw As Boolean
Dim wk_Equal As Boolean
Dim wk_Tx As Integer
Dim wk_Px As Integer
   wk_Px = 40 + 31 * PP_SSSMAIN.De
   wk_Tx = AE_Tx(PP_SSSMAIN, wk_Px)
   With CP_SSSMAIN(wk_Px)
   Dim ex_CheckRtnCode As Integer
   ex_CheckRtnCode = .CheckRtnCode
   If .FormatClass = Cn_Code And .FormatChr <> "" And Not IsNull(CC_NewVal) Then CC_NewVal = AE_FormatC$(CP_SSSMAIN(wk_Px), CC_NewVal)
   If PP_SSSMAIN.De = PP_SSSMAIN.LastDe And AE_GetInOutMode(.InOutMode, PP_SSSMAIN.Mode) = Cn_InOutMode3 And PP_SSSMAIN.ActiveDe < 0 And Not PP_SSSMAIN.CheckErrNglct And Not PP_SSSMAIN.RecalcMode Then
      If IsNull(CC_NewVal) Then
         If pm_MoveCursor Then
            If AE_CursorDown_SSSMAIN(PP_SSSMAIN.Tx) = False Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
         End If
         Exit Sub
      ElseIf RTrim$(CC_NewVal) = RTrim$(.IniStr) Then
         If pm_MoveCursor Then
            If AE_CursorDown_SSSMAIN(PP_SSSMAIN.Tx) = False Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
         End If
         Exit Sub
      End If
   End If
   PP_SSSMAIN.SaveXV = .ExVal
   PP_SSSMAIN.SaveExStatus = .ExStatus
   .ExVal = .CuVal
   PP_SSSMAIN.SaveCV = .CuVal
   .ExStatus = .StatusF
   If IsNull(CC_NewVal) Then
      CC_NewVal = Space$(.MaxLength)
   ElseIf .Alignment = 1 And LenWid(CC_NewVal) < .MaxLength Then
      CC_NewVal = Space$(.MaxLength - LenWid(CC_NewVal)) & CC_NewVal
   End If
   .CuVal = CC_NewVal
   If Not PP_SSSMAIN.RecalcMode Then AE_StatusBar(PP_SSSMAIN.ScX) = "": AE_StatusCodeBar(PP_SSSMAIN.ScX) = ""
   Ck_Error = 0
   .CheckRtnCode = AE_ErrorToInteger(Ck_Error)
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
      .CuVal = CC_NewVal
      .TpStr = AE_Format$(CP_SSSMAIN(wk_Px), .CuVal, 0, True)
      Call AE_CtSet(PP_SSSMAIN, wk_Px, .TpStr, .TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
   If AE_ErrorToInteger(Ck_Error) = 0 Or (pm_Status >= Cn_Status7 And PP_SSSMAIN.CheckErrNglct) Then
      If AE_IsNull_SSSMAIN(PP_SSSMAIN.SaveCV) And AE_IsNull_SSSMAIN(CC_NewVal) Or AE_NullCnv2_SSSMAIN(PP_SSSMAIN.SaveCV) = AE_NullCnv2_SSSMAIN(CC_NewVal) Then
         wk_Equal = True
      Else
         wk_Equal = False
         Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(wk_Px))
      End If
      If wk_Equal And ex_CheckRtnCode = 0 And pm_Status >= Cn_Status6 And pm_Status = .StatusC And Not PP_SSSMAIN.RecalcMode Then
         .ExVal = PP_SSSMAIN.SaveXV
         .ExStatus = PP_SSSMAIN.SaveExStatus
         Call AE_Later_SSSMAIN
         If pm_MoveCursor Then
            If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
         End If
      Else
         If pm_Status <> 0 Then .StatusC = pm_Status
         If pm_Status <> 0 Then .StatusF = pm_Status
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(wk_Px), CL_SSSMAIN(wk_Px))
         If Not PP_SSSMAIN.RecalcMode Then
            If PP_SSSMAIN.ErrorC = 0 Or wk_RecalcSw = False Then
               Call AE_Later_SSSMAIN
               If pm_MoveCursor Then
                  If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
               End If
            Else
               If pm_MoveCursor Then
                  If AE_CursorToError_SSSMAIN() = False Then
                     Call AE_Later_SSSMAIN
                     If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
                  End If
               End If
            End If
         End If
      End If
   Else
      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(wk_Px))
      Call AE_CheckSub2_SSSMAIN(wk_Tx, wk_Px, True)
      If AE_ErrorToInteger(Ck_Error) >= 0 Then
         PP_SSSMAIN.ErrorC = PP_SSSMAIN.ErrorC + 1
         wk_Bool = SSSMAIN_ErrorMsg(Ck_Error)
      Else
         wk_Bool = AE_MsgLibrary(PP_SSSMAIN, "PreCheck" & CStr(-Ck_Error))
      End If
   End If
   End With
End Sub

Sub AE_Check_SSSMAIN_HINNMB(ByVal CC_NewVal, ByVal pm_Status As Integer, ByVal pm_MoveCursor As Boolean, ByVal pm_HandIn As Boolean) 'Generated.
Dim wk_SaveMask As Boolean
Dim RC_ErrorC As Integer
Dim wk_RecalcSw As Boolean
Dim wk_Equal As Boolean
Dim wk_Tx As Integer
Dim wk_Px As Integer
   wk_Px = 41 + 31 * PP_SSSMAIN.De
   wk_Tx = AE_Tx(PP_SSSMAIN, wk_Px)
   With CP_SSSMAIN(wk_Px)
   Dim ex_CheckRtnCode As Integer
   ex_CheckRtnCode = .CheckRtnCode
   If .FormatClass = Cn_Code And .FormatChr <> "" And Not IsNull(CC_NewVal) Then CC_NewVal = AE_FormatC$(CP_SSSMAIN(wk_Px), CC_NewVal)
   If PP_SSSMAIN.De = PP_SSSMAIN.LastDe And AE_GetInOutMode(.InOutMode, PP_SSSMAIN.Mode) = Cn_InOutMode3 And PP_SSSMAIN.ActiveDe < 0 And Not PP_SSSMAIN.CheckErrNglct And Not PP_SSSMAIN.RecalcMode Then
      If IsNull(CC_NewVal) Then
         If pm_MoveCursor Then
            If AE_CursorDown_SSSMAIN(PP_SSSMAIN.Tx) = False Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
         End If
         Exit Sub
      ElseIf RTrim$(CC_NewVal) = RTrim$(.IniStr) Then
         If pm_MoveCursor Then
            If AE_CursorDown_SSSMAIN(PP_SSSMAIN.Tx) = False Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
         End If
         Exit Sub
      End If
   End If
   PP_SSSMAIN.SaveXV = .ExVal
   PP_SSSMAIN.SaveExStatus = .ExStatus
   .ExVal = .CuVal
   PP_SSSMAIN.SaveCV = .CuVal
   .ExStatus = .StatusF
   If IsNull(CC_NewVal) Then
      CC_NewVal = Space$(.MaxLength)
   ElseIf .Alignment = 1 And LenWid(CC_NewVal) < .MaxLength Then
      CC_NewVal = Space$(.MaxLength - LenWid(CC_NewVal)) & CC_NewVal
   End If
   .CuVal = CC_NewVal
   If Not PP_SSSMAIN.RecalcMode Then AE_StatusBar(PP_SSSMAIN.ScX) = "": AE_StatusCodeBar(PP_SSSMAIN.ScX) = ""
   Ck_Error = 0
   .CheckRtnCode = AE_ErrorToInteger(Ck_Error)
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
      .CuVal = CC_NewVal
      .TpStr = AE_Format$(CP_SSSMAIN(wk_Px), .CuVal, 0, True)
      Call AE_CtSet(PP_SSSMAIN, wk_Px, .TpStr, .TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
   If AE_ErrorToInteger(Ck_Error) = 0 Or (pm_Status >= Cn_Status7 And PP_SSSMAIN.CheckErrNglct) Then
      If AE_IsNull_SSSMAIN(PP_SSSMAIN.SaveCV) And AE_IsNull_SSSMAIN(CC_NewVal) Or AE_NullCnv2_SSSMAIN(PP_SSSMAIN.SaveCV) = AE_NullCnv2_SSSMAIN(CC_NewVal) Then
         wk_Equal = True
      Else
         wk_Equal = False
         Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(wk_Px))
      End If
      If wk_Equal And ex_CheckRtnCode = 0 And pm_Status >= Cn_Status6 And pm_Status = .StatusC And Not PP_SSSMAIN.RecalcMode Then
         .ExVal = PP_SSSMAIN.SaveXV
         .ExStatus = PP_SSSMAIN.SaveExStatus
         Call AE_Later_SSSMAIN
         If pm_MoveCursor Then
            If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
         End If
      Else
         If pm_Status <> 0 Then .StatusC = pm_Status
         If pm_Status <> 0 Then .StatusF = pm_Status
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(wk_Px), CL_SSSMAIN(wk_Px))
         If Not PP_SSSMAIN.RecalcMode Then
            If PP_SSSMAIN.ErrorC = 0 Or wk_RecalcSw = False Then
               Call AE_Later_SSSMAIN
               If pm_MoveCursor Then
                  If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
               End If
            Else
               If pm_MoveCursor Then
                  If AE_CursorToError_SSSMAIN() = False Then
                     Call AE_Later_SSSMAIN
                     If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
                  End If
               End If
            End If
         End If
      End If
   Else
      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(wk_Px))
      Call AE_CheckSub2_SSSMAIN(wk_Tx, wk_Px, True)
      If AE_ErrorToInteger(Ck_Error) >= 0 Then
         PP_SSSMAIN.ErrorC = PP_SSSMAIN.ErrorC + 1
         wk_Bool = SSSMAIN_ErrorMsg(Ck_Error)
      Else
         wk_Bool = AE_MsgLibrary(PP_SSSMAIN, "PreCheck" & CStr(-Ck_Error))
      End If
   End If
   End With
End Sub

Sub AE_Check_SSSMAIN_SBNNO(ByVal CC_NewVal, ByVal pm_Status As Integer, ByVal pm_MoveCursor As Boolean, ByVal pm_HandIn As Boolean) 'Generated.
Dim wk_SaveMask As Boolean
Dim RC_ErrorC As Integer
Dim wk_RecalcSw As Boolean
Dim wk_Equal As Boolean
Dim wk_Tx As Integer
Dim wk_Px As Integer
   wk_Px = 39 + 31 * PP_SSSMAIN.De
   wk_Tx = AE_Tx(PP_SSSMAIN, wk_Px)
   With CP_SSSMAIN(wk_Px)
   Dim ex_CheckRtnCode As Integer
   ex_CheckRtnCode = .CheckRtnCode
   If .FormatClass = Cn_Code And .FormatChr <> "" And Not IsNull(CC_NewVal) Then CC_NewVal = AE_FormatC$(CP_SSSMAIN(wk_Px), CC_NewVal)
   If PP_SSSMAIN.De = PP_SSSMAIN.LastDe And AE_GetInOutMode(.InOutMode, PP_SSSMAIN.Mode) = Cn_InOutMode3 And PP_SSSMAIN.ActiveDe < 0 And Not PP_SSSMAIN.CheckErrNglct And Not PP_SSSMAIN.RecalcMode Then
      If IsNull(CC_NewVal) Then
         If pm_MoveCursor Then
            If AE_CursorDown_SSSMAIN(PP_SSSMAIN.Tx) = False Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
         End If
         Exit Sub
      ElseIf RTrim$(CC_NewVal) = RTrim$(.IniStr) Then
         If pm_MoveCursor Then
            If AE_CursorDown_SSSMAIN(PP_SSSMAIN.Tx) = False Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
         End If
         Exit Sub
      End If
   End If
   PP_SSSMAIN.SaveXV = .ExVal
   PP_SSSMAIN.SaveExStatus = .ExStatus
   .ExVal = .CuVal
   PP_SSSMAIN.SaveCV = .CuVal
   .ExStatus = .StatusF
   If IsNull(CC_NewVal) Then
      CC_NewVal = Space$(.MaxLength)
   ElseIf .Alignment = 1 And LenWid(CC_NewVal) < .MaxLength Then
      CC_NewVal = Space$(.MaxLength - LenWid(CC_NewVal)) & CC_NewVal
   End If
   .CuVal = CC_NewVal
   If Not PP_SSSMAIN.RecalcMode Then AE_StatusBar(PP_SSSMAIN.ScX) = "": AE_StatusCodeBar(PP_SSSMAIN.ScX) = ""
   Ck_Error = 0
   .CheckRtnCode = AE_ErrorToInteger(Ck_Error)
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
      .CuVal = CC_NewVal
      .TpStr = AE_Format$(CP_SSSMAIN(wk_Px), .CuVal, 0, True)
      Call AE_CtSet(PP_SSSMAIN, wk_Px, .TpStr, .TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
   If AE_ErrorToInteger(Ck_Error) = 0 Or (pm_Status >= Cn_Status7 And PP_SSSMAIN.CheckErrNglct) Then
      If AE_IsNull_SSSMAIN(PP_SSSMAIN.SaveCV) And AE_IsNull_SSSMAIN(CC_NewVal) Or AE_NullCnv2_SSSMAIN(PP_SSSMAIN.SaveCV) = AE_NullCnv2_SSSMAIN(CC_NewVal) Then
         wk_Equal = True
      Else
         wk_Equal = False
         Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(wk_Px))
      End If
      If wk_Equal And ex_CheckRtnCode = 0 And pm_Status >= Cn_Status6 And pm_Status = .StatusC And Not PP_SSSMAIN.RecalcMode Then
         .ExVal = PP_SSSMAIN.SaveXV
         .ExStatus = PP_SSSMAIN.SaveExStatus
         Call AE_Later_SSSMAIN
         If pm_MoveCursor Then
            If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
         End If
      Else
         If pm_Status <> 0 Then .StatusC = pm_Status
         If pm_Status <> 0 Then .StatusF = pm_Status
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(wk_Px), CL_SSSMAIN(wk_Px))
         If Not PP_SSSMAIN.RecalcMode Then
            If PP_SSSMAIN.ErrorC = 0 Or wk_RecalcSw = False Then
               Call AE_Later_SSSMAIN
               If pm_MoveCursor Then
                  If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
               End If
            Else
               If pm_MoveCursor Then
                  If AE_CursorToError_SSSMAIN() = False Then
                     Call AE_Later_SSSMAIN
                     If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
                  End If
               End If
            End If
         End If
      End If
   Else
      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(wk_Px))
      Call AE_CheckSub2_SSSMAIN(wk_Tx, wk_Px, True)
      If AE_ErrorToInteger(Ck_Error) >= 0 Then
         PP_SSSMAIN.ErrorC = PP_SSSMAIN.ErrorC + 1
         wk_Bool = SSSMAIN_ErrorMsg(Ck_Error)
      Else
         wk_Bool = AE_MsgLibrary(PP_SSSMAIN, "PreCheck" & CStr(-Ck_Error))
      End If
   End If
   End With
End Sub

Sub AE_Check_SSSMAIN_UNTNM(ByVal CC_NewVal, ByVal pm_Status As Integer, ByVal pm_MoveCursor As Boolean, ByVal pm_HandIn As Boolean) 'Generated.
Dim wk_SaveMask As Boolean
Dim RC_ErrorC As Integer
Dim wk_RecalcSw As Boolean
Dim wk_Equal As Boolean
Dim wk_Tx As Integer
Dim wk_Px As Integer
   wk_Px = 43 + 31 * PP_SSSMAIN.De
   wk_Tx = AE_Tx(PP_SSSMAIN, wk_Px)
   With CP_SSSMAIN(wk_Px)
   Dim ex_CheckRtnCode As Integer
   ex_CheckRtnCode = .CheckRtnCode
   If .FormatClass = Cn_Code And .FormatChr <> "" And Not IsNull(CC_NewVal) Then CC_NewVal = AE_FormatC$(CP_SSSMAIN(wk_Px), CC_NewVal)
   If PP_SSSMAIN.De = PP_SSSMAIN.LastDe And AE_GetInOutMode(.InOutMode, PP_SSSMAIN.Mode) = Cn_InOutMode3 And PP_SSSMAIN.ActiveDe < 0 And Not PP_SSSMAIN.CheckErrNglct And Not PP_SSSMAIN.RecalcMode Then
      If IsNull(CC_NewVal) Then
         If pm_MoveCursor Then
            If AE_CursorDown_SSSMAIN(PP_SSSMAIN.Tx) = False Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
         End If
         Exit Sub
      ElseIf RTrim$(CC_NewVal) = RTrim$(.IniStr) Then
         If pm_MoveCursor Then
            If AE_CursorDown_SSSMAIN(PP_SSSMAIN.Tx) = False Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
         End If
         Exit Sub
      End If
   End If
   PP_SSSMAIN.SaveXV = .ExVal
   PP_SSSMAIN.SaveExStatus = .ExStatus
   .ExVal = .CuVal
   PP_SSSMAIN.SaveCV = .CuVal
   .ExStatus = .StatusF
   If IsNull(CC_NewVal) Then
      CC_NewVal = Space$(.MaxLength)
   ElseIf .Alignment = 1 And LenWid(CC_NewVal) < .MaxLength Then
      CC_NewVal = Space$(.MaxLength - LenWid(CC_NewVal)) & CC_NewVal
   End If
   .CuVal = CC_NewVal
   If Not PP_SSSMAIN.RecalcMode Then AE_StatusBar(PP_SSSMAIN.ScX) = "": AE_StatusCodeBar(PP_SSSMAIN.ScX) = ""
   Ck_Error = 0
   .CheckRtnCode = AE_ErrorToInteger(Ck_Error)
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
      .CuVal = CC_NewVal
      .TpStr = AE_Format$(CP_SSSMAIN(wk_Px), .CuVal, 0, True)
      Call AE_CtSet(PP_SSSMAIN, wk_Px, .TpStr, .TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
   If AE_ErrorToInteger(Ck_Error) = 0 Or (pm_Status >= Cn_Status7 And PP_SSSMAIN.CheckErrNglct) Then
      If AE_IsNull_SSSMAIN(PP_SSSMAIN.SaveCV) And AE_IsNull_SSSMAIN(CC_NewVal) Or AE_NullCnv2_SSSMAIN(PP_SSSMAIN.SaveCV) = AE_NullCnv2_SSSMAIN(CC_NewVal) Then
         wk_Equal = True
      Else
         wk_Equal = False
         Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(wk_Px))
      End If
      If wk_Equal And ex_CheckRtnCode = 0 And pm_Status >= Cn_Status6 And pm_Status = .StatusC And Not PP_SSSMAIN.RecalcMode Then
         .ExVal = PP_SSSMAIN.SaveXV
         .ExStatus = PP_SSSMAIN.SaveExStatus
         Call AE_Later_SSSMAIN
         If pm_MoveCursor Then
            If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
         End If
      Else
         If pm_Status <> 0 Then .StatusC = pm_Status
         If pm_Status <> 0 Then .StatusF = pm_Status
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(wk_Px), CL_SSSMAIN(wk_Px))
         If Not PP_SSSMAIN.RecalcMode Then
            If PP_SSSMAIN.ErrorC = 0 Or wk_RecalcSw = False Then
               Call AE_Later_SSSMAIN
               If pm_MoveCursor Then
                  If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
               End If
            Else
               If pm_MoveCursor Then
                  If AE_CursorToError_SSSMAIN() = False Then
                     Call AE_Later_SSSMAIN
                     If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
                  End If
               End If
            End If
         End If
      End If
   Else
      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(wk_Px))
      Call AE_CheckSub2_SSSMAIN(wk_Tx, wk_Px, True)
      If AE_ErrorToInteger(Ck_Error) >= 0 Then
         PP_SSSMAIN.ErrorC = PP_SSSMAIN.ErrorC + 1
         wk_Bool = SSSMAIN_ErrorMsg(Ck_Error)
      Else
         wk_Bool = AE_MsgLibrary(PP_SSSMAIN, "PreCheck" & CStr(-Ck_Error))
      End If
   End If
   End With
End Sub

Sub AE_Check_SSSMAIN_URISU(ByVal CC_NewVal, ByVal pm_Status As Integer, ByVal pm_MoveCursor As Boolean, ByVal pm_HandIn As Boolean) 'Generated.
Dim wk_SaveMask As Boolean
Dim RC_ErrorC As Integer
Dim wk_RecalcSw As Boolean
Dim wk_Equal As Boolean
Dim wk_Tx As Integer
Dim wk_Px As Integer
   wk_Px = 42 + 31 * PP_SSSMAIN.De
   wk_Tx = AE_Tx(PP_SSSMAIN, wk_Px)
   With CP_SSSMAIN(wk_Px)
   Dim ex_CheckRtnCode As Integer
   ex_CheckRtnCode = .CheckRtnCode
   If .FormatClass = Cn_Code And .FormatChr <> "" And Not IsNull(CC_NewVal) Then CC_NewVal = AE_FormatC$(CP_SSSMAIN(wk_Px), CC_NewVal)
   If PP_SSSMAIN.De = PP_SSSMAIN.LastDe And AE_GetInOutMode(.InOutMode, PP_SSSMAIN.Mode) = Cn_InOutMode3 And PP_SSSMAIN.ActiveDe < 0 And Not PP_SSSMAIN.CheckErrNglct And Not PP_SSSMAIN.RecalcMode Then
      If IsNull(CC_NewVal) Then
         If pm_MoveCursor Then
            If AE_CursorDown_SSSMAIN(PP_SSSMAIN.Tx) = False Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
         End If
         Exit Sub
      ElseIf RTrim$(CC_NewVal) = RTrim$(.IniStr) Then
         If pm_MoveCursor Then
            If AE_CursorDown_SSSMAIN(PP_SSSMAIN.Tx) = False Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
         End If
         Exit Sub
      End If
   End If
   PP_SSSMAIN.SaveXV = .ExVal
   PP_SSSMAIN.SaveExStatus = .ExStatus
   .ExVal = .CuVal
   PP_SSSMAIN.SaveCV = .CuVal
   .ExStatus = .StatusF
   .CuVal = CC_NewVal
   If Not PP_SSSMAIN.RecalcMode Then AE_StatusBar(PP_SSSMAIN.ScX) = "": AE_StatusCodeBar(PP_SSSMAIN.ScX) = ""
   If (.CheckRtnCode <> 0) Then
      Ck_Error = .CheckRtnCode
      Ck_Error = URISU_Check(AE_NullCnv1_SSSMAIN(CC_NewVal), AE_NullCnv1_SSSMAIN(CP_SSSMAIN(54 + 31 * PP_SSSMAIN.De).CuVal), AE_NullCnv1_SSSMAIN(CP_SSSMAIN(57 + 31 * PP_SSSMAIN.De).CuVal), AE_NullCnv1_SSSMAIN(CP_SSSMAIN(55 + 31 * PP_SSSMAIN.De).CuVal), AE_NullCnv2_SSSMAIN(CP_SSSMAIN(13).CuVal), AE_NullCnv2_SSSMAIN(CP_SSSMAIN(38 + 31 * PP_SSSMAIN.De).CuVal), AE_NullCnv2_SSSMAIN(CP_SSSMAIN(50 + 31 * PP_SSSMAIN.De).CuVal), AE_NullCnv2_SSSMAIN(CP_SSSMAIN(39 + 31 * PP_SSSMAIN.De).CuVal), _
AE_NullCnv2_SSSMAIN(CP_SSSMAIN(49 + 31 * PP_SSSMAIN.De).CuVal), PP_SSSMAIN.De2)
   Else
      Ck_Error = URISU_Check(AE_NullCnv1_SSSMAIN(CC_NewVal), AE_NullCnv1_SSSMAIN(CP_SSSMAIN(54 + 31 * PP_SSSMAIN.De).CuVal), AE_NullCnv1_SSSMAIN(CP_SSSMAIN(57 + 31 * PP_SSSMAIN.De).CuVal), AE_NullCnv1_SSSMAIN(CP_SSSMAIN(55 + 31 * PP_SSSMAIN.De).CuVal), AE_NullCnv2_SSSMAIN(CP_SSSMAIN(13).CuVal), AE_NullCnv2_SSSMAIN(CP_SSSMAIN(38 + 31 * PP_SSSMAIN.De).CuVal), AE_NullCnv2_SSSMAIN(CP_SSSMAIN(50 + 31 * PP_SSSMAIN.De).CuVal), AE_NullCnv2_SSSMAIN(CP_SSSMAIN(39 + 31 * PP_SSSMAIN.De).CuVal), _
AE_NullCnv2_SSSMAIN(CP_SSSMAIN(49 + 31 * PP_SSSMAIN.De).CuVal), PP_SSSMAIN.De2)
   End If
   .CheckRtnCode = AE_ErrorToInteger(Ck_Error)
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
      .CuVal = CC_NewVal
      .TpStr = AE_Format$(CP_SSSMAIN(wk_Px), .CuVal, 0, True)
      Call AE_CtSet(PP_SSSMAIN, wk_Px, .TpStr, .TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
   If AE_ErrorToInteger(Ck_Error) = 0 Or (pm_Status >= Cn_Status7 And PP_SSSMAIN.CheckErrNglct) Then
      If AE_IsNull_SSSMAIN(PP_SSSMAIN.SaveCV) And AE_IsNull_SSSMAIN(CC_NewVal) Or AE_NullCnv1_SSSMAIN(PP_SSSMAIN.SaveCV) = AE_NullCnv1_SSSMAIN(CC_NewVal) Then
         wk_Equal = True
      Else
         wk_Equal = False
         Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(wk_Px))
      End If
      If wk_Equal And ex_CheckRtnCode = 0 And pm_Status >= Cn_Status6 And pm_Status = .StatusC And Not PP_SSSMAIN.RecalcMode Then
         .ExVal = PP_SSSMAIN.SaveXV
         .ExStatus = PP_SSSMAIN.SaveExStatus
         Call AE_Later_SSSMAIN
         If pm_MoveCursor Then
            If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
         End If
      Else
         If pm_Status <> 0 Then .StatusC = pm_Status
         If pm_Status <> 0 Then .StatusF = pm_Status
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(wk_Px), CL_SSSMAIN(wk_Px))
         If Not PP_SSSMAIN.RecalcMode Then
            PP_SSSMAIN.DerivedOrigin = "BD_URISU"
            CP_SSSMAIN(64 + 31 * PP_SSSMAIN.De).ExVal = CP_SSSMAIN(64 + 31 * PP_SSSMAIN.De).CuVal 'FURIKN
            CP_SSSMAIN(64 + 31 * PP_SSSMAIN.De).ExStatus = CP_SSSMAIN(64 + 31 * PP_SSSMAIN.De).StatusC
            CP_SSSMAIN(66 + 31 * PP_SSSMAIN.De).ExVal = CP_SSSMAIN(66 + 31 * PP_SSSMAIN.De).CuVal 'GNKKN
            CP_SSSMAIN(66 + 31 * PP_SSSMAIN.De).ExStatus = CP_SSSMAIN(66 + 31 * PP_SSSMAIN.De).StatusC
            CP_SSSMAIN(68 + 31 * PP_SSSMAIN.De).ExVal = CP_SSSMAIN(68 + 31 * PP_SSSMAIN.De).CuVal 'SIKKN
            CP_SSSMAIN(68 + 31 * PP_SSSMAIN.De).ExStatus = CP_SSSMAIN(68 + 31 * PP_SSSMAIN.De).StatusC
            CP_SSSMAIN(58 + 31 * PP_SSSMAIN.De).ExVal = CP_SSSMAIN(58 + 31 * PP_SSSMAIN.De).CuVal 'URIKN
            CP_SSSMAIN(58 + 31 * PP_SSSMAIN.De).ExStatus = CP_SSSMAIN(58 + 31 * PP_SSSMAIN.De).StatusC
            CP_SSSMAIN(73).ExVal = CP_SSSMAIN(73).CuVal 'SBAFRUKN
            CP_SSSMAIN(73).ExStatus = CP_SSSMAIN(73).StatusC
            CP_SSSMAIN(59 + 31 * PP_SSSMAIN.De).ExVal = CP_SSSMAIN(59 + 31 * PP_SSSMAIN.De).CuVal 'UZEKN
            CP_SSSMAIN(59 + 31 * PP_SSSMAIN.De).ExStatus = CP_SSSMAIN(59 + 31 * PP_SSSMAIN.De).StatusC
            CP_SSSMAIN(61 + 31 * PP_SSSMAIN.De).ExVal = CP_SSSMAIN(61 + 31 * PP_SSSMAIN.De).CuVal 'ZKMURIKN
            CP_SSSMAIN(61 + 31 * PP_SSSMAIN.De).ExStatus = CP_SSSMAIN(61 + 31 * PP_SSSMAIN.De).StatusC
            CP_SSSMAIN(60 + 31 * PP_SSSMAIN.De).ExVal = CP_SSSMAIN(60 + 31 * PP_SSSMAIN.De).CuVal 'ZNKURIKN
            CP_SSSMAIN(60 + 31 * PP_SSSMAIN.De).ExStatus = CP_SSSMAIN(60 + 31 * PP_SSSMAIN.De).StatusC
            CP_SSSMAIN(70).ExVal = CP_SSSMAIN(70).CuVal 'SBAURIKN
            CP_SSSMAIN(70).ExStatus = CP_SSSMAIN(70).StatusC
            CP_SSSMAIN(62 + 31 * PP_SSSMAIN.De).ExVal = CP_SSSMAIN(62 + 31 * PP_SSSMAIN.De).CuVal 'ZKMUZEKN
            CP_SSSMAIN(62 + 31 * PP_SSSMAIN.De).ExStatus = CP_SSSMAIN(62 + 31 * PP_SSSMAIN.De).StatusC
            CP_SSSMAIN(71).ExVal = CP_SSSMAIN(71).CuVal 'SBAUZEKN
            CP_SSSMAIN(71).ExStatus = CP_SSSMAIN(71).StatusC
            CP_SSSMAIN(72).ExVal = CP_SSSMAIN(72).CuVal 'SBAUZKKN
            CP_SSSMAIN(72).ExStatus = CP_SSSMAIN(72).StatusC
            Call AE_Derived_SSSMAIN_BV_FURIKN(CP_SSSMAIN(64 + 31 * PP_SSSMAIN.De))
            Call AE_Derived_SSSMAIN_BV_GNKKN
            Call AE_Derived_SSSMAIN_BV_SIKKN(CP_SSSMAIN(68 + 31 * PP_SSSMAIN.De))
            Call AE_Derived_SSSMAIN_BV_URIKN(CP_SSSMAIN(58 + 31 * PP_SSSMAIN.De))
            PP_SSSMAIN.DerivedFrom = "BV_FURIKN"
            Call AE_Derived_SSSMAIN_TV_SBAFRUKN(PP_SSSMAIN, CP_SSSMAIN(73))
            PP_SSSMAIN.DerivedFrom = "BV_URIKN"
            Call AE_Derived_SSSMAIN_BV_UZEKN(PP_SSSMAIN.De2, CP_SSSMAIN(59 + 31 * PP_SSSMAIN.De))
            Call AE_Derived_SSSMAIN_BV_ZKMURIKN
            Call AE_Derived_SSSMAIN_BV_ZNKURIKN
            Call AE_Derived_SSSMAIN_TV_SBAURIKN(PP_SSSMAIN, CP_SSSMAIN(70))
            PP_SSSMAIN.DerivedFrom = "BV_UZEKN"
            Call AE_Derived_SSSMAIN_BV_ZKMUZEKN(PP_SSSMAIN.De2)
            PP_SSSMAIN.DerivedFrom = "BV_ZNKURIKN"
            Call AE_Derived_SSSMAIN_TV_SBAUZEKN(PP_SSSMAIN)
            PP_SSSMAIN.DerivedFrom = "BV_ZKMUZEKN"
            Call AE_Derived_SSSMAIN_TV_SBAUZKKN(PP_SSSMAIN)
            If PP_SSSMAIN.ErrorC = 0 Or wk_RecalcSw = False Then
               Call AE_Later_SSSMAIN
               If pm_MoveCursor Then
                  If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
               End If
            Else
               If pm_MoveCursor Then
                  If AE_CursorToError_SSSMAIN() = False Then
                     Call AE_Later_SSSMAIN
                     If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
                  End If
               End If
            End If
         End If
      End If
   Else
      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(wk_Px))
      Call AE_CheckSub2_SSSMAIN(wk_Tx, wk_Px, True)
      If AE_ErrorToInteger(Ck_Error) >= 0 Then
         PP_SSSMAIN.ErrorC = PP_SSSMAIN.ErrorC + 1
         wk_Bool = SSSMAIN_ErrorMsg(Ck_Error)
      Else
         wk_Bool = AE_MsgLibrary(PP_SSSMAIN, "PreCheck" & CStr(-Ck_Error))
      End If
   End If
   End With
End Sub

Sub AE_Check_SSSMAIN_HENRSNCD(ByVal CC_NewVal, ByVal pm_Status As Integer, ByVal pm_MoveCursor As Boolean, ByVal pm_HandIn As Boolean) 'Generated.
Dim wk_SaveMask As Boolean
Dim RC_ErrorC As Integer
Dim wk_RecalcSw As Boolean
Dim wk_Equal As Boolean
   With CP_SSSMAIN(4)
   Dim ex_CheckRtnCode As Integer
   ex_CheckRtnCode = .CheckRtnCode
   If .FormatClass = Cn_Code And .FormatChr <> "" And Not IsNull(CC_NewVal) Then CC_NewVal = AE_FormatC$(CP_SSSMAIN(4), CC_NewVal)
   If (.CheckRtnCode = 0) And pm_HandIn And (CC_NewVal = .CuVal Or (AE_IsNull_SSSMAIN(CC_NewVal) And AE_IsNull_SSSMAIN(.CuVal))) Then
      If Not PP_SSSMAIN.RecalcMode Then
         wk_SaveMask = PP_SSSMAIN.MaskMode
         PP_SSSMAIN.MaskMode = True
            .TpStr = AE_Format$(CP_SSSMAIN(4), .CuVal, 0, True)
            Call AE_CtSet(PP_SSSMAIN, 4, .TpStr, .TypeA, False)
         PP_SSSMAIN.MaskMode = wk_SaveMask
         If .StatusC = Cn_Status1 Then .StatusC = .StatusF
         If .StatusC >= Cn_Status6 Then
            If pm_MoveCursor Then
               If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
            End If
         Else
            Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(4), CL_SSSMAIN(4))
            Call AE_SetSel(PP_SSSMAIN, CP_SSSMAIN(4), AE_Controls(PP_SSSMAIN.CtB + 4))
         End If
      End If
      Exit Sub
   End If
   PP_SSSMAIN.SaveXV = .ExVal
   PP_SSSMAIN.SaveExStatus = .ExStatus
   .ExVal = .CuVal
   PP_SSSMAIN.SaveCV = .CuVal
   .ExStatus = .StatusF
   If IsNull(CC_NewVal) Then
      CC_NewVal = Space$(.MaxLength)
   ElseIf .Alignment = 1 And LenWid(CC_NewVal) < .MaxLength Then
      CC_NewVal = Space$(.MaxLength - LenWid(CC_NewVal)) & CC_NewVal
   End If
   .CuVal = CC_NewVal
   If Not PP_SSSMAIN.RecalcMode Then AE_StatusBar(PP_SSSMAIN.ScX) = "": AE_StatusCodeBar(PP_SSSMAIN.ScX) = ""
   If PP_SSSMAIN.RecalcMode Then
      Ck_Error = .CheckRtnCode
   ElseIf (.CheckRtnCode <> 0) Then
      Ck_Error = HENRSNCD_CheckC(AE_NullCnv2_SSSMAIN(CC_NewVal), PP_SSSMAIN.De2)
   Else
      Ck_Error = HENRSNCD_CheckC(AE_NullCnv2_SSSMAIN(CC_NewVal), PP_SSSMAIN.De2)
   End If
   .CheckRtnCode = AE_ErrorToInteger(Ck_Error)
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
      .CuVal = CC_NewVal
      .TpStr = AE_Format$(CP_SSSMAIN(4), .CuVal, 0, True)
      Call AE_CtSet(PP_SSSMAIN, 4, .TpStr, .TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
   If AE_ErrorToInteger(Ck_Error) = 0 Or (pm_Status >= Cn_Status7 And PP_SSSMAIN.CheckErrNglct) Then
      If AE_IsNull_SSSMAIN(PP_SSSMAIN.SaveCV) And AE_IsNull_SSSMAIN(CC_NewVal) Or AE_NullCnv2_SSSMAIN(PP_SSSMAIN.SaveCV) = AE_NullCnv2_SSSMAIN(CC_NewVal) Then
         wk_Equal = True
      Else
         wk_Equal = False
         Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(4))
      End If
      If wk_Equal And ex_CheckRtnCode = 0 And pm_Status >= Cn_Status6 And pm_Status = .StatusC And Not PP_SSSMAIN.RecalcMode Then
         .ExVal = PP_SSSMAIN.SaveXV
         .ExStatus = PP_SSSMAIN.SaveExStatus
         Call AE_Later_SSSMAIN
         If pm_MoveCursor Then
            If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
         End If
      Else
         If pm_Status <> 0 Then .StatusC = pm_Status
         If pm_Status <> 0 Then .StatusF = pm_Status
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(4), CL_SSSMAIN(4))
         If Not PP_SSSMAIN.RecalcMode Then
            If PP_SSSMAIN.ErrorC = 0 Or wk_RecalcSw = False Then
               Call AE_Later_SSSMAIN
               If pm_MoveCursor Then
                  If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
               End If
            Else
               If pm_MoveCursor Then
                  If AE_CursorToError_SSSMAIN() = False Then
                     Call AE_Later_SSSMAIN
                     If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
                  End If
               End If
            End If
         End If
      End If
   Else
      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(4))
      Call AE_CheckSub2_SSSMAIN(4, 4, True)
      If AE_ErrorToInteger(Ck_Error) >= 0 Then
         PP_SSSMAIN.ErrorC = PP_SSSMAIN.ErrorC + 1
         wk_Bool = SSSMAIN_ErrorMsg(Ck_Error)
      Else
         wk_Bool = AE_MsgLibrary(PP_SSSMAIN, "PreCheck" & CStr(-Ck_Error))
      End If
   End If
   End With
End Sub

Sub AE_Check_SSSMAIN_HENRSNNM(ByVal CC_NewVal, ByVal pm_Status As Integer, ByVal pm_MoveCursor As Boolean, ByVal pm_HandIn As Boolean) 'Generated.
Dim wk_SaveMask As Boolean
Dim RC_ErrorC As Integer
Dim wk_RecalcSw As Boolean
Dim wk_Equal As Boolean
   With CP_SSSMAIN(5)
   Dim ex_CheckRtnCode As Integer
   ex_CheckRtnCode = .CheckRtnCode
   If .FormatClass = Cn_Code And .FormatChr <> "" And Not IsNull(CC_NewVal) Then CC_NewVal = AE_FormatC$(CP_SSSMAIN(5), CC_NewVal)
   PP_SSSMAIN.SaveXV = .ExVal
   PP_SSSMAIN.SaveExStatus = .ExStatus
   .ExVal = .CuVal
   PP_SSSMAIN.SaveCV = .CuVal
   .ExStatus = .StatusF
   If IsNull(CC_NewVal) Then
      CC_NewVal = Space$(.MaxLength)
   ElseIf .Alignment = 1 And LenWid(CC_NewVal) < .MaxLength Then
      CC_NewVal = Space$(.MaxLength - LenWid(CC_NewVal)) & CC_NewVal
   End If
   .CuVal = CC_NewVal
   If Not PP_SSSMAIN.RecalcMode Then AE_StatusBar(PP_SSSMAIN.ScX) = "": AE_StatusCodeBar(PP_SSSMAIN.ScX) = ""
   Ck_Error = 0
   .CheckRtnCode = AE_ErrorToInteger(Ck_Error)
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
      .CuVal = CC_NewVal
      .TpStr = AE_Format$(CP_SSSMAIN(5), .CuVal, 0, True)
      Call AE_CtSet(PP_SSSMAIN, 5, .TpStr, .TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
   If AE_ErrorToInteger(Ck_Error) = 0 Or (pm_Status >= Cn_Status7 And PP_SSSMAIN.CheckErrNglct) Then
      If AE_IsNull_SSSMAIN(PP_SSSMAIN.SaveCV) And AE_IsNull_SSSMAIN(CC_NewVal) Or AE_NullCnv2_SSSMAIN(PP_SSSMAIN.SaveCV) = AE_NullCnv2_SSSMAIN(CC_NewVal) Then
         wk_Equal = True
      Else
         wk_Equal = False
         Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(5))
      End If
      If wk_Equal And ex_CheckRtnCode = 0 And pm_Status >= Cn_Status6 And pm_Status = .StatusC And Not PP_SSSMAIN.RecalcMode Then
         .ExVal = PP_SSSMAIN.SaveXV
         .ExStatus = PP_SSSMAIN.SaveExStatus
         Call AE_Later_SSSMAIN
         If pm_MoveCursor Then
            If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
         End If
      Else
         If pm_Status <> 0 Then .StatusC = pm_Status
         If pm_Status <> 0 Then .StatusF = pm_Status
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(5), CL_SSSMAIN(5))
         If Not PP_SSSMAIN.RecalcMode Then
            If PP_SSSMAIN.ErrorC = 0 Or wk_RecalcSw = False Then
               Call AE_Later_SSSMAIN
               If pm_MoveCursor Then
                  If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
               End If
            Else
               If pm_MoveCursor Then
                  If AE_CursorToError_SSSMAIN() = False Then
                     Call AE_Later_SSSMAIN
                     If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
                  End If
               End If
            End If
         End If
      End If
   Else
      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(5))
      Call AE_CheckSub2_SSSMAIN(5, 5, True)
      If AE_ErrorToInteger(Ck_Error) >= 0 Then
         PP_SSSMAIN.ErrorC = PP_SSSMAIN.ErrorC + 1
         wk_Bool = SSSMAIN_ErrorMsg(Ck_Error)
      Else
         wk_Bool = AE_MsgLibrary(PP_SSSMAIN, "PreCheck" & CStr(-Ck_Error))
      End If
   End If
   End With
End Sub

Sub AE_Check_SSSMAIN_HENSTTCD(ByVal CC_NewVal, ByVal pm_Status As Integer, ByVal pm_MoveCursor As Boolean, ByVal pm_HandIn As Boolean) 'Generated.
Dim wk_SaveMask As Boolean
Dim RC_ErrorC As Integer
Dim wk_RecalcSw As Boolean
Dim wk_Equal As Boolean
   With CP_SSSMAIN(6)
   Dim ex_CheckRtnCode As Integer
   ex_CheckRtnCode = .CheckRtnCode
   If .FormatClass = Cn_Code And .FormatChr <> "" And Not IsNull(CC_NewVal) Then CC_NewVal = AE_FormatC$(CP_SSSMAIN(6), CC_NewVal)
   If (.CheckRtnCode = 0) And pm_HandIn And (CC_NewVal = .CuVal Or (AE_IsNull_SSSMAIN(CC_NewVal) And AE_IsNull_SSSMAIN(.CuVal))) Then
      If Not PP_SSSMAIN.RecalcMode Then
         wk_SaveMask = PP_SSSMAIN.MaskMode
         PP_SSSMAIN.MaskMode = True
            .TpStr = AE_Format$(CP_SSSMAIN(6), .CuVal, 0, True)
            Call AE_CtSet(PP_SSSMAIN, 6, .TpStr, .TypeA, False)
         PP_SSSMAIN.MaskMode = wk_SaveMask
         If .StatusC = Cn_Status1 Then .StatusC = .StatusF
         If .StatusC >= Cn_Status6 Then
            If pm_MoveCursor Then
               If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
            End If
         Else
            Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(6), CL_SSSMAIN(6))
            Call AE_SetSel(PP_SSSMAIN, CP_SSSMAIN(6), AE_Controls(PP_SSSMAIN.CtB + 6))
         End If
      End If
      Exit Sub
   End If
   PP_SSSMAIN.SaveXV = .ExVal
   PP_SSSMAIN.SaveExStatus = .ExStatus
   .ExVal = .CuVal
   PP_SSSMAIN.SaveCV = .CuVal
   .ExStatus = .StatusF
   If IsNull(CC_NewVal) Then
      CC_NewVal = Space$(.MaxLength)
   ElseIf .Alignment = 1 And LenWid(CC_NewVal) < .MaxLength Then
      CC_NewVal = Space$(.MaxLength - LenWid(CC_NewVal)) & CC_NewVal
   End If
   .CuVal = CC_NewVal
   If Not PP_SSSMAIN.RecalcMode Then AE_StatusBar(PP_SSSMAIN.ScX) = "": AE_StatusCodeBar(PP_SSSMAIN.ScX) = ""
   If PP_SSSMAIN.RecalcMode Then
      Ck_Error = .CheckRtnCode
   ElseIf (.CheckRtnCode <> 0) Then
      Ck_Error = HENSTTCD_CheckC(AE_NullCnv2_SSSMAIN(CC_NewVal), PP_SSSMAIN.De2)
   Else
      Ck_Error = HENSTTCD_CheckC(AE_NullCnv2_SSSMAIN(CC_NewVal), PP_SSSMAIN.De2)
   End If
   .CheckRtnCode = AE_ErrorToInteger(Ck_Error)
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
      .CuVal = CC_NewVal
      .TpStr = AE_Format$(CP_SSSMAIN(6), .CuVal, 0, True)
      Call AE_CtSet(PP_SSSMAIN, 6, .TpStr, .TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
   If AE_ErrorToInteger(Ck_Error) = 0 Or (pm_Status >= Cn_Status7 And PP_SSSMAIN.CheckErrNglct) Then
      If AE_IsNull_SSSMAIN(PP_SSSMAIN.SaveCV) And AE_IsNull_SSSMAIN(CC_NewVal) Or AE_NullCnv2_SSSMAIN(PP_SSSMAIN.SaveCV) = AE_NullCnv2_SSSMAIN(CC_NewVal) Then
         wk_Equal = True
      Else
         wk_Equal = False
         Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(6))
      End If
      If wk_Equal And ex_CheckRtnCode = 0 And pm_Status >= Cn_Status6 And pm_Status = .StatusC And Not PP_SSSMAIN.RecalcMode Then
         .ExVal = PP_SSSMAIN.SaveXV
         .ExStatus = PP_SSSMAIN.SaveExStatus
         Call AE_Later_SSSMAIN
         If pm_MoveCursor Then
            If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
         End If
      Else
         If pm_Status <> 0 Then .StatusC = pm_Status
         If pm_Status <> 0 Then .StatusF = pm_Status
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(6), CL_SSSMAIN(6))
         If Not PP_SSSMAIN.RecalcMode Then
            If PP_SSSMAIN.ErrorC = 0 Or wk_RecalcSw = False Then
               Call AE_Later_SSSMAIN
               If pm_MoveCursor Then
                  If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
               End If
            Else
               If pm_MoveCursor Then
                  If AE_CursorToError_SSSMAIN() = False Then
                     Call AE_Later_SSSMAIN
                     If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
                  End If
               End If
            End If
         End If
      End If
   Else
      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(6))
      Call AE_CheckSub2_SSSMAIN(6, 6, True)
      If AE_ErrorToInteger(Ck_Error) >= 0 Then
         PP_SSSMAIN.ErrorC = PP_SSSMAIN.ErrorC + 1
         wk_Bool = SSSMAIN_ErrorMsg(Ck_Error)
      Else
         wk_Bool = AE_MsgLibrary(PP_SSSMAIN, "PreCheck" & CStr(-Ck_Error))
      End If
   End If
   End With
End Sub

Sub AE_Check_SSSMAIN_HENSTTNM(ByVal CC_NewVal, ByVal pm_Status As Integer, ByVal pm_MoveCursor As Boolean, ByVal pm_HandIn As Boolean) 'Generated.
Dim wk_SaveMask As Boolean
Dim RC_ErrorC As Integer
Dim wk_RecalcSw As Boolean
Dim wk_Equal As Boolean
   With CP_SSSMAIN(7)
   Dim ex_CheckRtnCode As Integer
   ex_CheckRtnCode = .CheckRtnCode
   If .FormatClass = Cn_Code And .FormatChr <> "" And Not IsNull(CC_NewVal) Then CC_NewVal = AE_FormatC$(CP_SSSMAIN(7), CC_NewVal)
   PP_SSSMAIN.SaveXV = .ExVal
   PP_SSSMAIN.SaveExStatus = .ExStatus
   .ExVal = .CuVal
   PP_SSSMAIN.SaveCV = .CuVal
   .ExStatus = .StatusF
   If IsNull(CC_NewVal) Then
      CC_NewVal = Space$(.MaxLength)
   ElseIf .Alignment = 1 And LenWid(CC_NewVal) < .MaxLength Then
      CC_NewVal = Space$(.MaxLength - LenWid(CC_NewVal)) & CC_NewVal
   End If
   .CuVal = CC_NewVal
   If Not PP_SSSMAIN.RecalcMode Then AE_StatusBar(PP_SSSMAIN.ScX) = "": AE_StatusCodeBar(PP_SSSMAIN.ScX) = ""
   Ck_Error = 0
   .CheckRtnCode = AE_ErrorToInteger(Ck_Error)
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
      .CuVal = CC_NewVal
      .TpStr = AE_Format$(CP_SSSMAIN(7), .CuVal, 0, True)
      Call AE_CtSet(PP_SSSMAIN, 7, .TpStr, .TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
   If AE_ErrorToInteger(Ck_Error) = 0 Or (pm_Status >= Cn_Status7 And PP_SSSMAIN.CheckErrNglct) Then
      If AE_IsNull_SSSMAIN(PP_SSSMAIN.SaveCV) And AE_IsNull_SSSMAIN(CC_NewVal) Or AE_NullCnv2_SSSMAIN(PP_SSSMAIN.SaveCV) = AE_NullCnv2_SSSMAIN(CC_NewVal) Then
         wk_Equal = True
      Else
         wk_Equal = False
         Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(7))
      End If
      If wk_Equal And ex_CheckRtnCode = 0 And pm_Status >= Cn_Status6 And pm_Status = .StatusC And Not PP_SSSMAIN.RecalcMode Then
         .ExVal = PP_SSSMAIN.SaveXV
         .ExStatus = PP_SSSMAIN.SaveExStatus
         Call AE_Later_SSSMAIN
         If pm_MoveCursor Then
            If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
         End If
      Else
         If pm_Status <> 0 Then .StatusC = pm_Status
         If pm_Status <> 0 Then .StatusF = pm_Status
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(7), CL_SSSMAIN(7))
         If Not PP_SSSMAIN.RecalcMode Then
            If PP_SSSMAIN.ErrorC = 0 Or wk_RecalcSw = False Then
               Call AE_Later_SSSMAIN
               If pm_MoveCursor Then
                  If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
               End If
            Else
               If pm_MoveCursor Then
                  If AE_CursorToError_SSSMAIN() = False Then
                     Call AE_Later_SSSMAIN
                     If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
                  End If
               End If
            End If
         End If
      End If
   Else
      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(7))
      Call AE_CheckSub2_SSSMAIN(7, 7, True)
      If AE_ErrorToInteger(Ck_Error) >= 0 Then
         PP_SSSMAIN.ErrorC = PP_SSSMAIN.ErrorC + 1
         wk_Bool = SSSMAIN_ErrorMsg(Ck_Error)
      Else
         wk_Bool = AE_MsgLibrary(PP_SSSMAIN, "PreCheck" & CStr(-Ck_Error))
      End If
   End If
   End With
End Sub

Sub AE_Check_SSSMAIN_JDNDT(ByVal CC_NewVal, ByVal pm_Status As Integer, ByVal pm_MoveCursor As Boolean, ByVal pm_HandIn As Boolean) 'Generated.
Dim wk_SaveMask As Boolean
Dim RC_ErrorC As Integer
Dim wk_RecalcSw As Boolean
Dim wk_Equal As Boolean
   With CP_SSSMAIN(12)
   Dim ex_CheckRtnCode As Integer
   ex_CheckRtnCode = .CheckRtnCode
   If .FormatClass = Cn_Code And .FormatChr <> "" And Not IsNull(CC_NewVal) Then CC_NewVal = AE_FormatC$(CP_SSSMAIN(12), CC_NewVal)
   PP_SSSMAIN.SaveXV = .ExVal
   PP_SSSMAIN.SaveExStatus = .ExStatus
   .ExVal = .CuVal
   PP_SSSMAIN.SaveCV = .CuVal
   .ExStatus = .StatusF
   If IsNull(CC_NewVal) Then
      CC_NewVal = Space$(.MaxLength)
   ElseIf .Alignment = 1 And LenWid(CC_NewVal) < .MaxLength Then
      CC_NewVal = Space$(.MaxLength - LenWid(CC_NewVal)) & CC_NewVal
   End If
   .CuVal = CC_NewVal
   If Not PP_SSSMAIN.RecalcMode Then AE_StatusBar(PP_SSSMAIN.ScX) = "": AE_StatusCodeBar(PP_SSSMAIN.ScX) = ""
   Ck_Error = 0
   .CheckRtnCode = AE_ErrorToInteger(Ck_Error)
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
      .CuVal = CC_NewVal
      .TpStr = AE_Format$(CP_SSSMAIN(12), .CuVal, 0, True)
      Call AE_CtSet(PP_SSSMAIN, 12, .TpStr, .TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
   If AE_ErrorToInteger(Ck_Error) = 0 Or (pm_Status >= Cn_Status7 And PP_SSSMAIN.CheckErrNglct) Then
      If AE_IsNull_SSSMAIN(PP_SSSMAIN.SaveCV) And AE_IsNull_SSSMAIN(CC_NewVal) Or AE_NullCnv2_SSSMAIN(PP_SSSMAIN.SaveCV) = AE_NullCnv2_SSSMAIN(CC_NewVal) Then
         wk_Equal = True
      Else
         wk_Equal = False
         Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(12))
      End If
      If wk_Equal And ex_CheckRtnCode = 0 And pm_Status >= Cn_Status6 And pm_Status = .StatusC And Not PP_SSSMAIN.RecalcMode Then
         .ExVal = PP_SSSMAIN.SaveXV
         .ExStatus = PP_SSSMAIN.SaveExStatus
         Call AE_Later_SSSMAIN
         If pm_MoveCursor Then
            If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
         End If
      Else
         If pm_Status <> 0 Then .StatusC = pm_Status
         If pm_Status <> 0 Then .StatusF = pm_Status
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(12), CL_SSSMAIN(12))
         If Not PP_SSSMAIN.RecalcMode Then
            If PP_SSSMAIN.ErrorC = 0 Or wk_RecalcSw = False Then
               Call AE_Later_SSSMAIN
               If pm_MoveCursor Then
                  If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
               End If
            Else
               If pm_MoveCursor Then
                  If AE_CursorToError_SSSMAIN() = False Then
                     Call AE_Later_SSSMAIN
                     If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
                  End If
               End If
            End If
         End If
      End If
   Else
      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(12))
      Call AE_CheckSub2_SSSMAIN(12, 12, True)
      If AE_ErrorToInteger(Ck_Error) >= 0 Then
         PP_SSSMAIN.ErrorC = PP_SSSMAIN.ErrorC + 1
         wk_Bool = SSSMAIN_ErrorMsg(Ck_Error)
      Else
         wk_Bool = AE_MsgLibrary(PP_SSSMAIN, "PreCheck" & CStr(-Ck_Error))
      End If
   End If
   End With
End Sub

Sub AE_Check_SSSMAIN_JDNNO(ByVal CC_NewVal, ByVal pm_Status As Integer, ByVal pm_MoveCursor As Boolean, ByVal pm_HandIn As Boolean) 'Generated.
Dim wk_SaveMask As Boolean
Dim RC_ErrorC As Integer
Dim wk_RecalcSw As Boolean
Dim wk_Equal As Boolean
   With CP_SSSMAIN(2)
   Dim ex_CheckRtnCode As Integer
   ex_CheckRtnCode = .CheckRtnCode
   If .FormatClass = Cn_Code And .FormatChr <> "" And Not IsNull(CC_NewVal) Then CC_NewVal = AE_FormatC$(CP_SSSMAIN(2), CC_NewVal)
   PP_SSSMAIN.SaveXV = .ExVal
   PP_SSSMAIN.SaveExStatus = .ExStatus
   .ExVal = .CuVal
   PP_SSSMAIN.SaveCV = .CuVal
   .ExStatus = .StatusF
   If IsNull(CC_NewVal) Then
      CC_NewVal = Space$(.MaxLength)
   ElseIf .Alignment = 1 And LenWid(CC_NewVal) < .MaxLength Then
      CC_NewVal = Space$(.MaxLength - LenWid(CC_NewVal)) & CC_NewVal
   End If
   .CuVal = CC_NewVal
   If Not PP_SSSMAIN.RecalcMode Then AE_StatusBar(PP_SSSMAIN.ScX) = "": AE_StatusCodeBar(PP_SSSMAIN.ScX) = ""
   Ck_Error = 0
   .CheckRtnCode = AE_ErrorToInteger(Ck_Error)
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
      .CuVal = CC_NewVal
      .TpStr = AE_Format$(CP_SSSMAIN(2), .CuVal, 0, True)
      Call AE_CtSet(PP_SSSMAIN, 2, .TpStr, .TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
   If AE_ErrorToInteger(Ck_Error) = 0 Or (pm_Status >= Cn_Status7 And PP_SSSMAIN.CheckErrNglct) Then
      If AE_IsNull_SSSMAIN(PP_SSSMAIN.SaveCV) And AE_IsNull_SSSMAIN(CC_NewVal) Or AE_NullCnv2_SSSMAIN(PP_SSSMAIN.SaveCV) = AE_NullCnv2_SSSMAIN(CC_NewVal) Then
         wk_Equal = True
      Else
         wk_Equal = False
         Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(2))
      End If
      If wk_Equal And ex_CheckRtnCode = 0 And pm_Status >= Cn_Status6 And pm_Status = .StatusC And Not PP_SSSMAIN.RecalcMode Then
         .ExVal = PP_SSSMAIN.SaveXV
         .ExStatus = PP_SSSMAIN.SaveExStatus
         Call AE_Later_SSSMAIN
         If pm_MoveCursor Then
            If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
         End If
      Else
         If pm_Status <> 0 Then .StatusC = pm_Status
         If pm_Status <> 0 Then .StatusF = pm_Status
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(2), CL_SSSMAIN(2))
         If Not PP_SSSMAIN.RecalcMode Then
            If PP_SSSMAIN.ErrorC = 0 Or wk_RecalcSw = False Then
               Call AE_Later_SSSMAIN
               If pm_MoveCursor Then
                  If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
               End If
            Else
               If pm_MoveCursor Then
                  If AE_CursorToError_SSSMAIN() = False Then
                     Call AE_Later_SSSMAIN
                     If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
                  End If
               End If
            End If
         End If
      End If
   Else
      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(2))
      Call AE_CheckSub2_SSSMAIN(2, 2, True)
      If AE_ErrorToInteger(Ck_Error) >= 0 Then
         PP_SSSMAIN.ErrorC = PP_SSSMAIN.ErrorC + 1
         wk_Bool = SSSMAIN_ErrorMsg(Ck_Error)
      Else
         wk_Bool = AE_MsgLibrary(PP_SSSMAIN, "PreCheck" & CStr(-Ck_Error))
      End If
   End If
   End With
End Sub

Sub AE_Check_SSSMAIN_NHSRN(ByVal CC_NewVal, ByVal pm_Status As Integer, ByVal pm_MoveCursor As Boolean, ByVal pm_HandIn As Boolean) 'Generated.
Dim wk_SaveMask As Boolean
Dim RC_ErrorC As Integer
Dim wk_RecalcSw As Boolean
Dim wk_Equal As Boolean
   With CP_SSSMAIN(15)
   Dim ex_CheckRtnCode As Integer
   ex_CheckRtnCode = .CheckRtnCode
   If .FormatClass = Cn_Code And .FormatChr <> "" And Not IsNull(CC_NewVal) Then CC_NewVal = AE_FormatC$(CP_SSSMAIN(15), CC_NewVal)
   PP_SSSMAIN.SaveXV = .ExVal
   PP_SSSMAIN.SaveExStatus = .ExStatus
   .ExVal = .CuVal
   PP_SSSMAIN.SaveCV = .CuVal
   .ExStatus = .StatusF
   If IsNull(CC_NewVal) Then
      CC_NewVal = Space$(.MaxLength)
   ElseIf .Alignment = 1 And LenWid(CC_NewVal) < .MaxLength Then
      CC_NewVal = Space$(.MaxLength - LenWid(CC_NewVal)) & CC_NewVal
   End If
   .CuVal = CC_NewVal
   If Not PP_SSSMAIN.RecalcMode Then AE_StatusBar(PP_SSSMAIN.ScX) = "": AE_StatusCodeBar(PP_SSSMAIN.ScX) = ""
   Ck_Error = 0
   .CheckRtnCode = AE_ErrorToInteger(Ck_Error)
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
      .CuVal = CC_NewVal
      .TpStr = AE_Format$(CP_SSSMAIN(15), .CuVal, 0, True)
      Call AE_CtSet(PP_SSSMAIN, 15, .TpStr, .TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
   If AE_ErrorToInteger(Ck_Error) = 0 Or (pm_Status >= Cn_Status7 And PP_SSSMAIN.CheckErrNglct) Then
      If AE_IsNull_SSSMAIN(PP_SSSMAIN.SaveCV) And AE_IsNull_SSSMAIN(CC_NewVal) Or AE_NullCnv2_SSSMAIN(PP_SSSMAIN.SaveCV) = AE_NullCnv2_SSSMAIN(CC_NewVal) Then
         wk_Equal = True
      Else
         wk_Equal = False
         Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(15))
      End If
      If wk_Equal And ex_CheckRtnCode = 0 And pm_Status >= Cn_Status6 And pm_Status = .StatusC And Not PP_SSSMAIN.RecalcMode Then
         .ExVal = PP_SSSMAIN.SaveXV
         .ExStatus = PP_SSSMAIN.SaveExStatus
         Call AE_Later_SSSMAIN
         If pm_MoveCursor Then
            If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
         End If
      Else
         If pm_Status <> 0 Then .StatusC = pm_Status
         If pm_Status <> 0 Then .StatusF = pm_Status
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(15), CL_SSSMAIN(15))
         If Not PP_SSSMAIN.RecalcMode Then
            If PP_SSSMAIN.ErrorC = 0 Or wk_RecalcSw = False Then
               Call AE_Later_SSSMAIN
               If pm_MoveCursor Then
                  If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
               End If
            Else
               If pm_MoveCursor Then
                  If AE_CursorToError_SSSMAIN() = False Then
                     Call AE_Later_SSSMAIN
                     If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
                  End If
               End If
            End If
         End If
      End If
   Else
      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(15))
      Call AE_CheckSub2_SSSMAIN(15, 15, True)
      If AE_ErrorToInteger(Ck_Error) >= 0 Then
         PP_SSSMAIN.ErrorC = PP_SSSMAIN.ErrorC + 1
         wk_Bool = SSSMAIN_ErrorMsg(Ck_Error)
      Else
         wk_Bool = AE_MsgLibrary(PP_SSSMAIN, "PreCheck" & CStr(-Ck_Error))
      End If
   End If
   End With
End Sub

Sub AE_Check_SSSMAIN_ODNDT(ByVal CC_NewVal, ByVal pm_Status As Integer, ByVal pm_MoveCursor As Boolean, ByVal pm_HandIn As Boolean) 'Generated.
Dim wk_SaveMask As Boolean
Dim RC_ErrorC As Integer
Dim wk_RecalcSw As Boolean
Dim wk_Equal As Boolean
   With CP_SSSMAIN(13)
   Dim ex_CheckRtnCode As Integer
   ex_CheckRtnCode = .CheckRtnCode
   If .FormatClass = Cn_Code And .FormatChr <> "" And Not IsNull(CC_NewVal) Then CC_NewVal = AE_FormatC$(CP_SSSMAIN(13), CC_NewVal)
   PP_SSSMAIN.SaveXV = .ExVal
   PP_SSSMAIN.SaveExStatus = .ExStatus
   .ExVal = .CuVal
   PP_SSSMAIN.SaveCV = .CuVal
   .ExStatus = .StatusF
   If IsNull(CC_NewVal) Then
      CC_NewVal = Space$(.MaxLength)
   ElseIf .Alignment = 1 And LenWid(CC_NewVal) < .MaxLength Then
      CC_NewVal = Space$(.MaxLength - LenWid(CC_NewVal)) & CC_NewVal
   End If
   .CuVal = CC_NewVal
   If Not PP_SSSMAIN.RecalcMode Then AE_StatusBar(PP_SSSMAIN.ScX) = "": AE_StatusCodeBar(PP_SSSMAIN.ScX) = ""
   Ck_Error = 0
   .CheckRtnCode = AE_ErrorToInteger(Ck_Error)
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
      .CuVal = CC_NewVal
      .TpStr = AE_Format$(CP_SSSMAIN(13), .CuVal, 0, True)
      Call AE_CtSet(PP_SSSMAIN, 13, .TpStr, .TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
   If AE_ErrorToInteger(Ck_Error) = 0 Or (pm_Status >= Cn_Status7 And PP_SSSMAIN.CheckErrNglct) Then
      If AE_IsNull_SSSMAIN(PP_SSSMAIN.SaveCV) And AE_IsNull_SSSMAIN(CC_NewVal) Or AE_NullCnv2_SSSMAIN(PP_SSSMAIN.SaveCV) = AE_NullCnv2_SSSMAIN(CC_NewVal) Then
         wk_Equal = True
      Else
         wk_Equal = False
         Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(13))
      End If
      If wk_Equal And ex_CheckRtnCode = 0 And pm_Status >= Cn_Status6 And pm_Status = .StatusC And Not PP_SSSMAIN.RecalcMode Then
         .ExVal = PP_SSSMAIN.SaveXV
         .ExStatus = PP_SSSMAIN.SaveExStatus
         Call AE_Later_SSSMAIN
         If pm_MoveCursor Then
            If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
         End If
      Else
         If pm_Status <> 0 Then .StatusC = pm_Status
         If pm_Status <> 0 Then .StatusF = pm_Status
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(13), CL_SSSMAIN(13))
         If Not PP_SSSMAIN.RecalcMode Then
            If PP_SSSMAIN.ErrorC = 0 Or wk_RecalcSw = False Then
               Call AE_Later_SSSMAIN
               If pm_MoveCursor Then
                  If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
               End If
            Else
               If pm_MoveCursor Then
                  If AE_CursorToError_SSSMAIN() = False Then
                     Call AE_Later_SSSMAIN
                     If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
                  End If
               End If
            End If
         End If
      End If
   Else
      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(13))
      Call AE_CheckSub2_SSSMAIN(13, 13, True)
      If AE_ErrorToInteger(Ck_Error) >= 0 Then
         PP_SSSMAIN.ErrorC = PP_SSSMAIN.ErrorC + 1
         wk_Bool = SSSMAIN_ErrorMsg(Ck_Error)
      Else
         wk_Bool = AE_MsgLibrary(PP_SSSMAIN, "PreCheck" & CStr(-Ck_Error))
      End If
   End If
   End With
End Sub

Sub AE_Check_SSSMAIN_OPEID(ByVal CC_NewVal, ByVal pm_Status As Integer, ByVal pm_MoveCursor As Boolean, ByVal pm_HandIn As Boolean) 'Generated.
Dim wk_SaveMask As Boolean
Dim RC_ErrorC As Integer
Dim wk_RecalcSw As Boolean
Dim wk_Equal As Boolean
   With CP_SSSMAIN(16)
   Dim ex_CheckRtnCode As Integer
   ex_CheckRtnCode = .CheckRtnCode
   If .FormatClass = Cn_Code And .FormatChr <> "" And Not IsNull(CC_NewVal) Then CC_NewVal = AE_FormatC$(CP_SSSMAIN(16), CC_NewVal)
   PP_SSSMAIN.SaveXV = .ExVal
   PP_SSSMAIN.SaveExStatus = .ExStatus
   .ExVal = .CuVal
   PP_SSSMAIN.SaveCV = .CuVal
   .ExStatus = .StatusF
   If IsNull(CC_NewVal) Then
      CC_NewVal = Space$(.MaxLength)
   ElseIf .Alignment = 1 And LenWid(CC_NewVal) < .MaxLength Then
      CC_NewVal = Space$(.MaxLength - LenWid(CC_NewVal)) & CC_NewVal
   End If
   .CuVal = CC_NewVal
   If Not PP_SSSMAIN.RecalcMode Then AE_StatusBar(PP_SSSMAIN.ScX) = "": AE_StatusCodeBar(PP_SSSMAIN.ScX) = ""
   Ck_Error = 0
   .CheckRtnCode = AE_ErrorToInteger(Ck_Error)
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
      .CuVal = CC_NewVal
      .TpStr = AE_Format$(CP_SSSMAIN(16), .CuVal, 0, True)
      Call AE_CtSet(PP_SSSMAIN, 16, .TpStr, .TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
   If AE_ErrorToInteger(Ck_Error) = 0 Or (pm_Status >= Cn_Status7 And PP_SSSMAIN.CheckErrNglct) Then
      If AE_IsNull_SSSMAIN(PP_SSSMAIN.SaveCV) And AE_IsNull_SSSMAIN(CC_NewVal) Or AE_NullCnv2_SSSMAIN(PP_SSSMAIN.SaveCV) = AE_NullCnv2_SSSMAIN(CC_NewVal) Then
         wk_Equal = True
      Else
         wk_Equal = False
         Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(16))
      End If
      If wk_Equal And ex_CheckRtnCode = 0 And pm_Status >= Cn_Status6 And pm_Status = .StatusC And Not PP_SSSMAIN.RecalcMode Then
         .ExVal = PP_SSSMAIN.SaveXV
         .ExStatus = PP_SSSMAIN.SaveExStatus
         Call AE_Later_SSSMAIN
         If pm_MoveCursor Then
            If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
         End If
      Else
         If pm_Status <> 0 Then .StatusC = pm_Status
         If pm_Status <> 0 Then .StatusF = pm_Status
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(16), CL_SSSMAIN(16))
         If Not PP_SSSMAIN.RecalcMode Then
            If PP_SSSMAIN.ErrorC = 0 Or wk_RecalcSw = False Then
               Call AE_Later_SSSMAIN
               If pm_MoveCursor Then
                  If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
               End If
            Else
               If pm_MoveCursor Then
                  If AE_CursorToError_SSSMAIN() = False Then
                     Call AE_Later_SSSMAIN
                     If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
                  End If
               End If
            End If
         End If
      End If
   Else
      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(16))
      Call AE_CheckSub2_SSSMAIN(16, 16, True)
      If AE_ErrorToInteger(Ck_Error) >= 0 Then
         PP_SSSMAIN.ErrorC = PP_SSSMAIN.ErrorC + 1
         wk_Bool = SSSMAIN_ErrorMsg(Ck_Error)
      Else
         wk_Bool = AE_MsgLibrary(PP_SSSMAIN, "PreCheck" & CStr(-Ck_Error))
      End If
   End If
   End With
End Sub

Sub AE_Check_SSSMAIN_OPENM(ByVal CC_NewVal, ByVal pm_Status As Integer, ByVal pm_MoveCursor As Boolean, ByVal pm_HandIn As Boolean) 'Generated.
Dim wk_SaveMask As Boolean
Dim RC_ErrorC As Integer
Dim wk_RecalcSw As Boolean
Dim wk_Equal As Boolean
   With CP_SSSMAIN(17)
   Dim ex_CheckRtnCode As Integer
   ex_CheckRtnCode = .CheckRtnCode
   If .FormatClass = Cn_Code And .FormatChr <> "" And Not IsNull(CC_NewVal) Then CC_NewVal = AE_FormatC$(CP_SSSMAIN(17), CC_NewVal)
   PP_SSSMAIN.SaveXV = .ExVal
   PP_SSSMAIN.SaveExStatus = .ExStatus
   .ExVal = .CuVal
   PP_SSSMAIN.SaveCV = .CuVal
   .ExStatus = .StatusF
   If IsNull(CC_NewVal) Then
      CC_NewVal = Space$(.MaxLength)
   ElseIf .Alignment = 1 And LenWid(CC_NewVal) < .MaxLength Then
      CC_NewVal = Space$(.MaxLength - LenWid(CC_NewVal)) & CC_NewVal
   End If
   .CuVal = CC_NewVal
   If Not PP_SSSMAIN.RecalcMode Then AE_StatusBar(PP_SSSMAIN.ScX) = "": AE_StatusCodeBar(PP_SSSMAIN.ScX) = ""
   Ck_Error = 0
   .CheckRtnCode = AE_ErrorToInteger(Ck_Error)
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
      .CuVal = CC_NewVal
      .TpStr = AE_Format$(CP_SSSMAIN(17), .CuVal, 0, True)
      Call AE_CtSet(PP_SSSMAIN, 17, .TpStr, .TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
   If AE_ErrorToInteger(Ck_Error) = 0 Or (pm_Status >= Cn_Status7 And PP_SSSMAIN.CheckErrNglct) Then
      If AE_IsNull_SSSMAIN(PP_SSSMAIN.SaveCV) And AE_IsNull_SSSMAIN(CC_NewVal) Or AE_NullCnv2_SSSMAIN(PP_SSSMAIN.SaveCV) = AE_NullCnv2_SSSMAIN(CC_NewVal) Then
         wk_Equal = True
      Else
         wk_Equal = False
         Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(17))
      End If
      If wk_Equal And ex_CheckRtnCode = 0 And pm_Status >= Cn_Status6 And pm_Status = .StatusC And Not PP_SSSMAIN.RecalcMode Then
         .ExVal = PP_SSSMAIN.SaveXV
         .ExStatus = PP_SSSMAIN.SaveExStatus
         Call AE_Later_SSSMAIN
         If pm_MoveCursor Then
            If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
         End If
      Else
         If pm_Status <> 0 Then .StatusC = pm_Status
         If pm_Status <> 0 Then .StatusF = pm_Status
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(17), CL_SSSMAIN(17))
         If Not PP_SSSMAIN.RecalcMode Then
            If PP_SSSMAIN.ErrorC = 0 Or wk_RecalcSw = False Then
               Call AE_Later_SSSMAIN
               If pm_MoveCursor Then
                  If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
               End If
            Else
               If pm_MoveCursor Then
                  If AE_CursorToError_SSSMAIN() = False Then
                     Call AE_Later_SSSMAIN
                     If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
                  End If
               End If
            End If
         End If
      End If
   Else
      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(17))
      Call AE_CheckSub2_SSSMAIN(17, 17, True)
      If AE_ErrorToInteger(Ck_Error) >= 0 Then
         PP_SSSMAIN.ErrorC = PP_SSSMAIN.ErrorC + 1
         wk_Bool = SSSMAIN_ErrorMsg(Ck_Error)
      Else
         wk_Bool = AE_MsgLibrary(PP_SSSMAIN, "PreCheck" & CStr(-Ck_Error))
      End If
   End If
   End With
End Sub

Sub AE_Check_SSSMAIN_OUTSOUCD(ByVal CC_NewVal, ByVal pm_Status As Integer, ByVal pm_MoveCursor As Boolean, ByVal pm_HandIn As Boolean) 'Generated.
Dim wk_SaveMask As Boolean
Dim RC_ErrorC As Integer
Dim wk_RecalcSw As Boolean
Dim wk_Equal As Boolean
   With CP_SSSMAIN(8)
   Dim ex_CheckRtnCode As Integer
   ex_CheckRtnCode = .CheckRtnCode
   If .FormatClass = Cn_Code And .FormatChr <> "" And Not IsNull(CC_NewVal) Then CC_NewVal = AE_FormatC$(CP_SSSMAIN(8), CC_NewVal)
   If (.CheckRtnCode = 0) And pm_HandIn And (CC_NewVal = .CuVal Or (AE_IsNull_SSSMAIN(CC_NewVal) And AE_IsNull_SSSMAIN(.CuVal))) Then
      If Not PP_SSSMAIN.RecalcMode Then
         wk_SaveMask = PP_SSSMAIN.MaskMode
         PP_SSSMAIN.MaskMode = True
            .TpStr = AE_Format$(CP_SSSMAIN(8), .CuVal, 0, True)
            Call AE_CtSet(PP_SSSMAIN, 8, .TpStr, .TypeA, False)
         PP_SSSMAIN.MaskMode = wk_SaveMask
         If .StatusC = Cn_Status1 Then .StatusC = .StatusF
         If .StatusC >= Cn_Status6 Then
            If pm_MoveCursor Then
               If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
            End If
         Else
            Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(8), CL_SSSMAIN(8))
            Call AE_SetSel(PP_SSSMAIN, CP_SSSMAIN(8), AE_Controls(PP_SSSMAIN.CtB + 8))
         End If
      End If
      Exit Sub
   End If
   PP_SSSMAIN.SaveXV = .ExVal
   PP_SSSMAIN.SaveExStatus = .ExStatus
   .ExVal = .CuVal
   PP_SSSMAIN.SaveCV = .CuVal
   .ExStatus = .StatusF
   If IsNull(CC_NewVal) Then
      CC_NewVal = Space$(.MaxLength)
   ElseIf .Alignment = 1 And LenWid(CC_NewVal) < .MaxLength Then
      CC_NewVal = Space$(.MaxLength - LenWid(CC_NewVal)) & CC_NewVal
   End If
   .CuVal = CC_NewVal
   If Not PP_SSSMAIN.RecalcMode Then AE_StatusBar(PP_SSSMAIN.ScX) = "": AE_StatusCodeBar(PP_SSSMAIN.ScX) = ""
   If PP_SSSMAIN.RecalcMode Then
      Ck_Error = .CheckRtnCode
   ElseIf (.CheckRtnCode <> 0) Then
      Ck_Error = OUTSOUCD_CheckC(AE_NullCnv2_SSSMAIN(CC_NewVal), PP_SSSMAIN.De2)
   Else
      Ck_Error = OUTSOUCD_CheckC(AE_NullCnv2_SSSMAIN(CC_NewVal), PP_SSSMAIN.De2)
   End If
   .CheckRtnCode = AE_ErrorToInteger(Ck_Error)
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
      .CuVal = CC_NewVal
      .TpStr = AE_Format$(CP_SSSMAIN(8), .CuVal, 0, True)
      Call AE_CtSet(PP_SSSMAIN, 8, .TpStr, .TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
   If AE_ErrorToInteger(Ck_Error) = 0 Or (pm_Status >= Cn_Status7 And PP_SSSMAIN.CheckErrNglct) Then
      If AE_IsNull_SSSMAIN(PP_SSSMAIN.SaveCV) And AE_IsNull_SSSMAIN(CC_NewVal) Or AE_NullCnv2_SSSMAIN(PP_SSSMAIN.SaveCV) = AE_NullCnv2_SSSMAIN(CC_NewVal) Then
         wk_Equal = True
      Else
         wk_Equal = False
         Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(8))
      End If
      If wk_Equal And ex_CheckRtnCode = 0 And pm_Status >= Cn_Status6 And pm_Status = .StatusC And Not PP_SSSMAIN.RecalcMode Then
         .ExVal = PP_SSSMAIN.SaveXV
         .ExStatus = PP_SSSMAIN.SaveExStatus
         Call AE_Later_SSSMAIN
         If pm_MoveCursor Then
            If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
         End If
      Else
         If pm_Status <> 0 Then .StatusC = pm_Status
         If pm_Status <> 0 Then .StatusF = pm_Status
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(8), CL_SSSMAIN(8))
         If Not PP_SSSMAIN.RecalcMode Then
            If PP_SSSMAIN.ErrorC = 0 Or wk_RecalcSw = False Then
               Call AE_Later_SSSMAIN
               If pm_MoveCursor Then
                  If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
               End If
            Else
               If pm_MoveCursor Then
                  If AE_CursorToError_SSSMAIN() = False Then
                     Call AE_Later_SSSMAIN
                     If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
                  End If
               End If
            End If
         End If
      End If
   Else
      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(8))
      Call AE_CheckSub2_SSSMAIN(8, 8, True)
      If AE_ErrorToInteger(Ck_Error) >= 0 Then
         PP_SSSMAIN.ErrorC = PP_SSSMAIN.ErrorC + 1
         wk_Bool = SSSMAIN_ErrorMsg(Ck_Error)
      Else
         wk_Bool = AE_MsgLibrary(PP_SSSMAIN, "PreCheck" & CStr(-Ck_Error))
      End If
   End If
   End With
End Sub

Sub AE_Check_SSSMAIN_OUTSOUNM(ByVal CC_NewVal, ByVal pm_Status As Integer, ByVal pm_MoveCursor As Boolean, ByVal pm_HandIn As Boolean) 'Generated.
Dim wk_SaveMask As Boolean
Dim RC_ErrorC As Integer
Dim wk_RecalcSw As Boolean
Dim wk_Equal As Boolean
   With CP_SSSMAIN(9)
   Dim ex_CheckRtnCode As Integer
   ex_CheckRtnCode = .CheckRtnCode
   If .FormatClass = Cn_Code And .FormatChr <> "" And Not IsNull(CC_NewVal) Then CC_NewVal = AE_FormatC$(CP_SSSMAIN(9), CC_NewVal)
   PP_SSSMAIN.SaveXV = .ExVal
   PP_SSSMAIN.SaveExStatus = .ExStatus
   .ExVal = .CuVal
   PP_SSSMAIN.SaveCV = .CuVal
   .ExStatus = .StatusF
   If IsNull(CC_NewVal) Then
      CC_NewVal = Space$(.MaxLength)
   ElseIf .Alignment = 1 And LenWid(CC_NewVal) < .MaxLength Then
      CC_NewVal = Space$(.MaxLength - LenWid(CC_NewVal)) & CC_NewVal
   End If
   .CuVal = CC_NewVal
   If Not PP_SSSMAIN.RecalcMode Then AE_StatusBar(PP_SSSMAIN.ScX) = "": AE_StatusCodeBar(PP_SSSMAIN.ScX) = ""
   Ck_Error = 0
   .CheckRtnCode = AE_ErrorToInteger(Ck_Error)
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
      .CuVal = CC_NewVal
      .TpStr = AE_Format$(CP_SSSMAIN(9), .CuVal, 0, True)
      Call AE_CtSet(PP_SSSMAIN, 9, .TpStr, .TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
   If AE_ErrorToInteger(Ck_Error) = 0 Or (pm_Status >= Cn_Status7 And PP_SSSMAIN.CheckErrNglct) Then
      If AE_IsNull_SSSMAIN(PP_SSSMAIN.SaveCV) And AE_IsNull_SSSMAIN(CC_NewVal) Or AE_NullCnv2_SSSMAIN(PP_SSSMAIN.SaveCV) = AE_NullCnv2_SSSMAIN(CC_NewVal) Then
         wk_Equal = True
      Else
         wk_Equal = False
         Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(9))
      End If
      If wk_Equal And ex_CheckRtnCode = 0 And pm_Status >= Cn_Status6 And pm_Status = .StatusC And Not PP_SSSMAIN.RecalcMode Then
         .ExVal = PP_SSSMAIN.SaveXV
         .ExStatus = PP_SSSMAIN.SaveExStatus
         Call AE_Later_SSSMAIN
         If pm_MoveCursor Then
            If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
         End If
      Else
         If pm_Status <> 0 Then .StatusC = pm_Status
         If pm_Status <> 0 Then .StatusF = pm_Status
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(9), CL_SSSMAIN(9))
         If Not PP_SSSMAIN.RecalcMode Then
            If PP_SSSMAIN.ErrorC = 0 Or wk_RecalcSw = False Then
               Call AE_Later_SSSMAIN
               If pm_MoveCursor Then
                  If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
               End If
            Else
               If pm_MoveCursor Then
                  If AE_CursorToError_SSSMAIN() = False Then
                     Call AE_Later_SSSMAIN
                     If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
                  End If
               End If
            End If
         End If
      End If
   Else
      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(9))
      Call AE_CheckSub2_SSSMAIN(9, 9, True)
      If AE_ErrorToInteger(Ck_Error) >= 0 Then
         PP_SSSMAIN.ErrorC = PP_SSSMAIN.ErrorC + 1
         wk_Bool = SSSMAIN_ErrorMsg(Ck_Error)
      Else
         wk_Bool = AE_MsgLibrary(PP_SSSMAIN, "PreCheck" & CStr(-Ck_Error))
      End If
   End If
   End With
End Sub

Sub AE_Check_SSSMAIN_SOUCD(ByVal CC_NewVal, ByVal pm_Status As Integer, ByVal pm_MoveCursor As Boolean, ByVal pm_HandIn As Boolean) 'Generated.
Dim wk_SaveMask As Boolean
Dim RC_ErrorC As Integer
Dim wk_RecalcSw As Boolean
Dim wk_Equal As Boolean
   With CP_SSSMAIN(10)
   Dim ex_CheckRtnCode As Integer
   ex_CheckRtnCode = .CheckRtnCode
   If .FormatClass = Cn_Code And .FormatChr <> "" And Not IsNull(CC_NewVal) Then CC_NewVal = AE_FormatC$(CP_SSSMAIN(10), CC_NewVal)
   PP_SSSMAIN.SaveXV = .ExVal
   PP_SSSMAIN.SaveExStatus = .ExStatus
   .ExVal = .CuVal
   PP_SSSMAIN.SaveCV = .CuVal
   .ExStatus = .StatusF
   If IsNull(CC_NewVal) Then
      CC_NewVal = Space$(.MaxLength)
   ElseIf .Alignment = 1 And LenWid(CC_NewVal) < .MaxLength Then
      CC_NewVal = Space$(.MaxLength - LenWid(CC_NewVal)) & CC_NewVal
   End If
   .CuVal = CC_NewVal
   If Not PP_SSSMAIN.RecalcMode Then AE_StatusBar(PP_SSSMAIN.ScX) = "": AE_StatusCodeBar(PP_SSSMAIN.ScX) = ""
   Ck_Error = 0
   .CheckRtnCode = AE_ErrorToInteger(Ck_Error)
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
      .CuVal = CC_NewVal
      .TpStr = AE_Format$(CP_SSSMAIN(10), .CuVal, 0, True)
      Call AE_CtSet(PP_SSSMAIN, 10, .TpStr, .TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
   If AE_ErrorToInteger(Ck_Error) = 0 Or (pm_Status >= Cn_Status7 And PP_SSSMAIN.CheckErrNglct) Then
      If AE_IsNull_SSSMAIN(PP_SSSMAIN.SaveCV) And AE_IsNull_SSSMAIN(CC_NewVal) Or AE_NullCnv2_SSSMAIN(PP_SSSMAIN.SaveCV) = AE_NullCnv2_SSSMAIN(CC_NewVal) Then
         wk_Equal = True
      Else
         wk_Equal = False
         Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(10))
      End If
      If wk_Equal And ex_CheckRtnCode = 0 And pm_Status >= Cn_Status6 And pm_Status = .StatusC And Not PP_SSSMAIN.RecalcMode Then
         .ExVal = PP_SSSMAIN.SaveXV
         .ExStatus = PP_SSSMAIN.SaveExStatus
         Call AE_Later_SSSMAIN
         If pm_MoveCursor Then
            If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
         End If
      Else
         If pm_Status <> 0 Then .StatusC = pm_Status
         If pm_Status <> 0 Then .StatusF = pm_Status
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(10), CL_SSSMAIN(10))
         If Not PP_SSSMAIN.RecalcMode Then
            If PP_SSSMAIN.ErrorC = 0 Or wk_RecalcSw = False Then
               Call AE_Later_SSSMAIN
               If pm_MoveCursor Then
                  If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
               End If
            Else
               If pm_MoveCursor Then
                  If AE_CursorToError_SSSMAIN() = False Then
                     Call AE_Later_SSSMAIN
                     If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
                  End If
               End If
            End If
         End If
      End If
   Else
      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(10))
      Call AE_CheckSub2_SSSMAIN(10, 10, True)
      If AE_ErrorToInteger(Ck_Error) >= 0 Then
         PP_SSSMAIN.ErrorC = PP_SSSMAIN.ErrorC + 1
         wk_Bool = SSSMAIN_ErrorMsg(Ck_Error)
      Else
         wk_Bool = AE_MsgLibrary(PP_SSSMAIN, "PreCheck" & CStr(-Ck_Error))
      End If
   End If
   End With
End Sub

Sub AE_Check_SSSMAIN_SOUNM(ByVal CC_NewVal, ByVal pm_Status As Integer, ByVal pm_MoveCursor As Boolean, ByVal pm_HandIn As Boolean) 'Generated.
Dim wk_SaveMask As Boolean
Dim RC_ErrorC As Integer
Dim wk_RecalcSw As Boolean
Dim wk_Equal As Boolean
   With CP_SSSMAIN(11)
   Dim ex_CheckRtnCode As Integer
   ex_CheckRtnCode = .CheckRtnCode
   If .FormatClass = Cn_Code And .FormatChr <> "" And Not IsNull(CC_NewVal) Then CC_NewVal = AE_FormatC$(CP_SSSMAIN(11), CC_NewVal)
   PP_SSSMAIN.SaveXV = .ExVal
   PP_SSSMAIN.SaveExStatus = .ExStatus
   .ExVal = .CuVal
   PP_SSSMAIN.SaveCV = .CuVal
   .ExStatus = .StatusF
   If IsNull(CC_NewVal) Then
      CC_NewVal = Space$(.MaxLength)
   ElseIf .Alignment = 1 And LenWid(CC_NewVal) < .MaxLength Then
      CC_NewVal = Space$(.MaxLength - LenWid(CC_NewVal)) & CC_NewVal
   End If
   .CuVal = CC_NewVal
   If Not PP_SSSMAIN.RecalcMode Then AE_StatusBar(PP_SSSMAIN.ScX) = "": AE_StatusCodeBar(PP_SSSMAIN.ScX) = ""
   Ck_Error = 0
   .CheckRtnCode = AE_ErrorToInteger(Ck_Error)
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
      .CuVal = CC_NewVal
      .TpStr = AE_Format$(CP_SSSMAIN(11), .CuVal, 0, True)
      Call AE_CtSet(PP_SSSMAIN, 11, .TpStr, .TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
   If AE_ErrorToInteger(Ck_Error) = 0 Or (pm_Status >= Cn_Status7 And PP_SSSMAIN.CheckErrNglct) Then
      If AE_IsNull_SSSMAIN(PP_SSSMAIN.SaveCV) And AE_IsNull_SSSMAIN(CC_NewVal) Or AE_NullCnv2_SSSMAIN(PP_SSSMAIN.SaveCV) = AE_NullCnv2_SSSMAIN(CC_NewVal) Then
         wk_Equal = True
      Else
         wk_Equal = False
         Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(11))
      End If
      If wk_Equal And ex_CheckRtnCode = 0 And pm_Status >= Cn_Status6 And pm_Status = .StatusC And Not PP_SSSMAIN.RecalcMode Then
         .ExVal = PP_SSSMAIN.SaveXV
         .ExStatus = PP_SSSMAIN.SaveExStatus
         Call AE_Later_SSSMAIN
         If pm_MoveCursor Then
            If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
         End If
      Else
         If pm_Status <> 0 Then .StatusC = pm_Status
         If pm_Status <> 0 Then .StatusF = pm_Status
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(11), CL_SSSMAIN(11))
         If Not PP_SSSMAIN.RecalcMode Then
            If PP_SSSMAIN.ErrorC = 0 Or wk_RecalcSw = False Then
               Call AE_Later_SSSMAIN
               If pm_MoveCursor Then
                  If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
               End If
            Else
               If pm_MoveCursor Then
                  If AE_CursorToError_SSSMAIN() = False Then
                     Call AE_Later_SSSMAIN
                     If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
                  End If
               End If
            End If
         End If
      End If
   Else
      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(11))
      Call AE_CheckSub2_SSSMAIN(11, 11, True)
      If AE_ErrorToInteger(Ck_Error) >= 0 Then
         PP_SSSMAIN.ErrorC = PP_SSSMAIN.ErrorC + 1
         wk_Bool = SSSMAIN_ErrorMsg(Ck_Error)
      Else
         wk_Bool = AE_MsgLibrary(PP_SSSMAIN, "PreCheck" & CStr(-Ck_Error))
      End If
   End If
   End With
End Sub

Sub AE_Check_SSSMAIN_SRANO(ByVal CC_NewVal, ByVal pm_Status As Integer, ByVal pm_MoveCursor As Boolean, ByVal pm_HandIn As Boolean) 'Generated.
Dim wk_SaveMask As Boolean
Dim RC_ErrorC As Integer
Dim wk_RecalcSw As Boolean
Dim wk_Equal As Boolean
   With CP_SSSMAIN(0)
   Dim ex_CheckRtnCode As Integer
   ex_CheckRtnCode = .CheckRtnCode
   If .FormatClass = Cn_Code And .FormatChr <> "" And Not IsNull(CC_NewVal) Then CC_NewVal = AE_FormatC$(CP_SSSMAIN(0), CC_NewVal)
   If (.CheckRtnCode = 0) And pm_HandIn And (CC_NewVal = .CuVal Or (AE_IsNull_SSSMAIN(CC_NewVal) And AE_IsNull_SSSMAIN(.CuVal))) Then
      If Not PP_SSSMAIN.RecalcMode Then
         wk_SaveMask = PP_SSSMAIN.MaskMode
         PP_SSSMAIN.MaskMode = True
            .TpStr = AE_Format$(CP_SSSMAIN(0), .CuVal, 0, True)
            Call AE_CtSet(PP_SSSMAIN, 0, .TpStr, .TypeA, False)
         PP_SSSMAIN.MaskMode = wk_SaveMask
         If .StatusC = Cn_Status1 Then .StatusC = .StatusF
         If .StatusC >= Cn_Status6 Then
            If pm_MoveCursor Then
               If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
            End If
         Else
            Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(0), CL_SSSMAIN(0))
            Call AE_SetSel(PP_SSSMAIN, CP_SSSMAIN(0), AE_Controls(PP_SSSMAIN.CtB + 0))
         End If
      End If
      Exit Sub
   End If
   PP_SSSMAIN.SaveXV = .ExVal
   PP_SSSMAIN.SaveExStatus = .ExStatus
   .ExVal = .CuVal
   PP_SSSMAIN.SaveCV = .CuVal
   .ExStatus = .StatusF
   If IsNull(CC_NewVal) Then
      CC_NewVal = Space$(.MaxLength)
   ElseIf .Alignment = 1 And LenWid(CC_NewVal) < .MaxLength Then
      CC_NewVal = Space$(.MaxLength - LenWid(CC_NewVal)) & CC_NewVal
   End If
   .CuVal = CC_NewVal
   If Not PP_SSSMAIN.RecalcMode Then AE_StatusBar(PP_SSSMAIN.ScX) = "": AE_StatusCodeBar(PP_SSSMAIN.ScX) = ""
   CC_NewVal = AE_NullCnv2_SSSMAIN(CC_NewVal)
   If PP_SSSMAIN.RecalcMode Then
      Ck_Error = .CheckRtnCode
   ElseIf (.CheckRtnCode <> 0) Then
      Ck_Error = SRANO_CheckC(CC_NewVal, PP_SSSMAIN, CP_SSSMAIN(0), 10)
   Else
      Ck_Error = SRANO_CheckC(CC_NewVal, PP_SSSMAIN, CP_SSSMAIN(0), 10)
   End If
   .CheckRtnCode = AE_ErrorToInteger(Ck_Error)
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
      .CuVal = CC_NewVal
      .TpStr = AE_Format$(CP_SSSMAIN(0), .CuVal, 0, True)
      Call AE_CtSet(PP_SSSMAIN, 0, .TpStr, .TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
   If AE_ErrorToInteger(Ck_Error) = 0 Or (pm_Status >= Cn_Status7 And PP_SSSMAIN.CheckErrNglct) Then
      If AE_IsNull_SSSMAIN(PP_SSSMAIN.SaveCV) And AE_IsNull_SSSMAIN(CC_NewVal) Or AE_NullCnv2_SSSMAIN(PP_SSSMAIN.SaveCV) = AE_NullCnv2_SSSMAIN(CC_NewVal) Then
         wk_Equal = True
      Else
         wk_Equal = False
         Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(0))
      End If
      If wk_Equal And ex_CheckRtnCode = 0 And pm_Status >= Cn_Status6 And pm_Status = .StatusC And Not PP_SSSMAIN.RecalcMode Then
         .ExVal = PP_SSSMAIN.SaveXV
         .ExStatus = PP_SSSMAIN.SaveExStatus
         Call AE_Later_SSSMAIN
         If pm_MoveCursor Then
            If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
         End If
      Else
         If pm_Status <> 0 Then .StatusC = pm_Status
         If pm_Status <> 0 Then .StatusF = pm_Status
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(0), CL_SSSMAIN(0))
         If Not PP_SSSMAIN.RecalcMode Then
            If PP_SSSMAIN.ErrorC = 0 Or wk_RecalcSw = False Then
               Call AE_Later_SSSMAIN
               If pm_MoveCursor Then
                  If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
               End If
            Else
               If pm_MoveCursor Then
                  If AE_CursorToError_SSSMAIN() = False Then
                     Call AE_Later_SSSMAIN
                     If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
                  End If
               End If
            End If
         End If
      End If
   Else
      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(0))
      Call AE_CheckSub2_SSSMAIN(0, 0, True)
      If AE_ErrorToInteger(Ck_Error) >= 0 Then
         PP_SSSMAIN.ErrorC = PP_SSSMAIN.ErrorC + 1
         wk_Bool = SSSMAIN_ErrorMsg(Ck_Error)
      Else
         wk_Bool = AE_MsgLibrary(PP_SSSMAIN, "PreCheck" & CStr(-Ck_Error))
      End If
   End If
   End With
End Sub

Sub AE_Check_SSSMAIN_TOKRN(ByVal CC_NewVal, ByVal pm_Status As Integer, ByVal pm_MoveCursor As Boolean, ByVal pm_HandIn As Boolean) 'Generated.
Dim wk_SaveMask As Boolean
Dim RC_ErrorC As Integer
Dim wk_RecalcSw As Boolean
Dim wk_Equal As Boolean
   With CP_SSSMAIN(14)
   Dim ex_CheckRtnCode As Integer
   ex_CheckRtnCode = .CheckRtnCode
   If .FormatClass = Cn_Code And .FormatChr <> "" And Not IsNull(CC_NewVal) Then CC_NewVal = AE_FormatC$(CP_SSSMAIN(14), CC_NewVal)
   PP_SSSMAIN.SaveXV = .ExVal
   PP_SSSMAIN.SaveExStatus = .ExStatus
   .ExVal = .CuVal
   PP_SSSMAIN.SaveCV = .CuVal
   .ExStatus = .StatusF
   If IsNull(CC_NewVal) Then
      CC_NewVal = Space$(.MaxLength)
   ElseIf .Alignment = 1 And LenWid(CC_NewVal) < .MaxLength Then
      CC_NewVal = Space$(.MaxLength - LenWid(CC_NewVal)) & CC_NewVal
   End If
   .CuVal = CC_NewVal
   If Not PP_SSSMAIN.RecalcMode Then AE_StatusBar(PP_SSSMAIN.ScX) = "": AE_StatusCodeBar(PP_SSSMAIN.ScX) = ""
   Ck_Error = 0
   .CheckRtnCode = AE_ErrorToInteger(Ck_Error)
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
      .CuVal = CC_NewVal
      .TpStr = AE_Format$(CP_SSSMAIN(14), .CuVal, 0, True)
      Call AE_CtSet(PP_SSSMAIN, 14, .TpStr, .TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
   If AE_ErrorToInteger(Ck_Error) = 0 Or (pm_Status >= Cn_Status7 And PP_SSSMAIN.CheckErrNglct) Then
      If AE_IsNull_SSSMAIN(PP_SSSMAIN.SaveCV) And AE_IsNull_SSSMAIN(CC_NewVal) Or AE_NullCnv2_SSSMAIN(PP_SSSMAIN.SaveCV) = AE_NullCnv2_SSSMAIN(CC_NewVal) Then
         wk_Equal = True
      Else
         wk_Equal = False
         Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(14))
      End If
      If wk_Equal And ex_CheckRtnCode = 0 And pm_Status >= Cn_Status6 And pm_Status = .StatusC And Not PP_SSSMAIN.RecalcMode Then
         .ExVal = PP_SSSMAIN.SaveXV
         .ExStatus = PP_SSSMAIN.SaveExStatus
         Call AE_Later_SSSMAIN
         If pm_MoveCursor Then
            If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
         End If
      Else
         If pm_Status <> 0 Then .StatusC = pm_Status
         If pm_Status <> 0 Then .StatusF = pm_Status
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(14), CL_SSSMAIN(14))
         If Not PP_SSSMAIN.RecalcMode Then
            If PP_SSSMAIN.ErrorC = 0 Or wk_RecalcSw = False Then
               Call AE_Later_SSSMAIN
               If pm_MoveCursor Then
                  If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
               End If
            Else
               If pm_MoveCursor Then
                  If AE_CursorToError_SSSMAIN() = False Then
                     Call AE_Later_SSSMAIN
                     If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
                  End If
               End If
            End If
         End If
      End If
   Else
      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(14))
      Call AE_CheckSub2_SSSMAIN(14, 14, True)
      If AE_ErrorToInteger(Ck_Error) >= 0 Then
         PP_SSSMAIN.ErrorC = PP_SSSMAIN.ErrorC + 1
         wk_Bool = SSSMAIN_ErrorMsg(Ck_Error)
      Else
         wk_Bool = AE_MsgLibrary(PP_SSSMAIN, "PreCheck" & CStr(-Ck_Error))
      End If
   End If
   End With
End Sub

Sub AE_Check_SSSMAIN_UDNDT(ByVal CC_NewVal, ByVal pm_Status As Integer, ByVal pm_MoveCursor As Boolean, ByVal pm_HandIn As Boolean) 'Generated.
Dim wk_SaveMask As Boolean
Dim RC_ErrorC As Integer
Dim wk_RecalcSw As Boolean
Dim wk_Equal As Boolean
   With CP_SSSMAIN(3)
   Dim ex_CheckRtnCode As Integer
   ex_CheckRtnCode = .CheckRtnCode
   If .FormatClass = Cn_Code And .FormatChr <> "" And Not IsNull(CC_NewVal) Then CC_NewVal = AE_FormatC$(CP_SSSMAIN(3), CC_NewVal)
   PP_SSSMAIN.SaveXV = .ExVal
   PP_SSSMAIN.SaveExStatus = .ExStatus
   .ExVal = .CuVal
   PP_SSSMAIN.SaveCV = .CuVal
   .ExStatus = .StatusF
   If IsNull(CC_NewVal) Then
      CC_NewVal = Space$(.MaxLength)
   ElseIf .Alignment = 1 And LenWid(CC_NewVal) < .MaxLength Then
      CC_NewVal = Space$(.MaxLength - LenWid(CC_NewVal)) & CC_NewVal
   End If
   .CuVal = CC_NewVal
   If Not PP_SSSMAIN.RecalcMode Then AE_StatusBar(PP_SSSMAIN.ScX) = "": AE_StatusCodeBar(PP_SSSMAIN.ScX) = ""
   If (.CheckRtnCode <> 0) Then
      Ck_Error = .CheckRtnCode
      Ck_Error = UDNDT_Check(AE_NullCnv2_SSSMAIN(CC_NewVal))
   Else
      Ck_Error = UDNDT_Check(AE_NullCnv2_SSSMAIN(CC_NewVal))
   End If
   .CheckRtnCode = AE_ErrorToInteger(Ck_Error)
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
      .CuVal = CC_NewVal
      .TpStr = AE_Format$(CP_SSSMAIN(3), .CuVal, 0, True)
      Call AE_CtSet(PP_SSSMAIN, 3, .TpStr, .TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
   If AE_ErrorToInteger(Ck_Error) = 0 Or (pm_Status >= Cn_Status7 And PP_SSSMAIN.CheckErrNglct) Then
      If AE_IsNull_SSSMAIN(PP_SSSMAIN.SaveCV) And AE_IsNull_SSSMAIN(CC_NewVal) Or AE_NullCnv2_SSSMAIN(PP_SSSMAIN.SaveCV) = AE_NullCnv2_SSSMAIN(CC_NewVal) Then
         wk_Equal = True
      Else
         wk_Equal = False
         Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(3))
      End If
      If wk_Equal And ex_CheckRtnCode = 0 And pm_Status >= Cn_Status6 And pm_Status = .StatusC And Not PP_SSSMAIN.RecalcMode Then
         .ExVal = PP_SSSMAIN.SaveXV
         .ExStatus = PP_SSSMAIN.SaveExStatus
         Call AE_Later_SSSMAIN
         If pm_MoveCursor Then
            If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
         End If
      Else
         If pm_Status <> 0 Then .StatusC = pm_Status
         If pm_Status <> 0 Then .StatusF = pm_Status
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(3), CL_SSSMAIN(3))
         If Not PP_SSSMAIN.RecalcMode Then
            PP_SSSMAIN.DerivedOrigin = "HD_UDNDT"
            CP_SSSMAIN(20).ExVal = CP_SSSMAIN(20).CuVal 'ENTDT
            CP_SSSMAIN(20).ExStatus = CP_SSSMAIN(20).StatusC
            CP_SSSMAIN(71).ExVal = CP_SSSMAIN(71).CuVal 'SBAUZEKN
            CP_SSSMAIN(71).ExStatus = CP_SSSMAIN(71).StatusC
            CP_SSSMAIN(72).ExVal = CP_SSSMAIN(72).CuVal 'SBAUZKKN
            CP_SSSMAIN(72).ExStatus = CP_SSSMAIN(72).StatusC
            Call AE_Derived_SSSMAIN_HV_ENTDT
            Call AE_Derived_SSSMAIN_TV_SBAUZEKN(PP_SSSMAIN)
            Call AE_Derived_SSSMAIN_TV_SBAUZKKN(PP_SSSMAIN)
            If CC_NewVal = PP_SSSMAIN.SaveCV Then
               PP_SSSMAIN.DerivedOrigin = "HD_UDNDT"
               Call AE_RecalcBd_SSSMAIN: wk_RecalcSw = True
            ElseIf AE_IsNull_SSSMAIN(CC_NewVal) And AE_IsNull_SSSMAIN(PP_SSSMAIN.SaveCV) Then
            Else
               PP_SSSMAIN.DerivedOrigin = "HD_UDNDT"
               Call AE_RecalcBd_SSSMAIN: wk_RecalcSw = True
            End If
            If PP_SSSMAIN.ErrorC = 0 Or wk_RecalcSw = False Then
               Call AE_Later_SSSMAIN
               If pm_MoveCursor Then
                  If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
               End If
            Else
               If pm_MoveCursor Then
                  If AE_CursorToError_SSSMAIN() = False Then
                     Call AE_Later_SSSMAIN
                     If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
                  End If
               End If
            End If
         End If
      End If
   Else
      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(3))
      Call AE_CheckSub2_SSSMAIN(3, 3, True)
      If AE_ErrorToInteger(Ck_Error) >= 0 Then
         PP_SSSMAIN.ErrorC = PP_SSSMAIN.ErrorC + 1
         wk_Bool = SSSMAIN_ErrorMsg(Ck_Error)
      Else
         wk_Bool = AE_MsgLibrary(PP_SSSMAIN, "PreCheck" & CStr(-Ck_Error))
      End If
   End If
   End With
End Sub

Sub AE_Check_SSSMAIN_UDNNO(ByVal CC_NewVal, ByVal pm_Status As Integer, ByVal pm_MoveCursor As Boolean, ByVal pm_HandIn As Boolean) 'Generated.
Dim wk_SaveMask As Boolean
Dim RC_ErrorC As Integer
Dim wk_RecalcSw As Boolean
Dim wk_Equal As Boolean
   With CP_SSSMAIN(1)
   Dim ex_CheckRtnCode As Integer
   ex_CheckRtnCode = .CheckRtnCode
   If .FormatClass = Cn_Code And .FormatChr <> "" And Not IsNull(CC_NewVal) Then CC_NewVal = AE_FormatC$(CP_SSSMAIN(1), CC_NewVal)
   If (.CheckRtnCode = 0) And pm_HandIn And (CC_NewVal = .CuVal Or (AE_IsNull_SSSMAIN(CC_NewVal) And AE_IsNull_SSSMAIN(.CuVal))) Then
      If Not PP_SSSMAIN.RecalcMode Then
         wk_SaveMask = PP_SSSMAIN.MaskMode
         PP_SSSMAIN.MaskMode = True
            .TpStr = AE_Format$(CP_SSSMAIN(1), .CuVal, 0, True)
            Call AE_CtSet(PP_SSSMAIN, 1, .TpStr, .TypeA, False)
         PP_SSSMAIN.MaskMode = wk_SaveMask
         If .StatusC = Cn_Status1 Then .StatusC = .StatusF
         If .StatusC >= Cn_Status6 Then
            If pm_MoveCursor Then
               If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
            End If
         Else
            Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(1), CL_SSSMAIN(1))
            Call AE_SetSel(PP_SSSMAIN, CP_SSSMAIN(1), AE_Controls(PP_SSSMAIN.CtB + 1))
         End If
      End If
      Exit Sub
   End If
   PP_SSSMAIN.SaveXV = .ExVal
   PP_SSSMAIN.SaveExStatus = .ExStatus
   .ExVal = .CuVal
   PP_SSSMAIN.SaveCV = .CuVal
   .ExStatus = .StatusF
   If IsNull(CC_NewVal) Then
      CC_NewVal = Space$(.MaxLength)
   ElseIf .Alignment = 1 And LenWid(CC_NewVal) < .MaxLength Then
      CC_NewVal = Space$(.MaxLength - LenWid(CC_NewVal)) & CC_NewVal
   End If
   .CuVal = CC_NewVal
   If Not PP_SSSMAIN.RecalcMode Then AE_StatusBar(PP_SSSMAIN.ScX) = "": AE_StatusCodeBar(PP_SSSMAIN.ScX) = ""
   CC_NewVal = AE_NullCnv2_SSSMAIN(CC_NewVal)
   If PP_SSSMAIN.RecalcMode Then
      Ck_Error = .CheckRtnCode
   ElseIf (.CheckRtnCode <> 0) Then
      Ck_Error = UDNNO_CheckC(CC_NewVal, PP_SSSMAIN, CP_SSSMAIN(1))
   Else
      Ck_Error = UDNNO_CheckC(CC_NewVal, PP_SSSMAIN, CP_SSSMAIN(1))
   End If
   .CheckRtnCode = AE_ErrorToInteger(Ck_Error)
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
      .CuVal = CC_NewVal
      .TpStr = AE_Format$(CP_SSSMAIN(1), .CuVal, 0, True)
      Call AE_CtSet(PP_SSSMAIN, 1, .TpStr, .TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
   If AE_ErrorToInteger(Ck_Error) = 0 Or (pm_Status >= Cn_Status7 And PP_SSSMAIN.CheckErrNglct) Then
      If AE_IsNull_SSSMAIN(PP_SSSMAIN.SaveCV) And AE_IsNull_SSSMAIN(CC_NewVal) Or AE_NullCnv2_SSSMAIN(PP_SSSMAIN.SaveCV) = AE_NullCnv2_SSSMAIN(CC_NewVal) Then
         wk_Equal = True
      Else
         wk_Equal = False
         Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(1))
      End If
      If wk_Equal And ex_CheckRtnCode = 0 And pm_Status >= Cn_Status6 And pm_Status = .StatusC And Not PP_SSSMAIN.RecalcMode Then
         .ExVal = PP_SSSMAIN.SaveXV
         .ExStatus = PP_SSSMAIN.SaveExStatus
         Call AE_Later_SSSMAIN
         If pm_MoveCursor Then
            If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
         End If
      Else
         If pm_Status <> 0 Then .StatusC = pm_Status
         If pm_Status <> 0 Then .StatusF = pm_Status
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(1), CL_SSSMAIN(1))
         If Not PP_SSSMAIN.RecalcMode Then
            If PP_SSSMAIN.ErrorC = 0 Or wk_RecalcSw = False Then
               Call AE_Later_SSSMAIN
               If pm_MoveCursor Then
                  If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
               End If
            Else
               If pm_MoveCursor Then
                  If AE_CursorToError_SSSMAIN() = False Then
                     Call AE_Later_SSSMAIN
                     If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
                  End If
               End If
            End If
         End If
      End If
   Else
      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(1))
      Call AE_CheckSub2_SSSMAIN(1, 1, True)
      If AE_ErrorToInteger(Ck_Error) >= 0 Then
         PP_SSSMAIN.ErrorC = PP_SSSMAIN.ErrorC + 1
         wk_Bool = SSSMAIN_ErrorMsg(Ck_Error)
      Else
         wk_Bool = AE_MsgLibrary(PP_SSSMAIN, "PreCheck" & CStr(-Ck_Error))
      End If
   End If
   End With
End Sub

Sub AE_Check_SSSMAIN_UDNCM(ByVal CC_NewVal, ByVal pm_Status As Integer, ByVal pm_MoveCursor As Boolean, ByVal pm_HandIn As Boolean) 'Generated.
Dim wk_SaveMask As Boolean
Dim RC_ErrorC As Integer
Dim wk_RecalcSw As Boolean
Dim wk_Equal As Boolean
   With CP_SSSMAIN(69)
   Dim ex_CheckRtnCode As Integer
   ex_CheckRtnCode = .CheckRtnCode
   If .FormatClass = Cn_Code And .FormatChr <> "" And Not IsNull(CC_NewVal) Then CC_NewVal = AE_FormatC$(CP_SSSMAIN(69), CC_NewVal)
   PP_SSSMAIN.SaveXV = .ExVal
   PP_SSSMAIN.SaveExStatus = .ExStatus
   .ExVal = .CuVal
   PP_SSSMAIN.SaveCV = .CuVal
   .ExStatus = .StatusF
   If IsNull(CC_NewVal) Then
      CC_NewVal = Space$(.MaxLength)
   ElseIf .Alignment = 1 And LenWid(CC_NewVal) < .MaxLength Then
      CC_NewVal = Space$(.MaxLength - LenWid(CC_NewVal)) & CC_NewVal
   End If
   .CuVal = CC_NewVal
   If Not PP_SSSMAIN.RecalcMode Then AE_StatusBar(PP_SSSMAIN.ScX) = "": AE_StatusCodeBar(PP_SSSMAIN.ScX) = ""
   Ck_Error = 0
   .CheckRtnCode = AE_ErrorToInteger(Ck_Error)
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
      .CuVal = CC_NewVal
      .TpStr = AE_Format$(CP_SSSMAIN(69), .CuVal, 0, True)
      Call AE_CtSet(PP_SSSMAIN, 69, .TpStr, .TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
   If AE_ErrorToInteger(Ck_Error) = 0 Or (pm_Status >= Cn_Status7 And PP_SSSMAIN.CheckErrNglct) Then
      If AE_IsNull_SSSMAIN(PP_SSSMAIN.SaveCV) And AE_IsNull_SSSMAIN(CC_NewVal) Or AE_NullCnv2_SSSMAIN(PP_SSSMAIN.SaveCV) = AE_NullCnv2_SSSMAIN(CC_NewVal) Then
         wk_Equal = True
      Else
         wk_Equal = False
         Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(69))
      End If
      If wk_Equal And ex_CheckRtnCode = 0 And pm_Status >= Cn_Status6 And pm_Status = .StatusC And Not PP_SSSMAIN.RecalcMode Then
         .ExVal = PP_SSSMAIN.SaveXV
         .ExStatus = PP_SSSMAIN.SaveExStatus
         Call AE_Later_SSSMAIN
         If pm_MoveCursor Then
            If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
         End If
      Else
         If pm_Status <> 0 Then .StatusC = pm_Status
         If pm_Status <> 0 Then .StatusF = pm_Status
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(69), CL_SSSMAIN(69))
         If Not PP_SSSMAIN.RecalcMode Then
            If PP_SSSMAIN.ErrorC = 0 Or wk_RecalcSw = False Then
               Call AE_Later_SSSMAIN
               If pm_MoveCursor Then
                  If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
               End If
            Else
               If pm_MoveCursor Then
                  If AE_CursorToError_SSSMAIN() = False Then
                     Call AE_Later_SSSMAIN
                     If AE_CursorSkip_SSSMAIN() = False And PP_SSSMAIN.CursorDirection = Cn_Direction1 Then Call AE_CursorSub_SSSMAIN(AE_ExecuteX_SSSMAIN())
                  End If
               End If
            End If
         End If
      End If
   Else
      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(69))
      Call AE_CheckSub2_SSSMAIN(24, 69, True)
      If AE_ErrorToInteger(Ck_Error) >= 0 Then
         PP_SSSMAIN.ErrorC = PP_SSSMAIN.ErrorC + 1
         wk_Bool = SSSMAIN_ErrorMsg(Ck_Error)
      Else
         wk_Bool = AE_MsgLibrary(PP_SSSMAIN, "PreCheck" & CStr(-Ck_Error))
      End If
   End If
   End With
End Sub

Sub AE_CheckSub2_SSSMAIN(ByVal pm_Tx As Integer, ByVal pm_Px As Integer, ByVal pm_Sw As Boolean) 'Generated.
Dim wk_SS As Long
   If pm_Sw Then
      CP_SSSMAIN(pm_Px).CuVal = PP_SSSMAIN.SaveCV
      CP_SSSMAIN(pm_Px).ExVal = PP_SSSMAIN.SaveXV
      CP_SSSMAIN(pm_Px).ExStatus = PP_SSSMAIN.SaveExStatus
      CP_SSSMAIN(pm_Px).StatusC = Cn_Status2
      If CP_SSSMAIN(pm_Px).TypeA = Cn_NormalOrV Or CP_SSSMAIN(pm_Px).TypeA = Cn_InputOnly Then Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(pm_Px), CL_SSSMAIN(pm_Px))
   End If
   If pm_Tx >= 0 Then
      If CP_SSSMAIN(pm_Px).TypeA = Cn_NormalOrV Then
         If PP_SSSMAIN.SelValid And CP_SSSMAIN(pm_Px).FixedFormat <> 1 Then
            AE_Controls(PP_SSSMAIN.CtB + pm_Tx).SelStart = 0
            AE_Controls(PP_SSSMAIN.CtB + pm_Tx).SelLength = Len((AE_Controls(PP_SSSMAIN.CtB + pm_Tx)))
         Else
            wk_SS = AE_Controls(PP_SSSMAIN.CtB + pm_Tx).SelStart
            Do While wk_SS > 0
               wk_SS = wk_SS - 1
               If AE_KeyInOkChar(PP_SSSMAIN, Mid$((AE_Controls(PP_SSSMAIN.CtB + pm_Tx)), wk_SS + 1, 1), CP_SSSMAIN(pm_Px).KeyInOkClass) Then
                  AE_Controls(PP_SSSMAIN.CtB + pm_Tx).SelStart = wk_SS
                  AE_Controls(PP_SSSMAIN.CtB + pm_Tx).SelLength = PP_SSSMAIN.Override
                  Exit Sub
               End If
            Loop
            AE_Controls(PP_SSSMAIN.CtB + pm_Tx).SelLength = PP_SSSMAIN.Override
         End If
      End If
   End If
End Sub

Sub AE_ClearDe_SSSMAIN() 'Generated.
Dim wk_SaveDe As Integer
Dim wk_SaveDe2 As Integer
   If PP_SSSMAIN.Mode = Cn_Mode3 Then Beep: Call AE_CursorCurrent_SSSMAIN: Exit Sub
   If PP_SSSMAIN.RecalcMode Then Exit Sub
      wk_SaveDe = PP_SSSMAIN.De: wk_SaveDe2 = PP_SSSMAIN.De2
      PP_SSSMAIN.MaskMode = True
         Call AE_InitValBdDe_SSSMAIN(-2, False, Cn_Status0) ', PP_SSSMAIN.De
      PP_SSSMAIN.MaskMode = False
      PP_SSSMAIN.De = wk_SaveDe: PP_SSSMAIN.De2 = wk_SaveDe2
   PP_SSSMAIN.InitValStatus = Cn_ModeDataChanged
End Sub

Function AE_ClearedDe_SSSMAIN(ByVal pm_ExceptionDe As Integer) As Integer 'Generated.
Dim wk_De As Integer
   wk_De = PP_SSSMAIN.LastReadDe
   Do While wk_De < PP_SSSMAIN.LastDe
      If AE_IsClearedDe_SSSMAIN(wk_De) And wk_De <> pm_ExceptionDe Then
         AE_ClearedDe_SSSMAIN = wk_De
         Exit Function
      End If
      wk_De = wk_De + 1
   Loop
   AE_ClearedDe_SSSMAIN = -1
End Function

Sub AE_ClearInitValStatus_SSSMAIN() 'Generated.
   PP_SSSMAIN.InitValStatus = PP_SSSMAIN.Mode
   Dim wk_Px As Integer
   wk_Px = 0
   Do While wk_Px < 74
      CP_SSSMAIN(wk_Px).Modified = PP_SSSMAIN.Mode
      wk_Px = wk_Px + 1
   Loop
End Sub

Sub AE_ClearItm_SSSMAIN(ByVal pm_HandIn As Boolean) 'Generated.
Dim wk_ClearedVal As Variant
Dim wk_De As Integer
   If PP_SSSMAIN.Mode = Cn_Mode3 Then Exit Sub
   If PP_SSSMAIN.Tx < 0 Or PP_SSSMAIN.Tx >= 25 Then Exit Sub
   PP_SSSMAIN.MaskMode = True
   If PP_SSSMAIN.Tx < 18 Then
      Call AE_InitValHd_SSSMAIN(PP_SSSMAIN.Tx, False, CP_SSSMAIN(PP_SSSMAIN.Px).StatusF)
   ElseIf PP_SSSMAIN.Tx < 24 Then
      Call AE_InitValBdDe_SSSMAIN(PP_SSSMAIN.Px, False, CP_SSSMAIN(PP_SSSMAIN.Px).StatusF) ', PP_SSSMAIN.De
   ElseIf PP_SSSMAIN.Tx < 24 Then
   ElseIf PP_SSSMAIN.Tx < 25 Then
      Call AE_InitValTl_SSSMAIN(PP_SSSMAIN.Px, False, CP_SSSMAIN(PP_SSSMAIN.Px).StatusF)
   End If
   wk_ClearedVal = CP_SSSMAIN(PP_SSSMAIN.Px).CuVal
   CP_SSSMAIN(PP_SSSMAIN.Px).CuVal = CP_SSSMAIN(PP_SSSMAIN.Px).ExVal
   CP_SSSMAIN(PP_SSSMAIN.Px).StatusC = CP_SSSMAIN(PP_SSSMAIN.Px).ExStatus
   CP_SSSMAIN(PP_SSSMAIN.Px).StatusF = CP_SSSMAIN(PP_SSSMAIN.Px).ExStatus
   PP_SSSMAIN.MaskMode = False
      AE_StatusCodeBar(PP_SSSMAIN.ScX) = ""
      AE_StatusBar(PP_SSSMAIN.ScX) = ""
   If PP_SSSMAIN.InitValStatus >= Cn_Mode4 Then Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(PP_SSSMAIN.Px))
   If PP_SSSMAIN.Tx >= 18 And PP_SSSMAIN.Tx < 24 Then
      If AE_IsClearedDe_SSSMAIN(PP_SSSMAIN.De) Then
         PP_SSSMAIN.UnDoDeOp = 0
         If PP_SSSMAIN.De + 1 = PP_SSSMAIN.LastDe Then
            PP_SSSMAIN.ActiveDe = -1
            If PP_SSSMAIN.LastDe > PP_SSSMAIN.LastReadDe Then PP_SSSMAIN.LastDe = PP_SSSMAIN.LastDe - 1
         ElseIf PP_SSSMAIN.De = PP_SSSMAIN.LastDe Then
            PP_SSSMAIN.ActiveDe = -1
         ElseIf PP_SSSMAIN.De < PP_SSSMAIN.LastReadDe Then
            PP_SSSMAIN.ActiveDe = -1
         Else
            PP_SSSMAIN.ActiveDe = PP_SSSMAIN.De
         End If
         wk_De = AE_ClearedDe_SSSMAIN(PP_SSSMAIN.De)
         If wk_De >= 0 Then
            Call AE_DeUp_SSSMAIN(wk_De)
            If wk_De < PP_SSSMAIN.De Then
               PP_SSSMAIN.CursorDirection = Cn_Direction4 '4: Up
               wk_Bool = AE_CursorUp_SSSMAIN(PP_SSSMAIN.Tx)
               If PP_SSSMAIN.ActiveDe > wk_De Then PP_SSSMAIN.ActiveDe = PP_SSSMAIN.ActiveDe - 1
               Call AE_ScrlMax(PP_SSSMAIN)
               Exit Sub
            End If
         End If
         Call AE_ScrlMax(PP_SSSMAIN)
      End If
   End If
   Call AE_SetCheck_SSSMAIN(wk_ClearedVal, Cn_Status8, pm_HandIn)
End Sub

Static Function AE_CompleteCheck_SSSMAIN(ByVal pm_HeadCheck As Boolean) As Integer 'Generated.
Dim wk_De As Integer
Dim wk_Px As Integer
Dim wk_IncompletionC As Integer
Dim wk_IncompletionC2 As Integer
   wk_IncompletionC = 0
   wk_IncompletionC2 = 0
   PP_SSSMAIN.InCompletePx = -1
   Call AE_CompleteCheckSub_SSSMAIN(0, PP_SSSMAIN.BodyPx, wk_IncompletionC, wk_IncompletionC2) '0: HeadPx
   If pm_HeadCheck Then
      If wk_IncompletionC2 > 0 Then
         wk_Bool = AE_MsgLibrary(PP_SSSMAIN, "HeadCompleteC")
      End If
      AE_CompleteCheck_SSSMAIN = wk_IncompletionC2
      Exit Function
   End If
   wk_De = 0
   Do While wk_De < PP_SSSMAIN.LastDe And PP_SSSMAIN.InCompletePx = -1
      wk_Px = 38 + 31 * wk_De
      Call AE_CompleteCheckSub_SSSMAIN(wk_Px, wk_Px + 31, wk_IncompletionC, wk_IncompletionC2)
      wk_De = wk_De + 1
   Loop
   If PP_SSSMAIN.InCompletePx = -1 Then
      Call AE_CompleteCheckSub_SSSMAIN(PP_SSSMAIN.TailPx, PP_SSSMAIN.PrpC, wk_IncompletionC, wk_IncompletionC2)
   End If
   If wk_IncompletionC > 0 Then
      wk_Bool = AE_MsgLibrary(PP_SSSMAIN, "CompleteC")
   End If
   AE_CompleteCheck_SSSMAIN = wk_IncompletionC
End Function

Private Sub AE_CompleteCheckSub_SSSMAIN(ByVal pm_Px1 As Integer, ByVal pm_Px2 As Integer, ByRef pm_IncompletionC As Integer, ByRef pm_IncompletionC2 As Integer) 'Generated.
Dim wk_Px As Integer
   wk_Px = pm_Px1
   Do While wk_Px < pm_Px2
      If CP_SSSMAIN(wk_Px).TypeA = Cn_OptionButtonC Or CP_SSSMAIN(wk_Px).TypeA = Cn_CheckBox Then
      ElseIf CP_SSSMAIN(wk_Px).StatusC <= Cn_Status5 Then
         pm_IncompletionC = pm_IncompletionC + 1
         If wk_Px <> PP_SSSMAIN.Px Then pm_IncompletionC2 = pm_IncompletionC2 + 1
         If AE_IsWritableInOutMode(PP_SSSMAIN, CP_SSSMAIN(wk_Px)) Then PP_SSSMAIN.InCompletePx = wk_Px: Exit Do
      Else
         Dim fl_NullZero As Boolean
         fl_NullZero = AE_IsNullZero(PP_SSSMAIN, CP_SSSMAIN(wk_Px))
         If AE_GetInOutMode(CP_SSSMAIN(wk_Px).InOutMode, PP_SSSMAIN.Mode) Mod 2 = 1 Then
            If (Not fl_NullZero And IsNull(CP_SSSMAIN(wk_Px).CuVal)) Or (fl_NullZero And AE_IsNull_SSSMAIN(CP_SSSMAIN(wk_Px).CuVal)) Then
               pm_IncompletionC = pm_IncompletionC + 1
               If AE_IsWritableInOutMode(PP_SSSMAIN, CP_SSSMAIN(wk_Px)) Then pm_IncompletionC2 = pm_IncompletionC2 + 1: PP_SSSMAIN.InCompletePx = wk_Px: Exit Do
            ElseIf Left$(CP_SSSMAIN(wk_Px).CuVal, 1) = Space$(1) And CP_SSSMAIN(wk_Px).Alignment <> 1 And CP_SSSMAIN(wk_Px).FixedFormat = 1 Then
               pm_IncompletionC = pm_IncompletionC + 1
               If AE_IsWritableInOutMode(PP_SSSMAIN, CP_SSSMAIN(wk_Px)) Then pm_IncompletionC2 = pm_IncompletionC2 + 1: PP_SSSMAIN.InCompletePx = wk_Px: Exit Do
            ElseIf Right$(CP_SSSMAIN(wk_Px).CuVal, 1) = Space$(1) And CP_SSSMAIN(wk_Px).Alignment = 1 And CP_SSSMAIN(wk_Px).FixedFormat = 1 Then
               pm_IncompletionC = pm_IncompletionC + 1
               If AE_IsWritableInOutMode(PP_SSSMAIN, CP_SSSMAIN(wk_Px)) Then pm_IncompletionC2 = pm_IncompletionC2 + 1: PP_SSSMAIN.InCompletePx = wk_Px: Exit Do
            End If
         End If
      End If
      wk_Px = wk_Px + 1
   Loop
End Sub

Sub AE_CopyCp_SSSMAIN(ByVal pm_Px, ByVal pm_PxBase) 'Generated.
   CP_SSSMAIN(pm_Px).InOutMode = CP_SSSMAIN(pm_PxBase).InOutMode
   CP_SSSMAIN(pm_Px).MaxLength = CP_SSSMAIN(pm_PxBase).MaxLength
   CP_SSSMAIN(pm_Px).FormatChr = CP_SSSMAIN(pm_PxBase).FormatChr
   CP_SSSMAIN(pm_Px).AutoEnter = CP_SSSMAIN(pm_PxBase).AutoEnter
   CP_SSSMAIN(pm_Px).Alignment = CP_SSSMAIN(pm_PxBase).Alignment
   CP_SSSMAIN(pm_Px).KeyInOkClass = CP_SSSMAIN(pm_PxBase).KeyInOkClass
   CP_SSSMAIN(pm_Px).FixedFormat = CP_SSSMAIN(pm_PxBase).FixedFormat
   CP_SSSMAIN(pm_Px).BlockNo = CP_SSSMAIN(pm_PxBase).BlockNo
   CP_SSSMAIN(pm_Px).FormatClass = CP_SSSMAIN(pm_PxBase).FormatClass
   CP_SSSMAIN(pm_Px).CIn = CP_SSSMAIN(pm_PxBase).CIn
   CP_SSSMAIN(pm_Px).TabTab = CP_SSSMAIN(pm_PxBase).TabTab
   CP_SSSMAIN(pm_Px).TypeA = CP_SSSMAIN(pm_PxBase).TypeA
   CP_SSSMAIN(pm_Px).CpPx = pm_Px
   CP_SSSMAIN(pm_Px).StatusC = Cn_Status0
   CP_SSSMAIN(pm_Px).StatusF = Cn_Status0
   CP_SSSMAIN(pm_Px).ExStatus = Cn_Status0
   CP_SSSMAIN(pm_Px).ExVal = Null
   CP_SSSMAIN(pm_Px).CheckRtnCode = 0
End Sub

Function AE_CursorCheck_SSSMAIN(ByVal pm_TypeA As Integer, ByVal pm_Tx As Integer) As Boolean 'Generated.
   If pm_Tx = -2 Then
      AE_CursorCheck_SSSMAIN = True
   ElseIf pm_TypeA = Cn_OutputOnly Or pm_TypeA = Cn_CheckBox Or pm_TypeA = Cn_OptionButtonH Or pm_TypeA = Cn_OptionButtonC Then
      AE_CursorCheck_SSSMAIN = False
   ElseIf AE_Controls(PP_SSSMAIN.CtB + pm_Tx).TabStop And AE_Controls(PP_SSSMAIN.CtB + pm_Tx).Enabled And AE_Controls(PP_SSSMAIN.CtB + pm_Tx).Visible Then
      AE_CursorCheck_SSSMAIN = True
   Else
      AE_CursorCheck_SSSMAIN = False
   End If
End Function

Sub AE_CursorCurrent_SSSMAIN() 'Generated.
   If PP_SSSMAIN.CursorSet = True Then Exit Sub
   If PP_SSSMAIN.Tx >= 0 And PP_SSSMAIN.Tx < 25 Then
      If AE_Controls(PP_SSSMAIN.CtB + PP_SSSMAIN.Tx).Visible And AE_Controls(PP_SSSMAIN.CtB + PP_SSSMAIN.Tx).Enabled And AE_Controls(PP_SSSMAIN.CtB + PP_SSSMAIN.Tx).TabStop Then
         Call AE_CursorRestSub_SSSMAIN(PP_SSSMAIN.Tx)
         Exit Sub
      End If
   End If
   Call AE_CursorInit_SSSMAIN
End Sub

Function AE_CursorDown_SSSMAIN(ByVal pm_Tx As Integer, Optional ByVal pm_Int) As Boolean 'Generated.
Dim wk_Tx As Integer
Dim wk_ExTopDe As Integer
Dim wk_DeC As Integer
   wk_DeC = 0: If PP_SSSMAIN.ActiveDe >= 0 Or Not AE_GetDeApendable(PP_SSSMAIN) Then wk_DeC = 1
   wk_Tx = pm_Tx
   Do While wk_Tx < 25
      If wk_Tx < 17 Or wk_Tx >= 24 Then
         wk_Tx = wk_Tx + 1
      ElseIf wk_Tx = 17 Then
         If AE_CursorInOutCheck_SSSMAIN(wk_Tx, 1) >= 0 Then
            Do
               wk_Tx = wk_Tx + 1
               If ((wk_Tx - 18) \ 6) + PP_SSSMAIN.TopDe > PP_SSSMAIN.LastDe - wk_DeC Then Exit Do
               If AE_CursorCheck_SSSMAIN(CP_SSSMAIN(AE_Px(PP_SSSMAIN, wk_Tx)).TypeA, wk_Tx) Then
                  Call AE_CursorMove_SSSMAIN(wk_Tx)
                  AE_CursorDown_SSSMAIN = True
                  Exit Function
               End If
               If wk_Tx = PP_SSSMAIN.NrBodyTx - 1 Then
                  If PP_SSSMAIN.TopDe < 0 - PP_SSSMAIN.MaxDspC Then
                     wk_ExTopDe = PP_SSSMAIN.TopDe
                     Call AE_Scrl_SSSMAIN(PP_SSSMAIN.TopDe + 1, False)
                     If PP_SSSMAIN.TopDe = wk_ExTopDe + 1 Then wk_Tx = wk_Tx - 6
                  End If
               End If
            Loop Until wk_Tx >= PP_SSSMAIN.NrBodyTx - 1
         End If
         wk_Tx = 24
      ElseIf wk_Tx + 6 < PP_SSSMAIN.NrBodyTx Then
         wk_Tx = wk_Tx + 6
         If ((wk_Tx - 18) \ 6) + PP_SSSMAIN.TopDe > PP_SSSMAIN.LastDe - wk_DeC Then wk_Tx = 24
'     以降は (wk_Tx + 6 >= PP_SSSMAIN.NrBodyTx) の場合
      ElseIf PP_SSSMAIN.TopDe < 0 - PP_SSSMAIN.MaxDspC Then
         If AE_CursorInOutCheck_SSSMAIN(wk_Tx, 31) >= 0 Then
            wk_Tx = wk_Tx + 6
            If ((wk_Tx - 18) \ 6) + PP_SSSMAIN.TopDe > PP_SSSMAIN.LastDe - wk_DeC Then
               wk_Tx = 24
            Else
               wk_ExTopDe = PP_SSSMAIN.TopDe
               Call AE_Scrl_SSSMAIN(PP_SSSMAIN.TopDe + 1, False)
               If PP_SSSMAIN.TopDe = wk_ExTopDe + 1 Then
                  wk_Tx = wk_Tx - 6
               Else
                  wk_Tx = 24
               End If
            End If
         Else
            wk_Tx = 24
         End If
      Else
         wk_Tx = 24
      End If
      If wk_Tx < 25 Then
         If AE_CursorCheck_SSSMAIN(CP_SSSMAIN(AE_Px(PP_SSSMAIN, wk_Tx)).TypeA, wk_Tx) Then
            Call AE_CursorMove_SSSMAIN(wk_Tx)
            AE_CursorDown_SSSMAIN = True
            Exit Function
         End If
      End If
   Loop
   AE_CursorDown_SSSMAIN = False
End Function

Sub AE_CursorInit_SSSMAIN() 'Generated.
   PP_SSSMAIN.CursorDirection = Cn_Direction1 '1: Next
   If PP_SSSMAIN.Tx < 0 Then
      If FR_SSSMAIN.ActiveControl Is Nothing Then
         Call AE_CursorRestSub_SSSMAIN(Cn_CursorToHome)
      ElseIf FR_SSSMAIN.ActiveControl.TabIndex <> AE_CursorRest(PP_SSSMAIN.ScX).TabIndex Then
         Call AE_CursorRestSub_SSSMAIN(Cn_CursorToHome)
      Else
         wk_Int = AE_CursorNext_SSSMAIN(-1)
      End If
   Else
      If Not AE_CursorToError_SSSMAIN() Then
         Call AE_CursorRestSub_SSSMAIN(Cn_CursorToHome)
      End If
   End If
End Sub

Function AE_CursorInOutCheck_SSSMAIN(ByVal pm_Tx As Integer, ByVal pm_Dsp As Integer) As Integer 'Generated.
Dim wk_Px As Integer
   If pm_Tx = -1 Then
      wk_Px = 0
   Else
      wk_Px = AE_Px(PP_SSSMAIN, pm_Tx) + pm_Dsp
   End If
   Do While wk_Px < 69
      If AE_GetInOutMode(CP_SSSMAIN(wk_Px).InOutMode, PP_SSSMAIN.Mode) >= Cn_InOutMode2 Then
         If CP_SSSMAIN(wk_Px).TypeA <> Cn_OptionButtonH And CP_SSSMAIN(wk_Px).TypeA <> Cn_OptionButtonC And CP_SSSMAIN(wk_Px).TypeA <> Cn_CheckBox Then
            AE_CursorInOutCheck_SSSMAIN = wk_Px
            Exit Function
         End If
      End If
      wk_Px = wk_Px + pm_Dsp
   Loop
   If pm_Tx < 24 Then
      wk_Px = 69
   Else
      wk_Px = AE_Px(PP_SSSMAIN, pm_Tx) + 1
   End If
   Do While wk_Px < 74
      If AE_GetInOutMode(CP_SSSMAIN(wk_Px).InOutMode, PP_SSSMAIN.Mode) >= Cn_InOutMode2 Then
         If CP_SSSMAIN(wk_Px).TypeA <> Cn_OptionButtonH And CP_SSSMAIN(wk_Px).TypeA <> Cn_OptionButtonC And CP_SSSMAIN(wk_Px).TypeA <> Cn_CheckBox Then
            AE_CursorInOutCheck_SSSMAIN = wk_Px
            Exit Function
         End If
      End If
      wk_Px = wk_Px + 1
   Loop
   AE_CursorInOutCheck_SSSMAIN = -1
End Function

Sub AE_CursorMove_SSSMAIN(ByVal pm_Tx As Integer) 'Generated.
Dim wk_Tx As Integer
   wk_Tx = pm_Tx
   If wk_Tx = -2 Then Exit Sub
   If wk_Tx < 0 Or wk_Tx >= 25 Then Call AE_CursorRestSub_SSSMAIN(Cn_CursorToRest): Exit Sub
   If AE_Controls(PP_SSSMAIN.CtB + wk_Tx).TabStop And AE_Controls(PP_SSSMAIN.CtB + wk_Tx).Enabled And AE_Controls(PP_SSSMAIN.CtB + wk_Tx).Visible Then
      If wk_Tx = PP_SSSMAIN.Tx Then
         Call AE_CursorRestSub_SSSMAIN(wk_Tx)
      Else 'If wk_Tx <> PP_SSSMAIN.Tx Then
         AE_CursorRest(PP_SSSMAIN.ScX).TabStop = False
         If Not PP_SSSMAIN.CursorSet Then
            PP_SSSMAIN.NextTx = wk_Tx
            On Error Resume Next
            AE_Controls(PP_SSSMAIN.CtB + wk_Tx).SetFocus
         End If
      End If
   Else
      Call AE_CursorRestSub_SSSMAIN(Cn_CursorToRest)
   End If
End Sub

Function AE_CursorNext_SSSMAIN(ByVal pm_Tx As Integer) As Boolean 'Generated.
Dim wk_Tx As Integer
Dim wk_ExTopDe As Integer
Dim wk_DeC As Integer
   wk_DeC = 0: If PP_SSSMAIN.ActiveDe >= 0 Or Not AE_GetDeApendable(PP_SSSMAIN) Then wk_DeC = 1
   wk_Tx = pm_Tx
   Select Case AE_CursorInOutCheck_SSSMAIN(wk_Tx, 1)
      Case -1
         If PP_SSSMAIN.KeyDownMode = Cn_Mode3 And PP_SSSMAIN.Tx >= 0 Then
            PP_SSSMAIN.TimerWorkId = 9: AE_Timer(PP_SSSMAIN.ScX).Interval = 10: AE_Timer(PP_SSSMAIN.ScX) = True
         End If
         AE_CursorNext_SSSMAIN = False: Exit Function
   End Select
   Do While wk_Tx < 25
      wk_Tx = wk_Tx + 1
      If wk_Tx = PP_SSSMAIN.NrBodyTx Then
         If PP_SSSMAIN.TopDe < 0 - PP_SSSMAIN.MaxDspC Then
            If ((wk_Tx - 18) \ 6) + PP_SSSMAIN.TopDe > PP_SSSMAIN.LastDe - wk_DeC Then
               wk_Tx = 24
            Else
               wk_ExTopDe = PP_SSSMAIN.TopDe
               Call AE_Scrl_SSSMAIN(PP_SSSMAIN.TopDe + 1, False)
               If PP_SSSMAIN.TopDe = wk_ExTopDe + 1 Then
                  wk_Tx = wk_Tx - 6
               Else
                  wk_Tx = 24
               End If
            End If
         End If
      End If
      If wk_Tx >= 18 And wk_Tx < 24 Then 'AE_BodyN > 0
         If ((wk_Tx - 18) \ 6) + PP_SSSMAIN.TopDe > PP_SSSMAIN.LastDe - wk_DeC Then wk_Tx = 24
      End If
      If wk_Tx < 25 Then
         If AE_CursorCheck_SSSMAIN(CP_SSSMAIN(AE_Px(PP_SSSMAIN, wk_Tx)).TypeA, wk_Tx) Then
            Call AE_CursorMove_SSSMAIN(wk_Tx)
            AE_CursorNext_SSSMAIN = True
            Exit Function
         End If
      End If
   Loop
   If PP_SSSMAIN.KeyDownMode = Cn_Mode3 And PP_SSSMAIN.Tx >= 0 Then
      PP_SSSMAIN.TimerWorkId = 9: AE_Timer(PP_SSSMAIN.ScX).Interval = 10: AE_Timer(PP_SSSMAIN.ScX) = True
   End If
   AE_CursorNext_SSSMAIN = False
End Function

Function AE_CursorNextDsp_SSSMAIN(ByVal pm_Tx As Integer) As Boolean 'Generated.
Dim wk_Tx As Integer
   wk_Tx = pm_Tx
   Do While wk_Tx < 24
      wk_Tx = wk_Tx + 1
      If wk_Tx = PP_SSSMAIN.NrBodyTx Then wk_Tx = 24
      If wk_Tx < 25 Then
         If AE_CursorCheck_SSSMAIN(CP_SSSMAIN(AE_Px(PP_SSSMAIN, wk_Tx)).TypeA, wk_Tx) Then
            Call AE_CursorMove_SSSMAIN(wk_Tx)
            AE_CursorNextDsp_SSSMAIN = True
            Exit Function
         End If
      End If
   Loop
   AE_CursorNextDsp_SSSMAIN = False
End Function

Function AE_CursorPrev_SSSMAIN(ByVal pm_Tx As Integer) As Boolean 'Generated.
Dim wk_Tx As Integer
Dim wk_LastTx As Integer
Dim wk_DeC As Integer
   wk_DeC = 0: If PP_SSSMAIN.ActiveDe >= 0 Or Not AE_GetDeApendable(PP_SSSMAIN) Then wk_DeC = 1
   wk_Tx = pm_Tx
   Do While wk_Tx >= 0
      If wk_Tx = 24 Then
         wk_Tx = PP_SSSMAIN.NrBodyTx - 6
         wk_LastTx = 18 + (PP_SSSMAIN.LastDe - wk_DeC - PP_SSSMAIN.TopDe) * 6
         If wk_LastTx < wk_Tx Then wk_Tx = wk_LastTx
         If wk_Tx >= 18 Then
            Do
               If AE_CursorCheck_SSSMAIN(CP_SSSMAIN(AE_Px(PP_SSSMAIN, wk_Tx)).TypeA, wk_Tx) Then
                  Call AE_CursorMove_SSSMAIN(wk_Tx)
                  AE_CursorPrev_SSSMAIN = True
                  Exit Function
               End If
               wk_Tx = wk_Tx + 1
               If (wk_Tx - 18) Mod 6 = 0 Then wk_Tx = wk_Tx - 6 - 6
               If wk_Tx < 18 Then
                  If PP_SSSMAIN.TopDe > 0 Then
                     Call AE_Scrl_SSSMAIN(PP_SSSMAIN.TopDe - 1, False)
                     wk_Tx = wk_Tx + 6
                  End If
               End If
            Loop Until wk_Tx < 18
         End If
         wk_Tx = 17
      Else
         wk_Tx = wk_Tx - 1
      End If
      If wk_Tx = 17 And PP_SSSMAIN.TopDe > 0 Then
         Call AE_Scrl_SSSMAIN(PP_SSSMAIN.TopDe - 1, False)
         wk_Tx = wk_Tx + 6
      End If
      If wk_Tx >= 0 Then
         If AE_CursorCheck_SSSMAIN(CP_SSSMAIN(AE_Px(PP_SSSMAIN, wk_Tx)).TypeA, wk_Tx) Then
            Call AE_CursorMove_SSSMAIN(wk_Tx)
            AE_CursorPrev_SSSMAIN = True
            Exit Function
         End If
      End If
   Loop
   AE_CursorPrev_SSSMAIN = False
End Function

Function AE_CursorPrevDsp_SSSMAIN(ByVal pm_Tx As Integer) As Boolean 'Generated.
Dim wk_Tx As Integer
   wk_Tx = pm_Tx
   Do While wk_Tx >= 0
      If wk_Tx = 24 Then wk_Tx = PP_SSSMAIN.NrBodyTx
      wk_Tx = wk_Tx - 1
      If wk_Tx >= 0 Then
         If AE_CursorCheck_SSSMAIN(CP_SSSMAIN(AE_Px(PP_SSSMAIN, wk_Tx)).TypeA, wk_Tx) Then
            Call AE_CursorMove_SSSMAIN(wk_Tx)
            AE_CursorPrevDsp_SSSMAIN = True
            Exit Function
         End If
      End If
   Loop
   AE_CursorPrevDsp_SSSMAIN = False
End Function

Sub AE_CursorRestSub_SSSMAIN(ByVal pm_CurSorTo As Integer) 'Generated.
   If PP_SSSMAIN.CursorSet = False And AE_CursorRest(PP_SSSMAIN.ScX).Visible And AE_CursorRest(PP_SSSMAIN.ScX).Enabled Then
      If FR_SSSMAIN.ActiveControl Is Nothing Then
      ElseIf FR_SSSMAIN.ActiveControl.TabIndex <> AE_CursorRest(PP_SSSMAIN.ScX).TabIndex Then
      Else
         Exit Sub
      End If
      AE_CursorRest(PP_SSSMAIN.ScX).TabStop = True
      PP_SSSMAIN.CursorToWhere = pm_CurSorTo
      PP_SSSMAIN.NextTx = Cn_NextTxCleared
      On Error Resume Next
      AE_CursorRest(PP_SSSMAIN.ScX).SetFocus
   End If
End Sub

Sub AE_CursorRivise_SSSMAIN() 'Generated.
   If Not PP_SSSMAIN.LostFocusCheck Then
   ElseIf PP_SSSMAIN.MouseDownTx <> -1 Then
      If PP_SSSMAIN.ModalFlag Or (CP_SSSMAIN(PP_SSSMAIN.MouseDownTx).TypeA = Cn_NormalOrV And Not PP_SSSMAIN.ChangeAtGotFocus) Then Call AE_CursorRestSub_SSSMAIN(PP_SSSMAIN.MouseDownTx)
   ElseIf PP_SSSMAIN.ModalFlag Then
      Call AE_CursorRestSub_SSSMAIN(PP_SSSMAIN.Tx)
   End If
   PP_SSSMAIN.LostFocusCheck = False
   PP_SSSMAIN.MouseDownTx = -1
   PP_SSSMAIN.ModalFlag = False
End Sub

Function AE_CursorSkip_SSSMAIN() As Boolean 'Generated.
Dim wk_Bool As Boolean
Dim wk_CursorDirection As Integer
   wk_Bool = True
   Select Case PP_SSSMAIN.CursorDest
      Case Cn_Dest2
         If Not AE_CursorNext_SSSMAIN(-1) Then Call AE_CursorRestSub_SSSMAIN(Cn_CursorToRest)
      Case Cn_Dest3
         If Not AE_CursorPrev_SSSMAIN(25) Then Call AE_CursorRestSub_SSSMAIN(Cn_CursorToRest)
      Case Cn_Dest4
         PP_SSSMAIN.UpDownFlag = True
         If Not AE_CursorUp_SSSMAIN(PP_SSSMAIN.Tx) Then
            If Not AE_CursorNext_SSSMAIN(-1) Then Call AE_CursorRestSub_SSSMAIN(Cn_CursorToRest)
         End If
         PP_SSSMAIN.UpDownFlag = False
      Case Cn_Dest5
         PP_SSSMAIN.UpDownFlag = True
         If Not AE_CursorDown_SSSMAIN(PP_SSSMAIN.Tx) Then
            If Not AE_CursorPrev_SSSMAIN(25) Then Call AE_CursorRestSub_SSSMAIN(Cn_CursorToRest)
         End If
         PP_SSSMAIN.UpDownFlag = False
      Case Cn_Dest6
         If Not AE_CursorNext_SSSMAIN(PP_SSSMAIN.Tx) Then
            If Not AE_CursorPrev_SSSMAIN(25) Then Call AE_CursorRestSub_SSSMAIN(Cn_CursorToRest)
         End If
      Case Cn_Dest7
         If Not AE_CursorPrev_SSSMAIN(PP_SSSMAIN.Tx) Then
            If Not AE_CursorNext_SSSMAIN(-1) Then Call AE_CursorRestSub_SSSMAIN(Cn_CursorToRest)
         End If
      Case Cn_DestBySkip
         Select Case PP_SSSMAIN.CursorDirection
            Case Cn_Direction0, Cn_Direction1
               If AE_CursorNext_SSSMAIN(PP_SSSMAIN.Tx) Then
                  PP_SSSMAIN.CursorDirection = Cn_Direction1
                  AE_CursorSkip_SSSMAIN = True
                  Exit Function
               Else
                  PP_SSSMAIN.CursorDirection = Cn_Direction2
                  If AE_CursorPrev_SSSMAIN(PP_SSSMAIN.Tx) Then
                     PP_SSSMAIN.CursorDirection = Cn_Direction2
                     AE_CursorSkip_SSSMAIN = True
                     Exit Function
                  Else
                     PP_SSSMAIN.CursorDirection = Cn_Direction1
                     AE_CursorSkip_SSSMAIN = False
                     Exit Function
                  End If
               End If
           Case Cn_Direction2
               If AE_CursorPrev_SSSMAIN(PP_SSSMAIN.Tx) Then
                  PP_SSSMAIN.CursorDirection = Cn_Direction2
                  AE_CursorSkip_SSSMAIN = True
                  Exit Function
               Else
                  PP_SSSMAIN.CursorDirection = Cn_Direction1
                  If AE_CursorNext_SSSMAIN(PP_SSSMAIN.Tx) Then
                     PP_SSSMAIN.CursorDirection = Cn_Direction1
                     AE_CursorSkip_SSSMAIN = True
                     Exit Function
                  Else
                     PP_SSSMAIN.CursorDirection = Cn_Direction2
                     AE_CursorSkip_SSSMAIN = False
                     Exit Function
                  End If
               End If
            Case Cn_Direction3
               If AE_CursorDown_SSSMAIN(PP_SSSMAIN.Tx) Then
                  PP_SSSMAIN.CursorDirection = Cn_Direction3
                  AE_CursorSkip_SSSMAIN = True
                  Exit Function
               Else
                  PP_SSSMAIN.CursorDirection = Cn_Direction4
                  If AE_CursorUp_SSSMAIN(PP_SSSMAIN.Tx) Then
                     PP_SSSMAIN.CursorDirection = Cn_Direction4
                     AE_CursorSkip_SSSMAIN = True
                     Exit Function
                  Else
                     PP_SSSMAIN.CursorDirection = Cn_Direction3
                     AE_CursorSkip_SSSMAIN = False
                     Exit Function
                  End If
               End If
            Case Cn_Direction4
               If AE_CursorUp_SSSMAIN(PP_SSSMAIN.Tx) Then
                  PP_SSSMAIN.CursorDirection = Cn_Direction4
                  AE_CursorSkip_SSSMAIN = True
                  Exit Function
               Else
                  PP_SSSMAIN.CursorDirection = Cn_Direction3
                  If AE_CursorDown_SSSMAIN(PP_SSSMAIN.Tx) Then
                     PP_SSSMAIN.CursorDirection = Cn_Direction3
                     AE_CursorSkip_SSSMAIN = True
                     Exit Function
                  Else
                     PP_SSSMAIN.CursorDirection = Cn_Direction4
                     AE_CursorSkip_SSSMAIN = False
                     Exit Function
                   End If
               End If
         End Select
      Case Else
         Select Case PP_SSSMAIN.CursorDirection
            Case Is <= Cn_Direction1
               wk_CursorDirection = PP_SSSMAIN.CursorDirection
               wk_Bool = AE_CursorNext_SSSMAIN(PP_SSSMAIN.Tx)
               If PP_SSSMAIN.CursorDest = Cn_Dest1 And wk_Bool = False Then wk_Bool = AE_CursorNext_SSSMAIN(-1)
               PP_SSSMAIN.CursorDirection = wk_CursorDirection
            Case Cn_Direction2
               wk_CursorDirection = PP_SSSMAIN.CursorDirection
               wk_Bool = AE_CursorPrev_SSSMAIN(PP_SSSMAIN.Tx)
               If PP_SSSMAIN.CursorDest = Cn_Dest0 And wk_Bool = False Then wk_Bool = AE_CursorNext_SSSMAIN(-1)
               If PP_SSSMAIN.CursorDest = Cn_Dest1 And wk_Bool = False Then wk_Bool = AE_CursorPrev_SSSMAIN(25)
               PP_SSSMAIN.CursorDirection = wk_CursorDirection
            Case Cn_Direction3
               wk_Bool = AE_CursorDown_SSSMAIN(PP_SSSMAIN.Tx)
            Case Cn_Direction4
               wk_Bool = AE_CursorUp_SSSMAIN(PP_SSSMAIN.Tx)
            Case Else
               wk_Bool = False
         End Select
   End Select
   AE_CursorSkip_SSSMAIN = wk_Bool
   If wk_Bool Or PP_SSSMAIN.Tx < 0 Or (Cn_ai21 And PP_SSSMAIN.CursorDest = 0) Then
   ElseIf Not AE_Controls(PP_SSSMAIN.CtB + PP_SSSMAIN.Tx).TabStop Or Not AE_Controls(PP_SSSMAIN.CtB + PP_SSSMAIN.Tx).Enabled Or Not AE_Controls(PP_SSSMAIN.CtB + PP_SSSMAIN.Tx).Visible Then
      Call AE_CursorRestSub_SSSMAIN(Cn_CursorToRest)
      AE_CursorSkip_SSSMAIN = True
   End If
End Function

Sub AE_CursorSub_SSSMAIN(ByVal pm_CurSor As Integer) 'Generated.
Dim wk_Tx As Integer
   If pm_CurSor = Cn_CuInCompletePx Then
      If PP_SSSMAIN.InCompletePx = -1 Then Call AE_CursorCurrent_SSSMAIN: Exit Sub
      If CP_SSSMAIN(PP_SSSMAIN.InCompletePx).TypeA = Cn_OptionButtonH Or CP_SSSMAIN(PP_SSSMAIN.InCompletePx).TypeA = Cn_OptionButtonC Or CP_SSSMAIN(PP_SSSMAIN.InCompletePx).TypeA = Cn_CheckBox Then PP_SSSMAIN.CursorDirection = Cn_Direction2: wk_Bool = AE_CursorPrev_SSSMAIN(PP_SSSMAIN.Tx): Exit Sub
      wk_Tx = AE_Tx(PP_SSSMAIN, PP_SSSMAIN.InCompletePx)
      If wk_Tx >= 0 Then
         Call AE_CursorMove_SSSMAIN(wk_Tx)
      ElseIf PP_SSSMAIN.InCompletePx < 69 Then
         Call AE_Scrl_SSSMAIN((PP_SSSMAIN.InCompletePx - 38) \ PP_SSSMAIN.BodyV, False)
         Call AE_CursorMove_SSSMAIN(AE_Tx(PP_SSSMAIN, PP_SSSMAIN.InCompletePx))
      Else
         Call AE_CursorCurrent_SSSMAIN
      End If
   ElseIf pm_CurSor = Cn_CuCurrent Then
      If CP_SSSMAIN(PP_SSSMAIN.Px).TypeA = Cn_OptionButtonH Or CP_SSSMAIN(PP_SSSMAIN.Px).TypeA = Cn_OptionButtonC Or CP_SSSMAIN(PP_SSSMAIN.Px).TypeA = Cn_CheckBox Then PP_SSSMAIN.CursorDirection = Cn_Direction2: wk_Bool = AE_CursorPrev_SSSMAIN(PP_SSSMAIN.Tx): Exit Sub
      Call AE_CursorCurrent_SSSMAIN
   ElseIf pm_CurSor = Cn_CuInit Then
      Call AE_CursorInit_SSSMAIN
   ElseIf pm_CurSor = Cn_CuCursorRest Then
      Call AE_CursorRestSub_SSSMAIN(Cn_CursorToRest)
   ElseIf pm_CurSor = Cn_CuExTx Then
      Call AE_CursorMove_SSSMAIN(PP_SSSMAIN.ExTx)
   End If
End Sub

Function AE_CursorToError_SSSMAIN() As Boolean 'Generated.
Dim wk_Tx As Integer
Dim wk_TxRel As Integer
Dim wk_Px As Integer
   wk_TxRel = -1
   wk_Tx = 0
   Do While wk_Tx < 25
      wk_Px = AE_Px(PP_SSSMAIN, wk_Tx)
      If CP_SSSMAIN(wk_Px).StatusC >= Cn_Status2 And CP_SSSMAIN(wk_Px).StatusC <= Cn_Status5 Then
         Select Case CP_SSSMAIN(wk_Px).TypeA
            Case Cn_NormalOrV, Cn_InputOnly
               If AE_IsWritableInOutMode(PP_SSSMAIN, CP_SSSMAIN(wk_Px)) And AE_IsEnable(CP_SSSMAIN(wk_Px).BlockNo, PP_SSSMAIN.ActiveBlockNo) Then
                  If CP_SSSMAIN(wk_Px).StatusC = Cn_Status2 Then
                     Call AE_CursorMove_SSSMAIN(wk_Tx)
                     AE_CursorToError_SSSMAIN = True
                     Exit Function
                  ElseIf wk_TxRel = -1 Then
                     wk_TxRel = wk_Tx
                  End If
               End If
         End Select
      End If
      wk_Tx = wk_Tx + 1
   Loop
   If wk_TxRel >= 0 Then
      Call AE_CursorMove_SSSMAIN(wk_TxRel)
      AE_CursorToError_SSSMAIN = True
   Else
      AE_CursorToError_SSSMAIN = False
   End If
End Function

Function AE_CursorUp_SSSMAIN(ByVal pm_Tx As Integer) As Boolean 'Generated.
Dim wk_Tx As Integer
Dim wk_LastTx As Integer
Dim wk_DeC As Integer
   wk_DeC = 0: If PP_SSSMAIN.ActiveDe >= 0 Or Not AE_GetDeApendable(PP_SSSMAIN) Then wk_DeC = 1
   wk_Tx = pm_Tx
   Do While wk_Tx >= 0
      If wk_Tx < 18 Or wk_Tx > 24 Then
         wk_Tx = wk_Tx - 1
      ElseIf wk_Tx = 24 Then
         wk_Tx = PP_SSSMAIN.NrBodyTx - 6
         wk_LastTx = 18 + (PP_SSSMAIN.LastDe - wk_DeC - PP_SSSMAIN.TopDe) * 6
         If wk_LastTx < wk_Tx Then wk_Tx = wk_LastTx
         Do While wk_Tx >= 18
            If AE_CursorCheck_SSSMAIN(CP_SSSMAIN(AE_Px(PP_SSSMAIN, wk_Tx)).TypeA, wk_Tx) Then
               Call AE_CursorMove_SSSMAIN(wk_Tx)
               AE_CursorUp_SSSMAIN = True
               Exit Function
            End If
            wk_Tx = wk_Tx + 1
            If (wk_Tx - 18) Mod 6 = 0 Then wk_Tx = wk_Tx - 6 - 6
            If wk_Tx < 18 Then
               If PP_SSSMAIN.TopDe > 0 Then
                  Call AE_Scrl_SSSMAIN(PP_SSSMAIN.TopDe - 1, False)
                  wk_Tx = wk_Tx + 6
               End If
            End If
         Loop
         wk_Tx = 17
      ElseIf wk_Tx - 6 >= 18 Then
         wk_Tx = wk_Tx - 6
      Else  'wk_Tx - 6 < 18 Then
         If PP_SSSMAIN.TopDe > 0 Then
            Call AE_Scrl_SSSMAIN(PP_SSSMAIN.TopDe - 1, False)
         Else
            wk_Tx = 17
         End If
      End If
      If wk_Tx >= 0 Then
         If AE_CursorCheck_SSSMAIN(CP_SSSMAIN(AE_Px(PP_SSSMAIN, wk_Tx)).TypeA, wk_Tx) Then
            Call AE_CursorMove_SSSMAIN(wk_Tx)
            AE_CursorUp_SSSMAIN = True
            Exit Function
         End If
      End If
   Loop
   AE_CursorUp_SSSMAIN = False
End Function

Function AE_Current_SSSMAIN() As Integer 'Generated.
   Call AE_InitValAll_SSSMAIN
   PP_SSSMAIN.LastDe = SSSMAIN_Current()
   If PP_SSSMAIN.LastDe = 0 Then
      If Not AE_MsgLibrary(PP_SSSMAIN, "Current") Then
         Call AE_InitValAll_SSSMAIN
      Else
         Call AE_ScrlMax(PP_SSSMAIN)
         Call AE_RecalcAll_SSSMAIN
         Call AE_Scrl_SSSMAIN(PP_SSSMAIN.DspTopDe, True)
      End If
' === 20130708 === INSERT S - FWEST)Koroyasu 排他制御の追加
   ElseIf PP_SSSMAIN.LastDe = -1 Then
      Call AE_InitValAll_SSSMAIN
' === 20130708 === INSERT E
   Else
      Call AE_ScrlMax(PP_SSSMAIN)
      Call AE_RecalcAll_SSSMAIN
      Call AE_Scrl_SSSMAIN(PP_SSSMAIN.DspTopDe, True)
   End If
   Call AE_ClearInitValStatus_SSSMAIN
   AE_Current_SSSMAIN = Cn_CuInit
End Function

Sub AE_DeDown_SSSMAIN(ByVal pm_De As Integer) 'Generated.
Dim wk_SaveDe As Integer
Dim wk_SaveDe2 As Integer
      If PP_SSSMAIN.LastDe > 0 Then
         Call AE_SystemError("AE_DeDown に", 750)
         Exit Sub
      End If
      wk_SaveDe = PP_SSSMAIN.De: wk_SaveDe2 = PP_SSSMAIN.De2
      PP_SSSMAIN.De = PP_SSSMAIN.LastDe: PP_SSSMAIN.De2 = PP_SSSMAIN.De
      PP_SSSMAIN.MaskMode = True
         PP_SSSMAIN.SuppressMultiTlDerived = True
         Do While PP_SSSMAIN.De > pm_De
            Call AE_DeSub_SSSMAIN(-1) ', PP_SSSMAIN.De
            PP_SSSMAIN.De = PP_SSSMAIN.De - 1: PP_SSSMAIN.De2 = PP_SSSMAIN.De
         Loop
         PP_SSSMAIN.SuppressMultiTlDerived = False
         PP_SSSMAIN.De = pm_De: PP_SSSMAIN.De2 = PP_SSSMAIN.De
         Call AE_InitValBdDe_SSSMAIN(-3, True, Cn_Status0)
         PP_SSSMAIN.LastDe = PP_SSSMAIN.LastDe + 1
         Call AE_ScrlMax(PP_SSSMAIN)
      PP_SSSMAIN.MaskMode = False
      PP_SSSMAIN.De = wk_SaveDe: PP_SSSMAIN.De2 = wk_SaveDe2
End Sub

Function AE_DeleteCm_SSSMAIN() As Integer 'Generated.
Dim wk_ReturnCd As Integer
   If PP_SSSMAIN.Mode >= Cn_Mode3 Then
      If AE_MsgLibrary(PP_SSSMAIN, "DeleteCm") Then AE_DeleteCm_SSSMAIN = Cn_CuCurrent: Exit Function
      wk_ReturnCd = SSSMAIN_Delete()
      If wk_ReturnCd = 0 Then
         AE_DeleteCm_SSSMAIN = Cn_CuCurrent
      ElseIf wk_ReturnCd = 1 Then
         AE_DeleteCm_SSSMAIN = AE_SelectCm_SSSMAIN(PP_SSSMAIN.Mode, True)
      ElseIf wk_ReturnCd = 2 Then
         AE_DeleteCm_SSSMAIN = AE_Indicate_SSSMAIN(PP_SSSMAIN.Mode, True)
      ElseIf wk_ReturnCd = 3 Then
         AE_DeleteCm_SSSMAIN = AE_Indicate_SSSMAIN(PP_SSSMAIN.Mode, True)
      ElseIf wk_ReturnCd = 4 Then
         AE_DeleteCm_SSSMAIN = AE_NextCm_SSSMAIN(False)
      Else
         AE_DeleteCm_SSSMAIN = AE_AppendC_SSSMAIN(PP_SSSMAIN.Mode)
      End If
   Else
      Beep
      AE_DeleteCm_SSSMAIN = Cn_CuCurrent
   End If
   Call AE_Term_SSSMAIN
End Function

Sub AE_DeleteDe_SSSMAIN() 'Generated.
   If PP_SSSMAIN.Mode = Cn_Mode3 Then Beep: Call AE_CursorCurrent_SSSMAIN: Exit Sub
      If PP_SSSMAIN.ActiveDe <> -1 And PP_SSSMAIN.ActiveDe < PP_SSSMAIN.De Then
         wk_Bool = AE_MsgLibrary(PP_SSSMAIN, "ClearDe")
         Exit Sub
      End If
      PP_SSSMAIN.UnDoDeOp = 2
      PP_SSSMAIN.UnDoDeNo = PP_SSSMAIN.De
      Call AE_DeSave_SSSMAIN(PP_SSSMAIN.De)
      If AE_IsClearedDe_SSSMAIN(PP_SSSMAIN.De) Then PP_SSSMAIN.ActiveDe = -1
      Call AE_DeUp_SSSMAIN(PP_SSSMAIN.De)
      PP_SSSMAIN.ActiveDe = AE_ClearedDe_SSSMAIN(-1)
      If PP_SSSMAIN.LastDe = 0 Then
         PP_SSSMAIN.DerivedOrigin = ""
         Call AE_RecalcBdDe_SSSMAIN '(PP_SSSMAIN.De)
         Call AE_CursorCurrent_SSSMAIN
      Else
         PP_SSSMAIN.DerivedOrigin = ""
         Call AE_RecalcBd_SSSMAIN
         If AE_IsClearedDe_SSSMAIN(PP_SSSMAIN.LastDe - 1) Then
            PP_SSSMAIN.LastDe = PP_SSSMAIN.LastDe - 1
            If PP_SSSMAIN.De < PP_SSSMAIN.LastReadDe Then PP_SSSMAIN.LastReadDe = PP_SSSMAIN.LastReadDe - 1
            PP_SSSMAIN.CursorDirection = Cn_Direction4 '4: Up
            wk_Bool = AE_CursorUp_SSSMAIN(PP_SSSMAIN.Tx)
         Else
            Call AE_CursorCurrent_SSSMAIN
         End If
      End If
      Call AE_ScrlMax(PP_SSSMAIN)
   PP_SSSMAIN.InitValStatus = Cn_ModeDataChanged
End Sub

Sub AE_DeRestore_SSSMAIN(ByVal pm_De As Integer) 'Generated.
Dim wk_ww As Integer
Dim wk_SaveDe As Integer
Dim wk_SaveDe2 As Integer
Dim wk_PxBaseTarget As Integer
Dim wk_Tx As Integer
   wk_SaveDe = PP_SSSMAIN.De: wk_SaveDe2 = PP_SSSMAIN.De2
   PP_SSSMAIN.MaskMode = True
      wk_PxBaseTarget = 38 + 31 * pm_De
      wk_ww = 0
      PP_SSSMAIN.SuppressMultiTlDerived = True
      Do While wk_ww < 31
         If wk_ww + 1 = 31 Then PP_SSSMAIN.SuppressMultiTlDerived = False
         If CP_SSSMAIN(75 + wk_ww).StatusC <> Cn_Status8 Or IsNull(CP_SSSMAIN(75 + wk_ww).CuVal) Then
            CP_SSSMAIN(wk_PxBaseTarget + wk_ww).TpStr = CP_SSSMAIN(75 + wk_ww).TpStr
            CP_SSSMAIN(wk_PxBaseTarget + wk_ww).CuVal = CP_SSSMAIN(75 + wk_ww).CuVal
            CP_SSSMAIN(wk_PxBaseTarget + wk_ww).ExVal = CP_SSSMAIN(75 + wk_ww).ExVal
            CP_SSSMAIN(wk_PxBaseTarget + wk_ww).FractionC = CP_SSSMAIN(75 + wk_ww).FractionC
            CP_SSSMAIN(wk_PxBaseTarget + wk_ww).StatusC = CP_SSSMAIN(75 + wk_ww).StatusC
            CP_SSSMAIN(wk_PxBaseTarget + wk_ww).StatusF = CP_SSSMAIN(75 + wk_ww).StatusF
            CP_SSSMAIN(wk_PxBaseTarget + wk_ww).ExStatus = CP_SSSMAIN(75 + wk_ww).ExStatus
            CP_SSSMAIN(wk_PxBaseTarget + wk_ww).InOutMode = CP_SSSMAIN(75 + wk_ww).InOutMode
            CP_SSSMAIN(wk_PxBaseTarget + wk_ww).CheckRtnCode = CP_SSSMAIN(75 + wk_ww).CheckRtnCode
            CP_SSSMAIN(wk_PxBaseTarget + wk_ww).Modified = CP_SSSMAIN(75 + wk_ww).Modified
            wk_Tx = AE_Tx(PP_SSSMAIN, wk_PxBaseTarget + wk_ww)
            If wk_Tx >= 0 Then AE_Controls(PP_SSSMAIN.CtB + wk_Tx) = AE_Tpstr$(CP_SSSMAIN(75 + wk_ww).TpStr, CP_SSSMAIN(75 + wk_ww).TypeA)
            If CP_SSSMAIN(wk_PxBaseTarget + wk_ww).StatusC <= Cn_Status5 And CP_SSSMAIN(75 + wk_ww).StatusC <= Cn_Status5 Then
               Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(wk_PxBaseTarget + wk_ww), CL_SSSMAIN(wk_PxBaseTarget + wk_ww))
            End If
            If wk_Tx >= 0 Then Call AE_TabStop_SSSMAIN(wk_Tx, wk_Tx, False)
         Else
            CP_SSSMAIN(wk_PxBaseTarget + wk_ww).InOutMode = CP_SSSMAIN(75 + wk_ww).InOutMode
            Call AE_InitValBdDe_SSSMAIN(wk_PxBaseTarget + wk_ww, False, CP_SSSMAIN(75 + wk_ww).StatusF) ', PP_SSSMAIN.De
         End If
         wk_ww = wk_ww + 1
      Loop
      PP_SSSMAIN.SuppressMultiTlDerived = False
   PP_SSSMAIN.MaskMode = False
   PP_SSSMAIN.De = wk_SaveDe: PP_SSSMAIN.De2 = wk_SaveDe2
End Sub

Sub AE_Derived_SSSMAIN_BV_FURIKN(CP_FURIKN As clsCP) 'Generated.
Dim CC_NewVal As Variant
Dim wk_SaveMask As Boolean
Dim wk_Px As Integer
   wk_Px = 64 + 31 * PP_SSSMAIN.De
   CC_NewVal = FURIKN_Derived(AE_NullCnv1_SSSMAIN(CP_SSSMAIN(64 + 31 * PP_SSSMAIN.De).CuVal), AE_NullCnv1_SSSMAIN(CP_SSSMAIN(63 + 31 * PP_SSSMAIN.De).CuVal), AE_NullCnv1_SSSMAIN(CP_SSSMAIN(42 + 31 * PP_SSSMAIN.De).CuVal), AE_NullCnv2_SSSMAIN(CP_SSSMAIN(50 + 31 * PP_SSSMAIN.De).CuVal), CP_SSSMAIN(64 + 31 * PP_SSSMAIN.De))
   If IsEmpty(CC_NewVal) Then Exit Sub
   CP_SSSMAIN(wk_Px).CheckRtnCode = 0
   CC_NewVal = AE_NormData(CP_SSSMAIN(wk_Px), CC_NewVal)
   If CC_NewVal = CP_SSSMAIN(wk_Px).CuVal And CP_SSSMAIN(wk_Px).StatusC >= Cn_Status6 Then
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(wk_Px), CL_SSSMAIN(wk_Px))
   ElseIf IsNull(CC_NewVal) And IsNull(CP_SSSMAIN(wk_Px).CuVal) And CP_SSSMAIN(wk_Px).StatusC >= Cn_Status6 Then
   Else
      wk_SaveMask = PP_SSSMAIN.MaskMode
      PP_SSSMAIN.MaskMode = True
         CP_SSSMAIN(wk_Px).CuVal = CC_NewVal
         CP_SSSMAIN(wk_Px).TpStr = AE_Format$(CP_SSSMAIN(wk_Px), CP_SSSMAIN(wk_Px).CuVal, 0, True)
      PP_SSSMAIN.MaskMode = wk_SaveMask
      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(wk_Px))
      If CP_SSSMAIN(wk_Px).StatusC = Cn_StatusError Then
         CP_SSSMAIN(wk_Px).StatusC = Cn_Status2
         CP_SSSMAIN(wk_Px).StatusF = Cn_Status2
      ElseIf CP_SSSMAIN(wk_Px).StatusC <> Cn_Status6 Then
         CP_SSSMAIN(wk_Px).StatusC = Cn_Status7
         CP_SSSMAIN(wk_Px).StatusF = Cn_Status7
      Else
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(wk_Px), CL_SSSMAIN(wk_Px))
      End If
   End If
End Sub

Sub AE_Derived_SSSMAIN_BV_GNKKN() 'Generated.
Dim CC_NewVal As Variant
Dim wk_SaveMask As Boolean
Dim wk_Px As Integer
   wk_Px = 66 + 31 * PP_SSSMAIN.De
   CC_NewVal = GNKKN_Derived(AE_NullCnv1_SSSMAIN(CP_SSSMAIN(66 + 31 * PP_SSSMAIN.De).CuVal), AE_NullCnv1_SSSMAIN(CP_SSSMAIN(65 + 31 * PP_SSSMAIN.De).CuVal), AE_NullCnv1_SSSMAIN(CP_SSSMAIN(42 + 31 * PP_SSSMAIN.De).CuVal))
   If IsEmpty(CC_NewVal) Then Exit Sub
   CP_SSSMAIN(wk_Px).CheckRtnCode = 0
   CC_NewVal = AE_NormData(CP_SSSMAIN(wk_Px), CC_NewVal)
   If CC_NewVal = CP_SSSMAIN(wk_Px).CuVal And CP_SSSMAIN(wk_Px).StatusC >= Cn_Status6 Then
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(wk_Px), CL_SSSMAIN(wk_Px))
   ElseIf IsNull(CC_NewVal) And IsNull(CP_SSSMAIN(wk_Px).CuVal) And CP_SSSMAIN(wk_Px).StatusC >= Cn_Status6 Then
   Else
      wk_SaveMask = PP_SSSMAIN.MaskMode
      PP_SSSMAIN.MaskMode = True
         CP_SSSMAIN(wk_Px).CuVal = CC_NewVal
         CP_SSSMAIN(wk_Px).TpStr = AE_Format$(CP_SSSMAIN(wk_Px), CP_SSSMAIN(wk_Px).CuVal, 0, True)
      PP_SSSMAIN.MaskMode = wk_SaveMask
      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(wk_Px))
      If CP_SSSMAIN(wk_Px).StatusC = Cn_StatusError Then
         CP_SSSMAIN(wk_Px).StatusC = Cn_Status2
         CP_SSSMAIN(wk_Px).StatusF = Cn_Status2
      ElseIf CP_SSSMAIN(wk_Px).StatusC <> Cn_Status6 Then
         CP_SSSMAIN(wk_Px).StatusC = Cn_Status7
         CP_SSSMAIN(wk_Px).StatusF = Cn_Status7
      Else
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(wk_Px), CL_SSSMAIN(wk_Px))
      End If
   End If
End Sub

Sub AE_Derived_SSSMAIN_BV_SIKKN(CP_SIKKN As clsCP) 'Generated.
Dim CC_NewVal As Variant
Dim wk_SaveMask As Boolean
Dim wk_Px As Integer
   wk_Px = 68 + 31 * PP_SSSMAIN.De
   CC_NewVal = SIKKN_Derived(AE_NullCnv1_SSSMAIN(CP_SSSMAIN(68 + 31 * PP_SSSMAIN.De).CuVal), AE_NullCnv1_SSSMAIN(CP_SSSMAIN(67 + 31 * PP_SSSMAIN.De).CuVal), AE_NullCnv1_SSSMAIN(CP_SSSMAIN(42 + 31 * PP_SSSMAIN.De).CuVal), CP_SSSMAIN(68 + 31 * PP_SSSMAIN.De))
   If IsEmpty(CC_NewVal) Then Exit Sub
   CP_SSSMAIN(wk_Px).CheckRtnCode = 0
   CC_NewVal = AE_NormData(CP_SSSMAIN(wk_Px), CC_NewVal)
   If CC_NewVal = CP_SSSMAIN(wk_Px).CuVal And CP_SSSMAIN(wk_Px).StatusC >= Cn_Status6 Then
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(wk_Px), CL_SSSMAIN(wk_Px))
   ElseIf IsNull(CC_NewVal) And IsNull(CP_SSSMAIN(wk_Px).CuVal) And CP_SSSMAIN(wk_Px).StatusC >= Cn_Status6 Then
   Else
      wk_SaveMask = PP_SSSMAIN.MaskMode
      PP_SSSMAIN.MaskMode = True
         CP_SSSMAIN(wk_Px).CuVal = CC_NewVal
         CP_SSSMAIN(wk_Px).TpStr = AE_Format$(CP_SSSMAIN(wk_Px), CP_SSSMAIN(wk_Px).CuVal, 0, True)
      PP_SSSMAIN.MaskMode = wk_SaveMask
      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(wk_Px))
      If CP_SSSMAIN(wk_Px).StatusC = Cn_StatusError Then
         CP_SSSMAIN(wk_Px).StatusC = Cn_Status2
         CP_SSSMAIN(wk_Px).StatusF = Cn_Status2
      ElseIf CP_SSSMAIN(wk_Px).StatusC <> Cn_Status6 Then
         CP_SSSMAIN(wk_Px).StatusC = Cn_Status7
         CP_SSSMAIN(wk_Px).StatusF = Cn_Status7
      Else
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(wk_Px), CL_SSSMAIN(wk_Px))
      End If
   End If
End Sub

Sub AE_Derived_SSSMAIN_BV_UDNDKBID(PP As clsPP, ByVal DE_INDEX) 'Generated.
Dim CC_NewVal As Variant
Dim wk_SaveMask As Boolean
Dim wk_Px As Integer
   wk_Px = 48 + 31 * PP_SSSMAIN.De
   CC_NewVal = UDNDKBID_Derived(PP_SSSMAIN, AE_NullCnv2_SSSMAIN(CP_SSSMAIN(48 + 31 * PP_SSSMAIN.De).CuVal), AE_NullCnv2_SSSMAIN(CP_SSSMAIN(38 + 31 * PP_SSSMAIN.De).CuVal), PP_SSSMAIN.De2)
   If IsEmpty(CC_NewVal) Then Exit Sub
   CP_SSSMAIN(wk_Px).CheckRtnCode = 0
   CC_NewVal = AE_NormData(CP_SSSMAIN(wk_Px), CC_NewVal)
   If CC_NewVal = CP_SSSMAIN(wk_Px).CuVal And CP_SSSMAIN(wk_Px).StatusC >= Cn_Status6 Then
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(wk_Px), CL_SSSMAIN(wk_Px))
   ElseIf IsNull(CC_NewVal) And IsNull(CP_SSSMAIN(wk_Px).CuVal) And CP_SSSMAIN(wk_Px).StatusC >= Cn_Status6 Then
   Else
      wk_SaveMask = PP_SSSMAIN.MaskMode
      PP_SSSMAIN.MaskMode = True
         CP_SSSMAIN(wk_Px).CuVal = CC_NewVal
         CP_SSSMAIN(wk_Px).TpStr = AE_Format$(CP_SSSMAIN(wk_Px), CP_SSSMAIN(wk_Px).CuVal, 0, True)
      PP_SSSMAIN.MaskMode = wk_SaveMask
      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(wk_Px))
      If CP_SSSMAIN(wk_Px).StatusC = Cn_StatusError Then
         CP_SSSMAIN(wk_Px).StatusC = Cn_Status2
         CP_SSSMAIN(wk_Px).StatusF = Cn_Status2
      ElseIf CP_SSSMAIN(wk_Px).StatusC <> Cn_Status6 Then
         CP_SSSMAIN(wk_Px).StatusC = Cn_Status7
         CP_SSSMAIN(wk_Px).StatusF = Cn_Status7
      Else
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(wk_Px), CL_SSSMAIN(wk_Px))
      End If
   End If
End Sub

Sub AE_Derived_SSSMAIN_BV_URIKN(CP_URIKN As clsCP) 'Generated.
Dim CC_NewVal As Variant
Dim wk_SaveMask As Boolean
Dim wk_Px As Integer
   wk_Px = 58 + 31 * PP_SSSMAIN.De
   CC_NewVal = URIKN_Derived(AE_NullCnv1_SSSMAIN(CP_SSSMAIN(58 + 31 * PP_SSSMAIN.De).CuVal), AE_NullCnv1_SSSMAIN(CP_SSSMAIN(56 + 31 * PP_SSSMAIN.De).CuVal), AE_NullCnv1_SSSMAIN(CP_SSSMAIN(42 + 31 * PP_SSSMAIN.De).CuVal), AE_NullCnv2_SSSMAIN(CP_SSSMAIN(50 + 31 * PP_SSSMAIN.De).CuVal), CP_SSSMAIN(58 + 31 * PP_SSSMAIN.De))
   If IsEmpty(CC_NewVal) Then Exit Sub
   CP_SSSMAIN(wk_Px).CheckRtnCode = 0
   CC_NewVal = AE_NormData(CP_SSSMAIN(wk_Px), CC_NewVal)
   If CC_NewVal = CP_SSSMAIN(wk_Px).CuVal And CP_SSSMAIN(wk_Px).StatusC >= Cn_Status6 Then
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(wk_Px), CL_SSSMAIN(wk_Px))
   ElseIf IsNull(CC_NewVal) And IsNull(CP_SSSMAIN(wk_Px).CuVal) And CP_SSSMAIN(wk_Px).StatusC >= Cn_Status6 Then
   Else
      wk_SaveMask = PP_SSSMAIN.MaskMode
      PP_SSSMAIN.MaskMode = True
         CP_SSSMAIN(wk_Px).CuVal = CC_NewVal
         CP_SSSMAIN(wk_Px).TpStr = AE_Format$(CP_SSSMAIN(wk_Px), CP_SSSMAIN(wk_Px).CuVal, 0, True)
      PP_SSSMAIN.MaskMode = wk_SaveMask
      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(wk_Px))
      If CP_SSSMAIN(wk_Px).StatusC = Cn_StatusError Then
         CP_SSSMAIN(wk_Px).StatusC = Cn_Status2
         CP_SSSMAIN(wk_Px).StatusF = Cn_Status2
      ElseIf CP_SSSMAIN(wk_Px).StatusC <> Cn_Status6 Then
         CP_SSSMAIN(wk_Px).StatusC = Cn_Status7
         CP_SSSMAIN(wk_Px).StatusF = Cn_Status7
      Else
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(wk_Px), CL_SSSMAIN(wk_Px))
      End If
   End If
End Sub

Sub AE_Derived_SSSMAIN_BV_UZEKN(ByVal DE_INDEX, CP_UZEKN As clsCP) 'Generated.
Dim CC_NewVal As Variant
Dim wk_SaveMask As Boolean
Dim wk_Px As Integer
   wk_Px = 59 + 31 * PP_SSSMAIN.De
   CC_NewVal = UZEKN_Derived(PP_SSSMAIN.De2, AE_NullCnv1_SSSMAIN(CP_SSSMAIN(58 + 31 * PP_SSSMAIN.De).CuVal), AE_NullCnv1_SSSMAIN(CP_SSSMAIN(59 + 31 * PP_SSSMAIN.De).CuVal), AE_NullCnv2_SSSMAIN(CP_SSSMAIN(23).CuVal), AE_NullCnv2_SSSMAIN(CP_SSSMAIN(38 + 31 * PP_SSSMAIN.De).CuVal), AE_NullCnv2_SSSMAIN(CP_SSSMAIN(50 + 31 * PP_SSSMAIN.De).CuVal), AE_NullCnv2_SSSMAIN(CP_SSSMAIN(3).CuVal), CP_SSSMAIN(59 + 31 * PP_SSSMAIN.De))
   If IsEmpty(CC_NewVal) Then Exit Sub
   CP_SSSMAIN(wk_Px).CheckRtnCode = 0
   CC_NewVal = AE_NormData(CP_SSSMAIN(wk_Px), CC_NewVal)
   If CC_NewVal = CP_SSSMAIN(wk_Px).CuVal And CP_SSSMAIN(wk_Px).StatusC >= Cn_Status6 Then
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(wk_Px), CL_SSSMAIN(wk_Px))
   ElseIf IsNull(CC_NewVal) And IsNull(CP_SSSMAIN(wk_Px).CuVal) And CP_SSSMAIN(wk_Px).StatusC >= Cn_Status6 Then
   Else
      wk_SaveMask = PP_SSSMAIN.MaskMode
      PP_SSSMAIN.MaskMode = True
         CP_SSSMAIN(wk_Px).CuVal = CC_NewVal
         CP_SSSMAIN(wk_Px).TpStr = AE_Format$(CP_SSSMAIN(wk_Px), CP_SSSMAIN(wk_Px).CuVal, 0, True)
      PP_SSSMAIN.MaskMode = wk_SaveMask
      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(wk_Px))
      If CP_SSSMAIN(wk_Px).StatusC = Cn_StatusError Then
         CP_SSSMAIN(wk_Px).StatusC = Cn_Status2
         CP_SSSMAIN(wk_Px).StatusF = Cn_Status2
      ElseIf CP_SSSMAIN(wk_Px).StatusC <> Cn_Status6 Then
         CP_SSSMAIN(wk_Px).StatusC = Cn_Status7
         CP_SSSMAIN(wk_Px).StatusF = Cn_Status7
      Else
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(wk_Px), CL_SSSMAIN(wk_Px))
      End If
   End If
End Sub

Sub AE_Derived_SSSMAIN_BV_ZKMURIKN() 'Generated.
Dim CC_NewVal As Variant
Dim wk_SaveMask As Boolean
Dim wk_Px As Integer
   wk_Px = 61 + 31 * PP_SSSMAIN.De
   CC_NewVal = ZKMURIKN_Derived(AE_NullCnv1_SSSMAIN(CP_SSSMAIN(58 + 31 * PP_SSSMAIN.De).CuVal), AE_NullCnv2_SSSMAIN(CP_SSSMAIN(52 + 31 * PP_SSSMAIN.De).CuVal), AE_NullCnv2_SSSMAIN(CP_SSSMAIN(27).CuVal))
   If IsEmpty(CC_NewVal) Then Exit Sub
   CP_SSSMAIN(wk_Px).CheckRtnCode = 0
   CC_NewVal = AE_NormData(CP_SSSMAIN(wk_Px), CC_NewVal)
   If CC_NewVal = CP_SSSMAIN(wk_Px).CuVal And CP_SSSMAIN(wk_Px).StatusC >= Cn_Status6 Then
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(wk_Px), CL_SSSMAIN(wk_Px))
   ElseIf IsNull(CC_NewVal) And IsNull(CP_SSSMAIN(wk_Px).CuVal) And CP_SSSMAIN(wk_Px).StatusC >= Cn_Status6 Then
   Else
      wk_SaveMask = PP_SSSMAIN.MaskMode
      PP_SSSMAIN.MaskMode = True
         CP_SSSMAIN(wk_Px).CuVal = CC_NewVal
         CP_SSSMAIN(wk_Px).TpStr = AE_Format$(CP_SSSMAIN(wk_Px), CP_SSSMAIN(wk_Px).CuVal, 0, True)
      PP_SSSMAIN.MaskMode = wk_SaveMask
      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(wk_Px))
      If CP_SSSMAIN(wk_Px).StatusC = Cn_StatusError Then
         CP_SSSMAIN(wk_Px).StatusC = Cn_Status2
         CP_SSSMAIN(wk_Px).StatusF = Cn_Status2
      ElseIf CP_SSSMAIN(wk_Px).StatusC <> Cn_Status6 Then
         CP_SSSMAIN(wk_Px).StatusC = Cn_Status7
         CP_SSSMAIN(wk_Px).StatusF = Cn_Status7
      Else
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(wk_Px), CL_SSSMAIN(wk_Px))
      End If
   End If
End Sub

Sub AE_Derived_SSSMAIN_BV_ZKMUZEKN(ByVal DE_INDEX) 'Generated.
Dim CC_NewVal As Variant
Dim wk_SaveMask As Boolean
Dim wk_Px As Integer
   wk_Px = 62 + 31 * PP_SSSMAIN.De
   CC_NewVal = ZKMUZEKN_Derived(PP_SSSMAIN.De2, AE_NullCnv1_SSSMAIN(CP_SSSMAIN(58 + 31 * PP_SSSMAIN.De).CuVal), AE_NullCnv1_SSSMAIN(CP_SSSMAIN(59 + 31 * PP_SSSMAIN.De).CuVal), AE_NullCnv2_SSSMAIN(CP_SSSMAIN(23).CuVal), AE_NullCnv2_SSSMAIN(CP_SSSMAIN(38 + 31 * PP_SSSMAIN.De).CuVal), AE_NullCnv2_SSSMAIN(CP_SSSMAIN(50 + 31 * PP_SSSMAIN.De).CuVal), AE_NullCnv2_SSSMAIN(CP_SSSMAIN(3).CuVal))
   If IsEmpty(CC_NewVal) Then Exit Sub
   CP_SSSMAIN(wk_Px).CheckRtnCode = 0
   CC_NewVal = AE_NormData(CP_SSSMAIN(wk_Px), CC_NewVal)
   If CC_NewVal = CP_SSSMAIN(wk_Px).CuVal And CP_SSSMAIN(wk_Px).StatusC >= Cn_Status6 Then
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(wk_Px), CL_SSSMAIN(wk_Px))
   ElseIf IsNull(CC_NewVal) And IsNull(CP_SSSMAIN(wk_Px).CuVal) And CP_SSSMAIN(wk_Px).StatusC >= Cn_Status6 Then
   Else
      wk_SaveMask = PP_SSSMAIN.MaskMode
      PP_SSSMAIN.MaskMode = True
         CP_SSSMAIN(wk_Px).CuVal = CC_NewVal
         CP_SSSMAIN(wk_Px).TpStr = AE_Format$(CP_SSSMAIN(wk_Px), CP_SSSMAIN(wk_Px).CuVal, 0, True)
      PP_SSSMAIN.MaskMode = wk_SaveMask
      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(wk_Px))
      If CP_SSSMAIN(wk_Px).StatusC = Cn_StatusError Then
         CP_SSSMAIN(wk_Px).StatusC = Cn_Status2
         CP_SSSMAIN(wk_Px).StatusF = Cn_Status2
      ElseIf CP_SSSMAIN(wk_Px).StatusC <> Cn_Status6 Then
         CP_SSSMAIN(wk_Px).StatusC = Cn_Status7
         CP_SSSMAIN(wk_Px).StatusF = Cn_Status7
      Else
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(wk_Px), CL_SSSMAIN(wk_Px))
      End If
   End If
End Sub

Sub AE_Derived_SSSMAIN_BV_ZNKURIKN() 'Generated.
Dim CC_NewVal As Variant
Dim wk_SaveMask As Boolean
Dim wk_Px As Integer
   wk_Px = 60 + 31 * PP_SSSMAIN.De
   CC_NewVal = ZNKURIKN_Derived(AE_NullCnv1_SSSMAIN(CP_SSSMAIN(58 + 31 * PP_SSSMAIN.De).CuVal), AE_NullCnv2_SSSMAIN(CP_SSSMAIN(52 + 31 * PP_SSSMAIN.De).CuVal), AE_NullCnv2_SSSMAIN(CP_SSSMAIN(27).CuVal))
   If IsEmpty(CC_NewVal) Then Exit Sub
   CP_SSSMAIN(wk_Px).CheckRtnCode = 0
   CC_NewVal = AE_NormData(CP_SSSMAIN(wk_Px), CC_NewVal)
   If CC_NewVal = CP_SSSMAIN(wk_Px).CuVal And CP_SSSMAIN(wk_Px).StatusC >= Cn_Status6 Then
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(wk_Px), CL_SSSMAIN(wk_Px))
   ElseIf IsNull(CC_NewVal) And IsNull(CP_SSSMAIN(wk_Px).CuVal) And CP_SSSMAIN(wk_Px).StatusC >= Cn_Status6 Then
   Else
      wk_SaveMask = PP_SSSMAIN.MaskMode
      PP_SSSMAIN.MaskMode = True
         CP_SSSMAIN(wk_Px).CuVal = CC_NewVal
         CP_SSSMAIN(wk_Px).TpStr = AE_Format$(CP_SSSMAIN(wk_Px), CP_SSSMAIN(wk_Px).CuVal, 0, True)
      PP_SSSMAIN.MaskMode = wk_SaveMask
      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(wk_Px))
      If CP_SSSMAIN(wk_Px).StatusC = Cn_StatusError Then
         CP_SSSMAIN(wk_Px).StatusC = Cn_Status2
         CP_SSSMAIN(wk_Px).StatusF = Cn_Status2
      ElseIf CP_SSSMAIN(wk_Px).StatusC <> Cn_Status6 Then
         CP_SSSMAIN(wk_Px).StatusC = Cn_Status7
         CP_SSSMAIN(wk_Px).StatusF = Cn_Status7
      Else
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(wk_Px), CL_SSSMAIN(wk_Px))
      End If
   End If
End Sub

Sub AE_Derived_SSSMAIN_HV_ENTDT() 'Generated.
Dim CC_NewVal As Variant
Dim wk_SaveMask As Boolean
   CC_NewVal = ENTDT_Derived(AE_NullCnv2_SSSMAIN(CP_SSSMAIN(3).CuVal), AE_NullCnv2_SSSMAIN(CP_SSSMAIN(23).CuVal), AE_NullCnv2_SSSMAIN(CP_SSSMAIN(22).CuVal))
   If IsEmpty(CC_NewVal) Then Exit Sub
   CP_SSSMAIN(20).CheckRtnCode = 0
   CC_NewVal = AE_NormData(CP_SSSMAIN(20), CC_NewVal)
   If CC_NewVal = CP_SSSMAIN(20).CuVal And CP_SSSMAIN(20).StatusC >= Cn_Status6 Then
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(20), CL_SSSMAIN(20))
   ElseIf IsNull(CC_NewVal) And IsNull(CP_SSSMAIN(20).CuVal) And CP_SSSMAIN(20).StatusC >= Cn_Status6 Then
   Else
      wk_SaveMask = PP_SSSMAIN.MaskMode
      PP_SSSMAIN.MaskMode = True
         CP_SSSMAIN(20).CuVal = CC_NewVal
         CP_SSSMAIN(20).TpStr = AE_Format$(CP_SSSMAIN(20), CP_SSSMAIN(20).CuVal, 0, True)
      PP_SSSMAIN.MaskMode = wk_SaveMask
      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(20))
      If CP_SSSMAIN(20).StatusC = Cn_StatusError Then
         CP_SSSMAIN(20).StatusC = Cn_Status2
         CP_SSSMAIN(20).StatusF = Cn_Status2
      ElseIf CP_SSSMAIN(20).StatusC <> Cn_Status6 Then
         CP_SSSMAIN(20).StatusC = Cn_Status7
         CP_SSSMAIN(20).StatusF = Cn_Status7
      Else
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(20), CL_SSSMAIN(20))
      End If
   End If
End Sub

Sub AE_Derived_SSSMAIN_TV_SBAFRUKN(PP As clsPP, CP_SBAFRUKN As clsCP) 'Generated.
Dim CC_NewVal As Variant
Dim wk_SaveMask As Boolean
   CC_NewVal = SBAFRUKN_Derived(AE_NullCnv1_SSSMAIN(CP_SSSMAIN(64 + 31 * PP_SSSMAIN.De).CuVal), PP_SSSMAIN, CP_SSSMAIN(73))
   If IsEmpty(CC_NewVal) Then Exit Sub
   CP_SSSMAIN(73).CheckRtnCode = 0
   CC_NewVal = AE_NormData(CP_SSSMAIN(73), CC_NewVal)
   If CC_NewVal = CP_SSSMAIN(73).CuVal And CP_SSSMAIN(73).StatusC >= Cn_Status6 Then
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(73), CL_SSSMAIN(73))
   ElseIf IsNull(CC_NewVal) And IsNull(CP_SSSMAIN(73).CuVal) And CP_SSSMAIN(73).StatusC >= Cn_Status6 Then
   Else
      wk_SaveMask = PP_SSSMAIN.MaskMode
      PP_SSSMAIN.MaskMode = True
         CP_SSSMAIN(73).CuVal = CC_NewVal
         CP_SSSMAIN(73).TpStr = AE_Format$(CP_SSSMAIN(73), CP_SSSMAIN(73).CuVal, 0, True)
      PP_SSSMAIN.MaskMode = wk_SaveMask
      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(73))
      If CP_SSSMAIN(73).StatusC = Cn_StatusError Then
         CP_SSSMAIN(73).StatusC = Cn_Status2
         CP_SSSMAIN(73).StatusF = Cn_Status2
      ElseIf CP_SSSMAIN(73).StatusC <> Cn_Status6 Then
         CP_SSSMAIN(73).StatusC = Cn_Status7
         CP_SSSMAIN(73).StatusF = Cn_Status7
      Else
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(73), CL_SSSMAIN(73))
      End If
   End If
End Sub

Sub AE_Derived_SSSMAIN_TV_SBAURIKN(PP As clsPP, CP_SBAURIKN As clsCP) 'Generated.
Dim CC_NewVal As Variant
Dim wk_SaveMask As Boolean
   CC_NewVal = SBAURIKN_Derived(AE_NullCnv1_SSSMAIN(CP_SSSMAIN(58 + 31 * PP_SSSMAIN.De).CuVal), PP_SSSMAIN, CP_SSSMAIN(70))
   If IsEmpty(CC_NewVal) Then Exit Sub
   CP_SSSMAIN(70).CheckRtnCode = 0
   CC_NewVal = AE_NormData(CP_SSSMAIN(70), CC_NewVal)
   If CC_NewVal = CP_SSSMAIN(70).CuVal And CP_SSSMAIN(70).StatusC >= Cn_Status6 Then
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(70), CL_SSSMAIN(70))
   ElseIf IsNull(CC_NewVal) And IsNull(CP_SSSMAIN(70).CuVal) And CP_SSSMAIN(70).StatusC >= Cn_Status6 Then
   Else
      wk_SaveMask = PP_SSSMAIN.MaskMode
      PP_SSSMAIN.MaskMode = True
         CP_SSSMAIN(70).CuVal = CC_NewVal
         CP_SSSMAIN(70).TpStr = AE_Format$(CP_SSSMAIN(70), CP_SSSMAIN(70).CuVal, 0, True)
      PP_SSSMAIN.MaskMode = wk_SaveMask
      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(70))
      If CP_SSSMAIN(70).StatusC = Cn_StatusError Then
         CP_SSSMAIN(70).StatusC = Cn_Status2
         CP_SSSMAIN(70).StatusF = Cn_Status2
      ElseIf CP_SSSMAIN(70).StatusC <> Cn_Status6 Then
         CP_SSSMAIN(70).StatusC = Cn_Status7
         CP_SSSMAIN(70).StatusF = Cn_Status7
      Else
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(70), CL_SSSMAIN(70))
      End If
   End If
End Sub

Sub AE_Derived_SSSMAIN_TV_SBAUZEKN(PP As clsPP) 'Generated.
Dim CC_NewVal As Variant
Dim wk_SaveMask As Boolean
   CC_NewVal = SBAUZEKN_Derived(AE_NullCnv2_SSSMAIN(CP_SSSMAIN(3).CuVal), AE_NullCnv1_SSSMAIN(CP_SSSMAIN(59 + 31 * PP_SSSMAIN.De).CuVal), AE_NullCnv1_SSSMAIN(CP_SSSMAIN(60 + 31 * PP_SSSMAIN.De).CuVal), PP_SSSMAIN)
   If IsEmpty(CC_NewVal) Then Exit Sub
   CP_SSSMAIN(71).CheckRtnCode = 0
   CC_NewVal = AE_NormData(CP_SSSMAIN(71), CC_NewVal)
   If CC_NewVal = CP_SSSMAIN(71).CuVal And CP_SSSMAIN(71).StatusC >= Cn_Status6 Then
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(71), CL_SSSMAIN(71))
   ElseIf IsNull(CC_NewVal) And IsNull(CP_SSSMAIN(71).CuVal) And CP_SSSMAIN(71).StatusC >= Cn_Status6 Then
   Else
      wk_SaveMask = PP_SSSMAIN.MaskMode
      PP_SSSMAIN.MaskMode = True
         CP_SSSMAIN(71).CuVal = CC_NewVal
         CP_SSSMAIN(71).TpStr = AE_Format$(CP_SSSMAIN(71), CP_SSSMAIN(71).CuVal, 0, True)
      PP_SSSMAIN.MaskMode = wk_SaveMask
      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(71))
      If CP_SSSMAIN(71).StatusC = Cn_StatusError Then
         CP_SSSMAIN(71).StatusC = Cn_Status2
         CP_SSSMAIN(71).StatusF = Cn_Status2
      ElseIf CP_SSSMAIN(71).StatusC <> Cn_Status6 Then
         CP_SSSMAIN(71).StatusC = Cn_Status7
         CP_SSSMAIN(71).StatusF = Cn_Status7
      Else
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(71), CL_SSSMAIN(71))
      End If
   End If
End Sub

Sub AE_Derived_SSSMAIN_TV_SBAUZKKN(PP As clsPP) 'Generated.
Dim CC_NewVal As Variant
Dim wk_SaveMask As Boolean
   CC_NewVal = SBAUZKKN_Derived(AE_NullCnv2_SSSMAIN(CP_SSSMAIN(3).CuVal), AE_NullCnv1_SSSMAIN(CP_SSSMAIN(62 + 31 * PP_SSSMAIN.De).CuVal), AE_NullCnv1_SSSMAIN(CP_SSSMAIN(60 + 31 * PP_SSSMAIN.De).CuVal), AE_NullCnv1_SSSMAIN(CP_SSSMAIN(61 + 31 * PP_SSSMAIN.De).CuVal), PP_SSSMAIN)
   If IsEmpty(CC_NewVal) Then Exit Sub
   CP_SSSMAIN(72).CheckRtnCode = 0
   CC_NewVal = AE_NormData(CP_SSSMAIN(72), CC_NewVal)
   If CC_NewVal = CP_SSSMAIN(72).CuVal And CP_SSSMAIN(72).StatusC >= Cn_Status6 Then
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(72), CL_SSSMAIN(72))
   ElseIf IsNull(CC_NewVal) And IsNull(CP_SSSMAIN(72).CuVal) And CP_SSSMAIN(72).StatusC >= Cn_Status6 Then
   Else
      wk_SaveMask = PP_SSSMAIN.MaskMode
      PP_SSSMAIN.MaskMode = True
         CP_SSSMAIN(72).CuVal = CC_NewVal
         CP_SSSMAIN(72).TpStr = AE_Format$(CP_SSSMAIN(72), CP_SSSMAIN(72).CuVal, 0, True)
      PP_SSSMAIN.MaskMode = wk_SaveMask
      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(72))
      If CP_SSSMAIN(72).StatusC = Cn_StatusError Then
         CP_SSSMAIN(72).StatusC = Cn_Status2
         CP_SSSMAIN(72).StatusF = Cn_Status2
      ElseIf CP_SSSMAIN(72).StatusC <> Cn_Status6 Then
         CP_SSSMAIN(72).StatusC = Cn_Status7
         CP_SSSMAIN(72).StatusF = Cn_Status7
      Else
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(72), CL_SSSMAIN(72))
      End If
   End If
End Sub

Sub AE_DeSave_SSSMAIN(ByVal pm_De As Integer) 'Generated.
Dim wk_ww As Integer
Dim wk_PxBaseSource As Integer
      wk_PxBaseSource = 38 + 31 * pm_De
      wk_ww = 0
      Do While wk_ww < 31
         CP_SSSMAIN(75 + wk_ww).TpStr = CP_SSSMAIN(wk_PxBaseSource + wk_ww).TpStr
         CP_SSSMAIN(75 + wk_ww).CheckRtnCode = CP_SSSMAIN(wk_PxBaseSource + wk_ww).CheckRtnCode
         CP_SSSMAIN(75 + wk_ww).Modified = CP_SSSMAIN(wk_PxBaseSource + wk_ww).Modified
         CP_SSSMAIN(75 + wk_ww).CuVal = CP_SSSMAIN(wk_PxBaseSource + wk_ww).CuVal
         CP_SSSMAIN(75 + wk_ww).ExVal = CP_SSSMAIN(wk_PxBaseSource + wk_ww).ExVal
         CP_SSSMAIN(75 + wk_ww).FractionC = CP_SSSMAIN(wk_PxBaseSource + wk_ww).FractionC
         CP_SSSMAIN(75 + wk_ww).StatusC = CP_SSSMAIN(wk_PxBaseSource + wk_ww).StatusC
         CP_SSSMAIN(75 + wk_ww).StatusF = CP_SSSMAIN(wk_PxBaseSource + wk_ww).StatusF
         CP_SSSMAIN(75 + wk_ww).ExStatus = CP_SSSMAIN(wk_PxBaseSource + wk_ww).ExStatus
         CP_SSSMAIN(75 + wk_ww).InOutMode = CP_SSSMAIN(wk_PxBaseSource + wk_ww).InOutMode
         CP_SSSMAIN(75 + wk_ww).TypeA = CP_SSSMAIN(wk_PxBaseSource + wk_ww).TypeA
         wk_ww = wk_ww + 1
      Loop
End Sub

Sub AE_DeSub_SSSMAIN(ByVal pm_UD As Integer) 'Generated.
Dim wk_ww As Integer
Dim wk_SaveDe As Integer
Dim wk_SaveDe2 As Integer
Dim wk_PxBaseTarget As Integer
Dim wk_PxBaseSource As Integer
Dim wk_Tx As Integer
   wk_SaveDe = PP_SSSMAIN.De: wk_SaveDe2 = PP_SSSMAIN.De2
      wk_PxBaseTarget = 38 + 31 * PP_SSSMAIN.De
      wk_PxBaseSource = wk_PxBaseTarget + pm_UD * 31
      wk_ww = 0
      Do While wk_ww < 31
         If CP_SSSMAIN(wk_PxBaseSource + wk_ww).StatusC <> Cn_Status8 Or IsNull(CP_SSSMAIN(wk_PxBaseSource + wk_ww).CuVal) Then
            CP_SSSMAIN(wk_PxBaseTarget + wk_ww).CuVal = CP_SSSMAIN(wk_PxBaseSource + wk_ww).CuVal
            CP_SSSMAIN(wk_PxBaseTarget + wk_ww).ExVal = CP_SSSMAIN(wk_PxBaseSource + wk_ww).ExVal
            CP_SSSMAIN(wk_PxBaseTarget + wk_ww).FractionC = CP_SSSMAIN(wk_PxBaseSource + wk_ww).FractionC
            CP_SSSMAIN(wk_PxBaseTarget + wk_ww).StatusC = CP_SSSMAIN(wk_PxBaseSource + wk_ww).StatusC
            CP_SSSMAIN(wk_PxBaseTarget + wk_ww).StatusF = CP_SSSMAIN(wk_PxBaseSource + wk_ww).StatusF
            CP_SSSMAIN(wk_PxBaseTarget + wk_ww).InOutMode = CP_SSSMAIN(wk_PxBaseSource + wk_ww).InOutMode
            CP_SSSMAIN(wk_PxBaseTarget + wk_ww).TpStr = CP_SSSMAIN(wk_PxBaseSource + wk_ww).TpStr
            CP_SSSMAIN(wk_PxBaseTarget + wk_ww).CheckRtnCode = CP_SSSMAIN(wk_PxBaseSource + wk_ww).CheckRtnCode
            CP_SSSMAIN(wk_PxBaseTarget + wk_ww).Modified = CP_SSSMAIN(wk_PxBaseSource + wk_ww).Modified
            wk_Tx = AE_Tx(PP_SSSMAIN, wk_PxBaseTarget + wk_ww)
            If wk_Tx >= 0 Then AE_Controls(PP_SSSMAIN.CtB + wk_Tx) = AE_Tpstr$(CP_SSSMAIN(wk_PxBaseSource + wk_ww).TpStr, CP_SSSMAIN(wk_PxBaseSource + wk_ww).TypeA)
            Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(wk_PxBaseTarget + wk_ww), CL_SSSMAIN(wk_PxBaseTarget + wk_ww))
            If wk_Tx >= 0 Then Call AE_TabStop_SSSMAIN(wk_Tx, wk_Tx, False)
         Else
            CP_SSSMAIN(wk_PxBaseTarget + wk_ww).InOutMode = CP_SSSMAIN(wk_PxBaseSource + wk_ww).InOutMode
            Call AE_InitValBdDe_SSSMAIN(wk_PxBaseTarget + wk_ww, False, CP_SSSMAIN(wk_PxBaseSource + wk_ww).StatusF) ', PP_SSSMAIN.De
         End If
         wk_ww = wk_ww + 1
      Loop
   PP_SSSMAIN.De = wk_SaveDe: PP_SSSMAIN.De2 = wk_SaveDe2
End Sub

Sub AE_DeUp_SSSMAIN(ByVal pm_De As Integer) 'Generated.
Dim wk_SaveDe As Integer
Dim wk_SaveDe2 As Integer
   wk_SaveDe = PP_SSSMAIN.De: wk_SaveDe2 = PP_SSSMAIN.De2
   PP_SSSMAIN.De = pm_De: PP_SSSMAIN.De2 = PP_SSSMAIN.De
   PP_SSSMAIN.MaskMode = True
      PP_SSSMAIN.SuppressMultiTlDerived = True
      Do While PP_SSSMAIN.De <= PP_SSSMAIN.LastDe And PP_SSSMAIN.De <= 0
         If PP_SSSMAIN.De = 0 Then
            Call AE_InitValBdDe_SSSMAIN(-2, True, Cn_Status0)
         Else
            Call AE_DeSub_SSSMAIN(1) ', PP_SSSMAIN.De
         End If
         PP_SSSMAIN.De = PP_SSSMAIN.De + 1: PP_SSSMAIN.De2 = PP_SSSMAIN.De
      Loop
      PP_SSSMAIN.SuppressMultiTlDerived = False
      PP_SSSMAIN.De = pm_De: PP_SSSMAIN.De2 = PP_SSSMAIN.De
      Call AE_InitValBdDe_SSSMAIN(-3, True, Cn_Status0)
      If PP_SSSMAIN.LastDe > 0 Then PP_SSSMAIN.LastDe = PP_SSSMAIN.LastDe - 1: Call AE_ScrlMax(PP_SSSMAIN)
      If PP_SSSMAIN.De < PP_SSSMAIN.LastReadDe Then PP_SSSMAIN.LastReadDe = PP_SSSMAIN.LastReadDe - 1
   PP_SSSMAIN.MaskMode = False
   PP_SSSMAIN.De = wk_SaveDe: PP_SSSMAIN.De2 = wk_SaveDe2
End Sub

Sub AE_EndCm_SSSMAIN() 'Generated.
   If PP_SSSMAIN.CloseCode = 29 Or (PP_SSSMAIN.CloseCode = 2 And PP_SSSMAIN.UnloadMode = 3) Then
   ElseIf PP_SSSMAIN.InitValStatus <> PP_SSSMAIN.Mode Then
      If AE_MsgLibrary(PP_SSSMAIN, "EndCk") Then Exit Sub
   Else
      If AE_MsgLibrary(PP_SSSMAIN, "EndCm") Then Exit Sub
   End If
   wk_Var = SSSMAIN_Close()
   If wk_Var = -1 Then
      wk_Int = CspPurgeFilterReq(FR_SSSMAIN.hwnd)
      Call AE_WindowProcReset(PP_SSSMAIN)
      ReleaseTabCapture FR_SSSMAIN.hwnd
      If PP_SSSMAIN.hIMC <> 0 Then
         Call ImmReleaseContext(PP_SSSMAIN.hIMCHwnd, PP_SSSMAIN.hIMC)
      End If
#If ActiveXcompile = 0 Then
      End
#End If
   ElseIf wk_Var = 1 Then
      wk_Int = CspPurgeFilterReq(FR_SSSMAIN.hwnd)
      Call AE_WindowProcReset(PP_SSSMAIN)
      ReleaseTabCapture FR_SSSMAIN.hwnd
      If PP_SSSMAIN.hIMC <> 0 Then
         Call ImmReleaseContext(PP_SSSMAIN.hIMCHwnd, PP_SSSMAIN.hIMC)
      End If
      FR_SSSMAIN.Hide
   End If
   PP_SSSMAIN.CloseCode = -1
End Sub

Function AE_Execute_SSSMAIN() As Integer 'Generated.
Dim wk_ReturnCd As Integer
Dim wk_De As Integer
   With PP_SSSMAIN
   If CP_SSSMAIN(.Px).StatusC = Cn_Status1 Then
      Call AE_SetCheck_SSSMAIN(AE_Val2(CP_SSSMAIN(.Px)), Cn_Status6, True)
   End If
   If .Mode = Cn_Mode3 Then
      Exit Function
   End If
   If AE_CompleteCheck_SSSMAIN(False) > 0 Then AE_Execute_SSSMAIN = Cn_CuInCompletePx: Exit Function
   If .Mode = Cn_Mode1 Then
   wk_De = AE_ClearedDe_SSSMAIN(-1)
   If wk_De >= 0 Then Call AE_DeUp_SSSMAIN(wk_De): .ActiveDe = -1
      If AE_MsgLibrary(PP_SSSMAIN, "Append") Then AE_Execute_SSSMAIN = Cn_CuCurrent: Exit Function
      wk_ReturnCd = SSSMAIN_Append()
      .ServerCheck = 1000
      If wk_ReturnCd >= .ServerCheck And wk_ReturnCd <= .ServerCheck + 5 Then
         wk_ReturnCd = wk_ReturnCd - .ServerCheck
      Else
         .ServerCheck = False
      End If
      AE_Execute_SSSMAIN = Cn_CuInit
      If wk_ReturnCd = 0 Then Exit Function
      Call AE_Term_SSSMAIN
      If wk_ReturnCd = 1 Then
         AE_Execute_SSSMAIN = AE_SelectCm_SSSMAIN(Cn_Mode1, True)
      ElseIf wk_ReturnCd = 2 Then
         Call AE_ClearInitValStatus_SSSMAIN
         AE_Execute_SSSMAIN = AE_Indicate_SSSMAIN(Cn_Mode1, .ServerCheck)
      ElseIf wk_ReturnCd = 3 Then
         Call AE_ClearInitValStatus_SSSMAIN
         AE_Execute_SSSMAIN = AE_Indicate_SSSMAIN(Cn_Mode1, .ServerCheck)
      ElseIf wk_ReturnCd = 4 Then
         AE_Execute_SSSMAIN = AE_UpdateC_SSSMAIN(Cn_Mode1, .ServerCheck)
      Else
         Call AE_ClearInitValStatus_SSSMAIN
         Call AE_InitValAll_SSSMAIN
         AE_Execute_SSSMAIN = Cn_CuInit
      End If
      .ExMessage = (AE_StatusBar(.ScX))
   ElseIf .Mode = Cn_Mode2 Then
      If AE_MsgLibrary(PP_SSSMAIN, "SelectE") Then AE_Execute_SSSMAIN = Cn_CuCurrent: Exit Function
      AE_Execute_SSSMAIN = AE_Indicate_SSSMAIN(Cn_Mode2, False)
      Exit Function
   ElseIf .Mode = Cn_Mode4 Then
      wk_De = AE_ClearedDe_SSSMAIN(-1)
      If wk_De >= 0 Then Call AE_DeUp_SSSMAIN(wk_De): .ActiveDe = -1
      If .InitValStatus <> .Mode Then
         If AE_MsgLibrary(PP_SSSMAIN, "Update") Then AE_Execute_SSSMAIN = Cn_CuCurrent: Exit Function
      Else
         If AE_MsgLibrary(PP_SSSMAIN, "Update2") Then AE_Execute_SSSMAIN = Cn_CuCurrent: Exit Function
      End If
      wk_ReturnCd = SSSMAIN_Update()
      .ServerCheck = 1000
      If wk_ReturnCd >= .ServerCheck And wk_ReturnCd <= .ServerCheck + 5 Then
         wk_ReturnCd = wk_ReturnCd - .ServerCheck
      Else
         .ServerCheck = False
      End If
      AE_Execute_SSSMAIN = Cn_CuInit
      If wk_ReturnCd = 0 Then Exit Function
      Call AE_Term_SSSMAIN
      If wk_ReturnCd = 1 Then
         Call AE_ClearInitValStatus_SSSMAIN
         AE_Execute_SSSMAIN = AE_SelectCm_SSSMAIN(Cn_Mode4, True)
      ElseIf wk_ReturnCd = 2 Then
         Call AE_ClearInitValStatus_SSSMAIN
         AE_Execute_SSSMAIN = AE_Indicate_SSSMAIN(Cn_Mode4, .ServerCheck)
      ElseIf wk_ReturnCd = 3 Then
         Call AE_ClearInitValStatus_SSSMAIN
         AE_Execute_SSSMAIN = AE_Indicate_SSSMAIN(Cn_Mode4, .ServerCheck)
      ElseIf wk_ReturnCd = 4 Then
         If .ServerCheck = False Then AE_Execute_SSSMAIN = AE_NextCm_SSSMAIN(True)
      ElseIf wk_ReturnCd = 104 Then
         If .ServerCheck = False Then AE_Execute_SSSMAIN = AE_Current_SSSMAIN()
      Else
         Call AE_ClearInitValStatus_SSSMAIN
         AE_Execute_SSSMAIN = AE_AppendC_SSSMAIN(Cn_Mode4)
      End If
      .ExMessage = (AE_StatusBar(.ScX))
   End If
   End With
End Function

Function AE_ExecuteX_SSSMAIN() As Integer 'Generated.
Dim wk_Cursor As Integer
   AE_ExecuteX_SSSMAIN = Cn_CuCurrent
   If PP_SSSMAIN.Executing = False Then
      PP_SSSMAIN.Executing = True
      wk_Cursor = AE_Execute_SSSMAIN()
      AE_ExecuteX_SSSMAIN = wk_Cursor
      PP_SSSMAIN.Executing = False
   End If
End Function

Static Function AE_FuncKey_SSSMAIN(ByVal pm_KeyCode As Integer, ByVal pm_Shift As Integer) As Integer 'Generated.
Dim wk_Cursor As Integer
   AE_FuncKey_SSSMAIN = True
   If Not PP_SSSMAIN.Operable Then Exit Function
   wk_Cursor = Cn_CuCurrent
   If False Then
   ElseIf pm_KeyCode = vbKeyF1 And pm_Shift = 0 Then
      SendKeys "%1"
   ElseIf pm_KeyCode = vbKeyF2 And pm_Shift = 0 Then
      SendKeys "%2"
   ElseIf pm_KeyCode = vbKeyF3 And pm_Shift = 0 Then
      SendKeys "%3"
   End If
End Function

Function AE_Hardcopy_SSSMAIN() As Integer 'Generated.
   If AE_MsgLibrary(PP_SSSMAIN, "Hardcopy") Then AE_Hardcopy_SSSMAIN = Cn_CuCurrent: Exit Function
   On Error Resume Next
   DoEvents
   FR_SSSMAIN.MousePointer = 11
   FR_SSSMAIN.PrintForm
   FR_SSSMAIN.MousePointer = 1
   If Err <> 0 Then
      If AE_MsgLibrary(PP_SSSMAIN, "HardcopyError") Then AE_Hardcopy_SSSMAIN = Cn_CuCurrent: Exit Function
   End If
   On Error GoTo 0
   AE_Hardcopy_SSSMAIN = Cn_CuCurrent
End Function

Function AE_Indicate_SSSMAIN(ByVal pm_ExMode As Integer, ByVal pm_NextRec As Integer) As Integer 'Generated.
   If PP_SSSMAIN.Mode <> Cn_Mode2 And PP_SSSMAIN.InitValStatus <> PP_SSSMAIN.Mode And pm_NextRec <> 1000 Then
      If PP_SSSMAIN.ChOprtMode = 0 Then
         If AE_MsgLibrary(PP_SSSMAIN, "Indicate") Then AE_Indicate_SSSMAIN = Cn_CuCurrent: Exit Function
      End If
   End If
   PP_SSSMAIN.ChOprtMode = Cn_Mode3
   If SSSMAIN_Indicate() Then
      Call AE_ModeChange_SSSMAIN(PP_SSSMAIN.ChOprtMode)
      If PP_SSSMAIN.Mode = PP_SSSMAIN.ChOprtMode Then
         If pm_NextRec = 1000 Then
            Call AE_RecalcAll_SSSMAIN
         ElseIf pm_NextRec = -1 Then
            wk_Int = AE_NextCm_SSSMAIN(False)
         ElseIf pm_NextRec = 0 Then
            wk_Int = AE_Current_SSSMAIN()
         End If
         Call AE_ClearInitValStatus_SSSMAIN
         AE_Indicate_SSSMAIN = Cn_CuInit
      Else
         Call AE_ModeChange_SSSMAIN(pm_ExMode)
         AE_Indicate_SSSMAIN = Cn_CuCurrent
      End If
   Else
      Call AE_ModeChange_SSSMAIN(pm_ExMode)
      AE_Indicate_SSSMAIN = Cn_CuCurrent
   End If
   PP_SSSMAIN.ChOprtMode = 0
End Function

Sub AE_InitValAll_SSSMAIN() 'Generated.
Dim wk_Px As Integer
Dim wk_De As Integer
Dim wk_InOutMode As Long
   wk_Px = 0
   Do While wk_Px < 74
      wk_InOutMode = (CP_SSSMAIN(wk_Px).InOutMode \ 256) And &HFF
      CP_SSSMAIN(wk_Px).InOutMode = wk_InOutMode * 256 + wk_InOutMode
      wk_Px = wk_Px + 1
   Loop
   PP_SSSMAIN.MaskMode = True
      Call AE_InitValHd_SSSMAIN(-2, False, Cn_Status0)
   PP_SSSMAIN.MaskMode = False
   PP_SSSMAIN.MaskMode = True
      Call AE_InitValTl_SSSMAIN(-2, False, Cn_Status0)
   PP_SSSMAIN.MaskMode = False
   Call AE_Scrl_SSSMAIN(0, False)
   PP_SSSMAIN.MaskMode = True
   PP_SSSMAIN.SuppressMultiTlDerived = True
   PP_SSSMAIN.De = 0: PP_SSSMAIN.De2 = 0
   Do While PP_SSSMAIN.De <= 0
      If PP_SSSMAIN.De = 0 Then PP_SSSMAIN.SuppressMultiTlDerived = False
      Call AE_InitValBdDe_SSSMAIN(-2, False, Cn_Status0) ', PP_SSSMAIN.De
      PP_SSSMAIN.De = PP_SSSMAIN.De + 1: PP_SSSMAIN.De2 = PP_SSSMAIN.De
   Loop
   PP_SSSMAIN.SuppressMultiTlDerived = False
   PP_SSSMAIN.AlreadyCDe = True
   PP_SSSMAIN.De = 0: PP_SSSMAIN.De2 = -1
   PP_SSSMAIN.LastDe = 0: Call AE_ScrlMax(PP_SSSMAIN)
   PP_SSSMAIN.LastReadDe = 0
   PP_SSSMAIN.TopDe = 0: AE_ScrlBar(PP_SSSMAIN.ScX) = PP_SSSMAIN.TopDe
   PP_SSSMAIN.MaskMode = False
   PP_SSSMAIN.UnDoDeOp = 0
   PP_SSSMAIN.ActiveDe = -1
   Call AE_ClearInitValStatus_SSSMAIN
   Call AE_StatusClear(PP_SSSMAIN, Cn_ClErrorStatus)
   wk_Var = SSSMAIN_Init()
   wk_Px = 0
   Do While wk_Px < 74
      CP_SSSMAIN(wk_Px).IniStr = CP_SSSMAIN(wk_Px).TpStr
      wk_Px = wk_Px + 1
   Loop
End Sub

Sub AE_InitValBd_SSSMAIN() 'Generated.
Dim wk_Px As Integer
Dim wk_InOutMode As Long
Dim wk_De As Integer
   wk_Px = 38
   Do While wk_Px < 69
      wk_InOutMode = (CP_SSSMAIN(wk_Px).InOutMode \ 256) And &HFF
      CP_SSSMAIN(wk_Px).InOutMode = wk_InOutMode * 256 + wk_InOutMode
      wk_Px = wk_Px + 1
   Loop
   Call AE_Scrl_SSSMAIN(0, False)
   PP_SSSMAIN.MaskMode = True
   PP_SSSMAIN.SuppressMultiTlDerived = True
   PP_SSSMAIN.De = 0: PP_SSSMAIN.De2 = 0
   Do While PP_SSSMAIN.De <= 0
      If PP_SSSMAIN.De = 0 Then PP_SSSMAIN.SuppressMultiTlDerived = False
      Call AE_InitValBdDe_SSSMAIN(-2, False, Cn_Status0) ', PP_SSSMAIN.De
      PP_SSSMAIN.De = PP_SSSMAIN.De + 1: PP_SSSMAIN.De2 = PP_SSSMAIN.De
   Loop
   PP_SSSMAIN.SuppressMultiTlDerived = False
   PP_SSSMAIN.AlreadyCDe = True
   PP_SSSMAIN.De = 0: PP_SSSMAIN.De2 = -1
   PP_SSSMAIN.LastDe = 0: Call AE_ScrlMax(PP_SSSMAIN)
   PP_SSSMAIN.TopDe = 0: AE_ScrlBar(PP_SSSMAIN.ScX) = PP_SSSMAIN.TopDe
   PP_SSSMAIN.MaskMode = False
   PP_SSSMAIN.UnDoDeOp = 0
   PP_SSSMAIN.ActiveDe = -1
   PP_SSSMAIN.InitValStatus = Cn_ModeDataChanged
End Sub

Sub AE_InitValEd_SSSMAIN() 'Generated.
Dim wk_Px As Integer
Dim wk_InOutMode As Long
Dim wk_De As Integer
   wk_Px = 69
   Do While wk_Px < 69
      wk_InOutMode = (CP_SSSMAIN(wk_Px).InOutMode \ 256) And &HFF
      CP_SSSMAIN(wk_Px).InOutMode = wk_InOutMode * 256 + wk_InOutMode
      wk_Px = wk_Px + 1
   Loop
   PP_SSSMAIN.UnDoEDeOp = 0
   PP_SSSMAIN.ActiveEDe = -1
   PP_SSSMAIN.InitValStatus = Cn_ModeDataChanged
End Sub

Sub AE_InitValBdDe_SSSMAIN(ByVal pm_Px As Integer, ByVal pm_SetInOut As Integer, ByVal pm_Status As Integer) 'Generated.
Dim wk_Tx As Integer
Dim wk_PxBase As Integer
Dim RC_ErrorC As Integer
Dim wk_ww As Integer
   wk_PxBase = 31 * PP_SSSMAIN.De
   If pm_Px = -2 Then
      wk_Tx = AE_Tx(PP_SSSMAIN, 38 + wk_PxBase)
      If wk_Tx >= 0 Then
         Call AE_TabStop_SSSMAIN(wk_Tx, wk_Tx + 5, pm_SetInOut)
      End If
   ElseIf pm_Px >= 0 Then
      wk_Tx = AE_Tx(PP_SSSMAIN, pm_Px)
      If wk_Tx >= 0 Then Call AE_TabStop_SSSMAIN(wk_Tx, wk_Tx, pm_SetInOut)
   End If
   If pm_Px = -2 Or pm_Px = 38 + wk_PxBase Then 'HINCD
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(38 + wk_PxBase), Null, pm_Status)
      Call AE_InitValBdDe_SSSMAIN_HINCD(pm_Px, wk_PxBase)
   End If
   If pm_Px = -2 Or pm_Px = 39 + wk_PxBase Then 'SBNNO
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(39 + wk_PxBase), Null, pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 40 + wk_PxBase Then 'HINNMA
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(40 + wk_PxBase), Null, pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 41 + wk_PxBase Then 'HINNMB
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(41 + wk_PxBase), Null, pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 42 + wk_PxBase Then 'URISU
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(42 + wk_PxBase), Null, pm_Status)
      Call AE_InitValBdDe_SSSMAIN_URISU(pm_Px, wk_PxBase)
   End If
   If pm_Px = -2 Or pm_Px = 43 + wk_PxBase Then 'UNTNM
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(43 + wk_PxBase), Null, pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 44 + wk_PxBase Then 'RECNO
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(44 + wk_PxBase), Null, pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 45 + wk_PxBase Then 'ERRKBA
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(45 + wk_PxBase), Null, pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 46 + wk_PxBase Then 'LINNO
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(46 + wk_PxBase), Null, pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 47 + wk_PxBase Then 'UPDID
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(47 + wk_PxBase), Null, pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 48 + wk_PxBase Then 'UDNDKBID
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(48 + wk_PxBase), Null, pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 49 + wk_PxBase Then 'SERIKB
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(49 + wk_PxBase), Null, pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 50 + wk_PxBase Then 'HINID
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(50 + wk_PxBase), Null, pm_Status)
      Call AE_InitValBdDe_SSSMAIN_HINID(pm_Px, wk_PxBase)
   End If
   If pm_Px = -2 Or pm_Px = 51 + wk_PxBase Then 'UDNDKBNM
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(51 + wk_PxBase), Null, pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 52 + wk_PxBase Then 'HINZEIKB
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(52 + wk_PxBase), Null, pm_Status)
      Call AE_InitValBdDe_SSSMAIN_HINZEIKB(pm_Px, wk_PxBase)
   End If
   If pm_Px = -2 Or pm_Px = 53 + wk_PxBase Then 'ZEIRNKKB
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(53 + wk_PxBase), Null, pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 54 + wk_PxBase Then 'SURYO
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(54 + wk_PxBase), Null, pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 55 + wk_PxBase Then 'CASSU
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(55 + wk_PxBase), Null, pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 56 + wk_PxBase Then 'URITK
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(56 + wk_PxBase), Null, pm_Status)
      Call AE_InitValBdDe_SSSMAIN_URITK(pm_Px, wk_PxBase)
   End If
   If pm_Px = -2 Or pm_Px = 57 + wk_PxBase Then 'SBNSU
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(57 + wk_PxBase), Null, pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 58 + wk_PxBase Then 'URIKN
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(58 + wk_PxBase), Null, pm_Status)
      Call AE_InitValBdDe_SSSMAIN_URIKN(pm_Px, wk_PxBase)
   End If
   If pm_Px = -2 Or pm_Px = 59 + wk_PxBase Then 'UZEKN
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(59 + wk_PxBase), Null, pm_Status)
      Call AE_InitValBdDe_SSSMAIN_UZEKN(pm_Px, wk_PxBase)
   End If
   If pm_Px = -2 Or pm_Px = 60 + wk_PxBase Then 'ZNKURIKN
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(60 + wk_PxBase), Null, pm_Status)
      Call AE_InitValBdDe_SSSMAIN_ZNKURIKN(pm_Px, wk_PxBase)
   End If
   If pm_Px = -2 Or pm_Px = 61 + wk_PxBase Then 'ZKMURIKN
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(61 + wk_PxBase), Null, pm_Status)
      Call AE_InitValBdDe_SSSMAIN_ZKMURIKN(pm_Px, wk_PxBase)
   End If
   If pm_Px = -2 Or pm_Px = 62 + wk_PxBase Then 'ZKMUZEKN
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(62 + wk_PxBase), Null, pm_Status)
      Call AE_InitValBdDe_SSSMAIN_ZKMUZEKN(pm_Px, wk_PxBase)
   End If
   If pm_Px = -2 Or pm_Px = 63 + wk_PxBase Then 'FURITK
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(63 + wk_PxBase), Null, pm_Status)
      Call AE_InitValBdDe_SSSMAIN_FURITK(pm_Px, wk_PxBase)
   End If
   If pm_Px = -2 Or pm_Px = 64 + wk_PxBase Then 'FURIKN
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(64 + wk_PxBase), Null, pm_Status)
      Call AE_InitValBdDe_SSSMAIN_FURIKN(pm_Px, wk_PxBase)
   End If
   If pm_Px = -2 Or pm_Px = 65 + wk_PxBase Then 'GNKTK
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(65 + wk_PxBase), Null, pm_Status)
      Call AE_InitValBdDe_SSSMAIN_GNKTK(pm_Px, wk_PxBase)
   End If
   If pm_Px = -2 Or pm_Px = 66 + wk_PxBase Then 'GNKKN
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(66 + wk_PxBase), Null, pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 67 + wk_PxBase Then 'SIKTK
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(67 + wk_PxBase), Null, pm_Status)
      Call AE_InitValBdDe_SSSMAIN_SIKTK(pm_Px, wk_PxBase)
   End If
   If pm_Px = -2 Or pm_Px = 68 + wk_PxBase Then 'SIKKN
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(68 + wk_PxBase), Null, pm_Status)
   End If
   If pm_Px <= -2 Then
      PP_SSSMAIN.DerivedOrigin = ""
      Call AE_RecalcBdDeSub_SSSMAIN
   End If
End Sub

Sub AE_InitValBdDe_SSSMAIN_HINCD(ByVal pm_Px As Integer, ByVal wk_PxBase As Integer) 'Generated.
Dim CC_NewVal As Variant
   CC_NewVal = CP_SSSMAIN(68 + wk_PxBase).CuVal
   PP_SSSMAIN.DerivedOrigin = "BD_HINCD"
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_BV_UDNDKBID(PP_SSSMAIN, PP_SSSMAIN.De2)
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_BV_UZEKN(PP_SSSMAIN.De2, CP_SSSMAIN(59 + 31 * PP_SSSMAIN.De))
   PP_SSSMAIN.DerivedFrom = "BV_UZEKN"
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_BV_ZKMUZEKN(PP_SSSMAIN.De2)
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_TV_SBAUZEKN(PP_SSSMAIN)
   PP_SSSMAIN.DerivedFrom = "BV_ZKMUZEKN"
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_TV_SBAUZKKN(PP_SSSMAIN)
End Sub

Sub AE_InitValBdDe_SSSMAIN_URISU(ByVal pm_Px As Integer, ByVal wk_PxBase As Integer) 'Generated.
Dim CC_NewVal As Variant
   CC_NewVal = CP_SSSMAIN(68 + wk_PxBase).CuVal
   PP_SSSMAIN.DerivedOrigin = "BD_URISU"
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_BV_FURIKN(CP_SSSMAIN(64 + 31 * PP_SSSMAIN.De))
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_BV_GNKKN
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_BV_SIKKN(CP_SSSMAIN(68 + 31 * PP_SSSMAIN.De))
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_BV_URIKN(CP_SSSMAIN(58 + 31 * PP_SSSMAIN.De))
   PP_SSSMAIN.DerivedFrom = "BV_FURIKN"
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_TV_SBAFRUKN(PP_SSSMAIN, CP_SSSMAIN(73))
   PP_SSSMAIN.DerivedFrom = "BV_URIKN"
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_BV_UZEKN(PP_SSSMAIN.De2, CP_SSSMAIN(59 + 31 * PP_SSSMAIN.De))
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_BV_ZKMURIKN
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_BV_ZNKURIKN
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_TV_SBAURIKN(PP_SSSMAIN, CP_SSSMAIN(70))
   PP_SSSMAIN.DerivedFrom = "BV_UZEKN"
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_BV_ZKMUZEKN(PP_SSSMAIN.De2)
   PP_SSSMAIN.DerivedFrom = "BV_ZNKURIKN"
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_TV_SBAUZEKN(PP_SSSMAIN)
   PP_SSSMAIN.DerivedFrom = "BV_ZKMUZEKN"
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_TV_SBAUZKKN(PP_SSSMAIN)
End Sub

Sub AE_InitValBdDe_SSSMAIN_HINID(ByVal pm_Px As Integer, ByVal wk_PxBase As Integer) 'Generated.
Dim CC_NewVal As Variant
   CC_NewVal = CP_SSSMAIN(68 + wk_PxBase).CuVal
   PP_SSSMAIN.DerivedOrigin = "BV_HINID"
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_BV_FURIKN(CP_SSSMAIN(64 + 31 * PP_SSSMAIN.De))
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_BV_URIKN(CP_SSSMAIN(58 + 31 * PP_SSSMAIN.De))
   PP_SSSMAIN.DerivedFrom = "BV_FURIKN"
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_TV_SBAFRUKN(PP_SSSMAIN, CP_SSSMAIN(73))
   PP_SSSMAIN.DerivedFrom = "BV_URIKN"
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_BV_UZEKN(PP_SSSMAIN.De2, CP_SSSMAIN(59 + 31 * PP_SSSMAIN.De))
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_BV_ZKMURIKN
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_BV_ZNKURIKN
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_TV_SBAURIKN(PP_SSSMAIN, CP_SSSMAIN(70))
   PP_SSSMAIN.DerivedFrom = "BV_UZEKN"
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_BV_ZKMUZEKN(PP_SSSMAIN.De2)
   PP_SSSMAIN.DerivedFrom = "BV_ZNKURIKN"
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_TV_SBAUZEKN(PP_SSSMAIN)
   PP_SSSMAIN.DerivedFrom = "BV_ZKMUZEKN"
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_TV_SBAUZKKN(PP_SSSMAIN)
End Sub

Sub AE_InitValBdDe_SSSMAIN_HINZEIKB(ByVal pm_Px As Integer, ByVal wk_PxBase As Integer) 'Generated.
Dim CC_NewVal As Variant
   CC_NewVal = CP_SSSMAIN(68 + wk_PxBase).CuVal
   PP_SSSMAIN.DerivedOrigin = "BV_HINZEIKB"
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_BV_ZKMURIKN
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_BV_ZNKURIKN
   PP_SSSMAIN.DerivedFrom = "BV_ZNKURIKN"
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_TV_SBAUZKKN(PP_SSSMAIN)
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_TV_SBAUZEKN(PP_SSSMAIN)
End Sub

Sub AE_InitValBdDe_SSSMAIN_URITK(ByVal pm_Px As Integer, ByVal wk_PxBase As Integer) 'Generated.
Dim CC_NewVal As Variant
   CC_NewVal = CP_SSSMAIN(68 + wk_PxBase).CuVal
   PP_SSSMAIN.DerivedOrigin = "BV_URITK"
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_BV_URIKN(CP_SSSMAIN(58 + 31 * PP_SSSMAIN.De))
   PP_SSSMAIN.DerivedFrom = "BV_URIKN"
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_BV_ZKMURIKN
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_BV_ZNKURIKN
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_TV_SBAURIKN(PP_SSSMAIN, CP_SSSMAIN(70))
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_BV_UZEKN(PP_SSSMAIN.De2, CP_SSSMAIN(59 + 31 * PP_SSSMAIN.De))
   PP_SSSMAIN.DerivedFrom = "BV_UZEKN"
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_BV_ZKMUZEKN(PP_SSSMAIN.De2)
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_TV_SBAUZEKN(PP_SSSMAIN)
   PP_SSSMAIN.DerivedFrom = "BV_ZKMUZEKN"
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_TV_SBAUZKKN(PP_SSSMAIN)
End Sub

Sub AE_InitValBdDe_SSSMAIN_URIKN(ByVal pm_Px As Integer, ByVal wk_PxBase As Integer) 'Generated.
Dim CC_NewVal As Variant
   CC_NewVal = CP_SSSMAIN(68 + wk_PxBase).CuVal
   PP_SSSMAIN.DerivedOrigin = "BV_URIKN"
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_BV_UZEKN(PP_SSSMAIN.De2, CP_SSSMAIN(59 + 31 * PP_SSSMAIN.De))
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_BV_ZKMURIKN
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_BV_ZNKURIKN
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_TV_SBAURIKN(PP_SSSMAIN, CP_SSSMAIN(70))
   PP_SSSMAIN.DerivedFrom = "BV_UZEKN"
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_BV_ZKMUZEKN(PP_SSSMAIN.De2)
   PP_SSSMAIN.DerivedFrom = "BV_ZNKURIKN"
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_TV_SBAUZEKN(PP_SSSMAIN)
   PP_SSSMAIN.DerivedFrom = "BV_ZKMUZEKN"
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_TV_SBAUZKKN(PP_SSSMAIN)
End Sub

Sub AE_InitValBdDe_SSSMAIN_UZEKN(ByVal pm_Px As Integer, ByVal wk_PxBase As Integer) 'Generated.
Dim CC_NewVal As Variant
   CC_NewVal = CP_SSSMAIN(68 + wk_PxBase).CuVal
   PP_SSSMAIN.DerivedOrigin = "BV_UZEKN"
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_BV_ZKMUZEKN(PP_SSSMAIN.De2)
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_TV_SBAUZEKN(PP_SSSMAIN)
   PP_SSSMAIN.DerivedFrom = "BV_ZKMUZEKN"
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_TV_SBAUZKKN(PP_SSSMAIN)
End Sub

Sub AE_InitValBdDe_SSSMAIN_ZNKURIKN(ByVal pm_Px As Integer, ByVal wk_PxBase As Integer) 'Generated.
Dim CC_NewVal As Variant
   CC_NewVal = CP_SSSMAIN(68 + wk_PxBase).CuVal
   PP_SSSMAIN.DerivedOrigin = "BV_ZNKURIKN"
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_TV_SBAUZEKN(PP_SSSMAIN)
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_TV_SBAUZKKN(PP_SSSMAIN)
End Sub

Sub AE_InitValBdDe_SSSMAIN_ZKMURIKN(ByVal pm_Px As Integer, ByVal wk_PxBase As Integer) 'Generated.
Dim CC_NewVal As Variant
   CC_NewVal = CP_SSSMAIN(68 + wk_PxBase).CuVal
   PP_SSSMAIN.DerivedOrigin = "BV_ZKMURIKN"
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_TV_SBAUZKKN(PP_SSSMAIN)
End Sub

Sub AE_InitValBdDe_SSSMAIN_ZKMUZEKN(ByVal pm_Px As Integer, ByVal wk_PxBase As Integer) 'Generated.
Dim CC_NewVal As Variant
   CC_NewVal = CP_SSSMAIN(68 + wk_PxBase).CuVal
   PP_SSSMAIN.DerivedOrigin = "BV_ZKMUZEKN"
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_TV_SBAUZKKN(PP_SSSMAIN)
End Sub

Sub AE_InitValBdDe_SSSMAIN_FURITK(ByVal pm_Px As Integer, ByVal wk_PxBase As Integer) 'Generated.
Dim CC_NewVal As Variant
   CC_NewVal = CP_SSSMAIN(68 + wk_PxBase).CuVal
   PP_SSSMAIN.DerivedOrigin = "BV_FURITK"
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_BV_FURIKN(CP_SSSMAIN(64 + 31 * PP_SSSMAIN.De))
   PP_SSSMAIN.DerivedFrom = "BV_FURIKN"
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_TV_SBAFRUKN(PP_SSSMAIN, CP_SSSMAIN(73))
End Sub

Sub AE_InitValBdDe_SSSMAIN_FURIKN(ByVal pm_Px As Integer, ByVal wk_PxBase As Integer) 'Generated.
Dim CC_NewVal As Variant
   CC_NewVal = CP_SSSMAIN(68 + wk_PxBase).CuVal
   PP_SSSMAIN.DerivedOrigin = "BV_FURIKN"
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_TV_SBAFRUKN(PP_SSSMAIN, CP_SSSMAIN(73))
End Sub

Sub AE_InitValBdDe_SSSMAIN_GNKTK(ByVal pm_Px As Integer, ByVal wk_PxBase As Integer) 'Generated.
Dim CC_NewVal As Variant
   CC_NewVal = CP_SSSMAIN(68 + wk_PxBase).CuVal
   PP_SSSMAIN.DerivedOrigin = "BV_GNKTK"
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_BV_GNKKN
End Sub

Sub AE_InitValBdDe_SSSMAIN_SIKTK(ByVal pm_Px As Integer, ByVal wk_PxBase As Integer) 'Generated.
Dim CC_NewVal As Variant
   CC_NewVal = CP_SSSMAIN(68 + wk_PxBase).CuVal
   PP_SSSMAIN.DerivedOrigin = "BV_SIKTK"
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_BV_SIKKN(CP_SSSMAIN(68 + 31 * PP_SSSMAIN.De))
End Sub

Sub AE_InitValHd_SSSMAIN(ByVal pm_Px As Integer, ByVal pm_SetInOut As Integer, ByVal pm_Status As Integer) 'Generated.
Dim wk_Tx As Integer
Dim RC_ErrorC As Integer
Dim wk_ww As Integer
   If pm_Px = -2 Then
      Call AE_TabStop_SSSMAIN(0, 17, pm_SetInOut)
   ElseIf pm_Px >= 0 Then
      wk_Tx = AE_Tx(PP_SSSMAIN, pm_Px)
      If wk_Tx >= 0 Then Call AE_TabStop_SSSMAIN(wk_Tx, wk_Tx, pm_SetInOut)
   End If
   If pm_Px = -2 Or pm_Px = 0 Then 'SRANO
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(0), SRANO_InitVal(AE_NullCnv2_SSSMAIN(CP_SSSMAIN(0).CuVal), PP_SSSMAIN, CP_SSSMAIN(0)), pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 1 Then 'UDNNO
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(1), Null, pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 2 Then 'JDNNO
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(2), Null, pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 3 Then 'UDNDT
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(3), UDNDT_InitVal(AE_NullCnv2_SSSMAIN(CP_SSSMAIN(3).CuVal)), pm_Status)
      Call AE_InitValHd_SSSMAIN_UDNDT(pm_Px)
   End If
   If pm_Px = -2 Or pm_Px = 4 Then 'HENRSNCD
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(4), Null, pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 5 Then 'HENRSNNM
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(5), Null, pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 6 Then 'HENSTTCD
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(6), Null, pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 7 Then 'HENSTTNM
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(7), Null, pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 8 Then 'OUTSOUCD
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(8), Null, pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 9 Then 'OUTSOUNM
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(9), Null, pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 10 Then 'SOUCD
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(10), Null, pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 11 Then 'SOUNM
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(11), Null, pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 12 Then 'JDNDT
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(12), Null, pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 13 Then 'ODNDT
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(13), Null, pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 14 Then 'TOKRN
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(14), Null, pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 15 Then 'NHSRN
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(15), Null, pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 16 Then 'OPEID
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(16), OPEID_InitVal(AE_NullCnv2_SSSMAIN(CP_SSSMAIN(16).CuVal), PP_SSSMAIN, CP_SSSMAIN(16)), pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 17 Then 'OPENM
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(17), OPENM_InitVal(AE_NullCnv2_SSSMAIN(CP_SSSMAIN(17).CuVal), PP_SSSMAIN, CP_SSSMAIN(17)), pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 18 Then 'DATNO
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(18), Null, pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 19 Then 'JDNLINNO
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(19), Null, pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 20 Then 'ENTDT
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(20), Null, pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 21 Then 'DENDT
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(21), DENDT_InitVal(AE_NullCnv2_SSSMAIN(CP_SSSMAIN(21).CuVal)), pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 22 Then 'NXTKB
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(22), NXTKB_InitVal(), pm_Status)
      Call AE_InitValHd_SSSMAIN_NXTKB(pm_Px)
   End If
   If pm_Px = -2 Or pm_Px = 23 Then 'TOKCD
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(23), Null, pm_Status)
      Call AE_InitValHd_SSSMAIN_TOKCD(pm_Px)
   End If
   If pm_Px = -2 Or pm_Px = 24 Then 'NHSCD
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(24), Null, pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 25 Then 'CLTID
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(25), Null, pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 26 Then 'TOKSEICD
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(26), Null, pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 27 Then 'TOKZEIKB
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(27), Null, pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 28 Then 'TOKZCLKB
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(28), Null, pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 29 Then 'TKNRPSKB
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(29), Null, pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 30 Then 'TKNZRNKB
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(30), Null, pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 31 Then 'TOKRPSKB
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(31), Null, pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 32 Then 'TOKZRNKB
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(32), Null, pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 33 Then 'MEIKBA
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(33), Null, pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 34 Then 'MEIKBC
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(34), Null, pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 35 Then 'MEIKBB
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(35), Null, pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 36 Then 'FRNKB
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(36), Null, pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 37 Then 'TUKKB
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(37), Null, pm_Status)
   End If
   If pm_Px = -2 Then
      PP_SSSMAIN.DerivedFrom = "(InitVal)"
      PP_SSSMAIN.DerivedOrigin = ""
      Call AE_RecalcHdSub_SSSMAIN
   End If
End Sub

Sub AE_InitValHd_SSSMAIN_UDNDT(ByVal pm_Px As Integer) 'Generated.
Dim CC_NewVal As Variant
   CC_NewVal = CP_SSSMAIN(37).CuVal
   PP_SSSMAIN.DerivedOrigin = "HD_UDNDT"
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_HV_ENTDT
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_TV_SBAUZEKN(PP_SSSMAIN)
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_TV_SBAUZKKN(PP_SSSMAIN)
End Sub

Sub AE_InitValHd_SSSMAIN_NXTKB(ByVal pm_Px As Integer) 'Generated.
Dim CC_NewVal As Variant
   CC_NewVal = CP_SSSMAIN(37).CuVal
   PP_SSSMAIN.DerivedOrigin = "HV_NXTKB"
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_HV_ENTDT
End Sub

Sub AE_InitValHd_SSSMAIN_TOKCD(ByVal pm_Px As Integer) 'Generated.
Dim CC_NewVal As Variant
   CC_NewVal = CP_SSSMAIN(37).CuVal
   PP_SSSMAIN.DerivedOrigin = "HV_TOKCD"
   If pm_Px >= 0 And Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_HV_ENTDT
End Sub

Sub AE_InitValTl_SSSMAIN(ByVal pm_Px As Integer, ByVal pm_SetInOut As Integer, ByVal pm_Status As Integer) 'Generated.
Dim wk_Tx As Integer
Dim RC_ErrorC As Integer
Dim wk_ww As Integer
   If pm_Px = -2 Then
      Call AE_TabStop_SSSMAIN(24, 24, pm_SetInOut)
   ElseIf pm_Px >= 0 Then
      wk_Tx = AE_Tx(PP_SSSMAIN, pm_Px)
      If wk_Tx >= 0 Then Call AE_TabStop_SSSMAIN(wk_Tx, wk_Tx, pm_SetInOut)
   End If
   If pm_Px = -2 Or pm_Px = 69 Then 'UDNCM
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(69), Null, pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 70 Then 'SBAURIKN
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(70), Null, pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 71 Then 'SBAUZEKN
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(71), Null, pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 72 Then 'SBAUZKKN
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(72), Null, pm_Status)
   End If
   If pm_Px = -2 Or pm_Px = 73 Then 'SBAFRUKN
      Call AE_InitVal_SSSMAIN(CP_SSSMAIN(73), Null, pm_Status)
   End If
End Sub

Sub AE_InitVal_SSSMAIN(CP As clsCP, ByVal pm_Value, ByVal pm_Status As Integer) 'Generated.
Dim wk_Tx As Integer
   Call AE_InitValSubNorm(CP, pm_Value, pm_Status)
   wk_Tx = AE_Tx(PP_SSSMAIN, CP.CpPx)
   If wk_Tx >= 0 Then
      Call AE_CtSet(PP_SSSMAIN, CP.CpPx, CP.TpStr, CP.TypeA, False)
      Call AE_ColorSub2(PP_SSSMAIN, CP, CL_SSSMAIN(CP.CpPx), wk_Tx)
   End If
End Sub

Static Sub AE_InOutModeM_SSSMAIN(ByVal pm_ItemName$, ByVal pm_Mode$) 'Generated.
Dim wk_Qx As Integer
Dim wk_Tx As Integer
Dim wk_BodyV As Integer
Dim wk_Px1 As Integer
Dim wk_Px2 As Integer
Dim wk_UCaseObjA$
   wk_UCaseObjA$ = UCase$(pm_ItemName$)
   wk_Qx = 0
   Do While wk_Qx < 74 And UCase$(Mid$(CQ_SSSMAIN(wk_Qx), Cn_AfterPrfx)) <> wk_UCaseObjA$
       wk_Qx = wk_Qx + 1
   Loop
   If UCase$(Mid$(CQ_SSSMAIN(wk_Qx), Cn_AfterPrfx)) <> wk_UCaseObjA$ Then
      Call AE_SystemError("AE_InOutModeM のパラメタ pm_ItemName$ に", 550)
      Exit Sub
   End If
   If Len(pm_Mode$) <> 4 Then
      Call AE_SystemError("AE_InOutModeM のパラメタ pm_Mode$ に", 551)
      Exit Sub
   End If
   wk_BodyV = 1
   If wk_Qx < 38 Then
      wk_Px1 = wk_Qx
      wk_Px2 = wk_Px1 + 1
   ElseIf wk_Qx < 69 Then
      wk_Px1 = wk_Qx
      wk_Px2 = 69
      wk_BodyV = 31
   Else
      wk_Px1 = wk_Qx + 0
      wk_Px2 = wk_Px1 + 1
   End If
   Do While wk_Px1 < wk_Px2
      CP_SSSMAIN(wk_Px1).InOutMode = (CP_SSSMAIN(wk_Px1).InOutMode \ 256) * 256 + CLng(Mid$(pm_Mode$, 1, 1)) * 64 + CLng(Mid$(pm_Mode$, 2, 1)) * 16 + CLng(Mid$(pm_Mode$, 3, 1)) * 4 + CLng(Mid$(pm_Mode$, 4, 1))
      wk_Tx = AE_Tx(PP_SSSMAIN, wk_Px1)
      If wk_Tx >= 0 Then
         If CP_SSSMAIN(wk_Px1).TypeA = Cn_OutputOnly Then
         ElseIf CP_SSSMAIN(wk_Px1).TypeA = Cn_OptionButtonH Or CP_SSSMAIN(wk_Px1).TypeA = Cn_OptionButtonC Or CP_SSSMAIN(wk_Px1).TypeA = Cn_CheckBox Then
            AE_Controls(PP_SSSMAIN.CtB + wk_Tx).Enabled = (AE_GetInOutMode(CP_SSSMAIN(wk_Px1).InOutMode, PP_SSSMAIN.Mode) >= Cn_InOutMode2)
         Else
            AE_Controls(PP_SSSMAIN.CtB + wk_Tx).TabStop = (AE_GetInOutMode(CP_SSSMAIN(wk_Px1).InOutMode, PP_SSSMAIN.Mode) >= Cn_InOutMode2) And (AE_IsEnable(CP_SSSMAIN(wk_Px1).BlockNo, PP_SSSMAIN.ActiveBlockNo))
         End If
      End If
      wk_Px1 = wk_Px1 + wk_BodyV
   Loop
End Sub

Static Sub AE_InOutModeN_SSSMAIN(ByVal pm_ItemName$, ByVal pm_Mode$, Optional ByVal pm_De) 'Generated.
Dim wk_Qx As Integer
Dim wk_Tx As Integer
Dim wk_Px As Integer
Dim wk_UCaseObjA$
   wk_UCaseObjA$ = UCase$(pm_ItemName$)
   wk_Qx = 0
   Do While wk_Qx < 74 And Mid$(CQ_SSSMAIN(wk_Qx), Cn_AfterPrfx) <> wk_UCaseObjA$
       wk_Qx = wk_Qx + 1
   Loop
   If UCase$(Mid$(CQ_SSSMAIN(wk_Qx), Cn_AfterPrfx)) <> wk_UCaseObjA$ Then
      Call AE_SystemError("AE_InOutModeN のパラメタ pm_ItemName$ に", 552)
      Exit Sub
   End If
   If Len(pm_Mode$) <> 4 Then
      Call AE_SystemError("AE_InOutModeN のパラメタ pm_Mode$ に", 553)
      Exit Sub
   End If
   If Not IsMissing(pm_De) Then
      If pm_De < 0 Or pm_De > 0 Then
         Call AE_SystemError("AE_InOutModeN のパラメタ pm_De に", 554)
         Exit Sub
      End If
   End If
   If wk_Qx < 38 Then
      wk_Px = wk_Qx
   ElseIf wk_Qx < 69 Then
      If IsMissing(pm_De) Then
         If PP_SSSMAIN.De2 < 0 Or (Not PP_SSSMAIN.RecalcMode And PP_SSSMAIN.Tx >= 24) Then Exit Sub
         wk_Px = wk_Qx + 31 * PP_SSSMAIN.De
      Else
         wk_Px = wk_Qx + 31 * pm_De
      End If
   Else
      wk_Px = wk_Qx + 0
   End If
   CP_SSSMAIN(wk_Px).InOutMode = (CP_SSSMAIN(wk_Px).InOutMode \ 256) * 256 + CLng(Mid$(pm_Mode$, 1, 1)) * 64 + CLng(Mid$(pm_Mode$, 2, 1)) * 16 + CLng(Mid$(pm_Mode$, 3, 1)) * 4 + CLng(Mid$(pm_Mode$, 4, 1))
   wk_Tx = AE_Tx(PP_SSSMAIN, wk_Px)
   If wk_Tx >= 0 Then
      If CP_SSSMAIN(wk_Px).TypeA = Cn_OutputOnly Then
      ElseIf CP_SSSMAIN(wk_Px).TypeA = Cn_OptionButtonH Or CP_SSSMAIN(wk_Px).TypeA = Cn_OptionButtonC Or CP_SSSMAIN(wk_Px).TypeA = Cn_CheckBox Then
         AE_Controls(PP_SSSMAIN.CtB + wk_Tx).Enabled = (AE_GetInOutMode(CP_SSSMAIN(wk_Px).InOutMode, PP_SSSMAIN.Mode) >= Cn_InOutMode2)
      Else
         AE_Controls(PP_SSSMAIN.CtB + wk_Tx).TabStop = (AE_GetInOutMode(CP_SSSMAIN(wk_Px).InOutMode, PP_SSSMAIN.Mode) >= Cn_InOutMode2) And (AE_IsEnable(CP_SSSMAIN(wk_Px).BlockNo, PP_SSSMAIN.ActiveBlockNo))
      End If
   End If
End Sub

Function AE_InsertDe_SSSMAIN() As Integer 'Generated.
Dim wk_SaveDe As Integer
Dim wk_SaveDe2 As Integer
   AE_InsertDe_SSSMAIN = Cn_CuCurrent
   If PP_SSSMAIN.Mode = Cn_Mode3 Then Beep: Call AE_CursorCurrent_SSSMAIN: Exit Function
      If AE_ClearedDe_SSSMAIN(-1) <> PP_SSSMAIN.ActiveDe Then
         PP_SSSMAIN.ActiveDe = AE_ClearedDe_SSSMAIN(-1)
      End If
      wk_SaveDe = PP_SSSMAIN.De: wk_SaveDe2 = PP_SSSMAIN.De2
      If PP_SSSMAIN.ActiveDe >= 0 Then
         Call AE_DeUp_SSSMAIN(PP_SSSMAIN.ActiveDe)
         If PP_SSSMAIN.ActiveDe < PP_SSSMAIN.De Then
            PP_SSSMAIN.De = PP_SSSMAIN.De - 1
            PP_SSSMAIN.De2 = PP_SSSMAIN.De
            PP_SSSMAIN.InCompletePx = PP_SSSMAIN.Px - PP_SSSMAIN.BodyV
            AE_InsertDe_SSSMAIN = Cn_CuInCompletePx
         End If
      ElseIf PP_SSSMAIN.LastDe > 0 Then
         wk_Bool = AE_MsgLibrary(PP_SSSMAIN, "InsertDe")
         Exit Function
      End If
      PP_SSSMAIN.UnDoDeOp = 0
      Call AE_DeDown_SSSMAIN(PP_SSSMAIN.De)
      PP_SSSMAIN.MaskMode = True
         Call AE_InitValBdDe_SSSMAIN(-2, True, CP_SSSMAIN(PP_SSSMAIN.Px).StatusF) ', PP_SSSMAIN.De
      PP_SSSMAIN.MaskMode = False
      If PP_SSSMAIN.De >= PP_SSSMAIN.LastReadDe Then PP_SSSMAIN.ActiveDe = PP_SSSMAIN.De
      PP_SSSMAIN.De = wk_SaveDe: PP_SSSMAIN.De2 = wk_SaveDe2
      Call AE_ScrlMax(PP_SSSMAIN)
   PP_SSSMAIN.InitValStatus = Cn_ModeDataChanged
End Function

Function AE_IsClearedDe_SSSMAIN(ByVal pm_De As Integer) As Boolean 'Generated.
Dim wk_ww As Integer
Dim wk_PxBase As Integer
   If pm_De < PP_SSSMAIN.LastReadDe Or pm_De > 0 Then
      AE_IsClearedDe_SSSMAIN = False: Exit Function
   End If
   wk_PxBase = 38 + 31 * pm_De
   wk_ww = 0
   Do While wk_ww < 31
      If RTrim$(CP_SSSMAIN(wk_ww + wk_PxBase).TpStr) <> RTrim$(CP_SSSMAIN(wk_ww + wk_PxBase).IniStr) And CP_SSSMAIN(wk_ww + wk_PxBase).StatusC <= Cn_Status6 Then
         AE_IsClearedDe_SSSMAIN = False: Exit Function
      ElseIf CP_SSSMAIN(wk_ww + wk_PxBase).StatusC = Cn_Status1 Then
         If RTrim$(CP_SSSMAIN(wk_ww + wk_PxBase).TpStr) <> "" Then
            AE_IsClearedDe_SSSMAIN = False: Exit Function
         End If
      ElseIf Not AE_IsNullZero(PP_SSSMAIN, CP_SSSMAIN(wk_ww + wk_PxBase)) And (CP_SSSMAIN(wk_ww + wk_PxBase).StatusC <= Cn_Status5 Or (CP_SSSMAIN(wk_ww + wk_PxBase).StatusC <= Cn_Status6 And Not IsNull(CP_SSSMAIN(wk_ww + wk_PxBase).CuVal))) Then
         AE_IsClearedDe_SSSMAIN = False: Exit Function
      ElseIf AE_IsNullZero(PP_SSSMAIN, CP_SSSMAIN(wk_ww + wk_PxBase)) And (CP_SSSMAIN(wk_ww + wk_PxBase).StatusC <= Cn_Status5 Or (CP_SSSMAIN(wk_ww + wk_PxBase).StatusC <= Cn_Status6 And Not AE_IsNull_SSSMAIN(CP_SSSMAIN(wk_ww + wk_PxBase).CuVal))) Then
         AE_IsClearedDe_SSSMAIN = False: Exit Function
      End If
      wk_ww = wk_ww + 1
   Loop
   AE_IsClearedDe_SSSMAIN = True
End Function

Function AE_IsNull_SSSMAIN(ByVal VALU) As Boolean 'Generated.
   If IsNull(VALU) Then
       AE_IsNull_SSSMAIN = True
   ElseIf Trim$(VALU) = "" Then
       AE_IsNull_SSSMAIN = True
   Else
       AE_IsNull_SSSMAIN = False
   End If
End Function

Static Function AE_KeyDown_SSSMAIN(Ct As Control, ByRef pm_KeyCode As Integer, ByVal pm_Shift As Integer, ByRef pm_TA$) As Integer 'Generated.
Dim wk_TopDe As Integer
   PP_SSSMAIN.KeyDownMode = PP_SSSMAIN.Mode
Dim wk_Tx As Integer
Dim wk_Px As Integer
Dim wk_Txt$
Dim wk_SS As Long
Dim wk_SS2 As Long
Dim wk_Moji$
Dim wk_Ln As Integer
Dim wk_Ln2 As Long
Dim wk_DeC As Integer
Dim wk_FractionC As Integer
   If TypeOf Ct Is TextBox Then
      Ct.Locked = False
   End If
   wk_Txt$ = Ct
   wk_Tx = PP_SSSMAIN.Tx
   wk_Px = PP_SSSMAIN.Px
   PP_SSSMAIN.EditText = False
   PP_SSSMAIN.UnderFurigana = False
   PP_SSSMAIN.UnderFurigana22 = False
   Select Case CP_SSSMAIN(wk_Px).TypeA
      Case Cn_InputOnly, Cn_ListBox, Cn_OutputOnly
      Case Else
         wk_SS = Ct.SelStart
   End Select
   AE_KeyDown_SSSMAIN = False
   PP_SSSMAIN.CursorDest = Cn_Dest0
   If Not PP_SSSMAIN.Operable Then
      pm_KeyCode = 0
   ElseIf pm_KeyCode = vbKeyUp And pm_Shift = 0 Then
      PP_SSSMAIN.CursorDirection = Cn_Direction4 '4: Up
      pm_KeyCode = 0
      PP_SSSMAIN.CursorDest = Cn_Dest4
      GoTo CheckOrSkip
   ElseIf pm_KeyCode = vbKeyUp And pm_Shift = 2 Then
      PP_SSSMAIN.CursorDirection = Cn_Direction1 '1: Next
      PP_SSSMAIN.CursorDest = Cn_Dest2
      pm_KeyCode = 0
      GoTo CheckOrSkip
   ElseIf pm_KeyCode = vbKeyDown And pm_Shift = 0 Then
      PP_SSSMAIN.CursorDirection = Cn_Direction3 '3: Down
      pm_KeyCode = 0
         PP_SSSMAIN.CursorDest = Cn_Dest5
         GoTo CheckOrSkip
   ElseIf pm_KeyCode = vbKeyDown And pm_Shift = 2 Then
      PP_SSSMAIN.CursorDirection = Cn_Direction2 '2: Prev
      PP_SSSMAIN.CursorDest = Cn_Dest3
      pm_KeyCode = 0
      GoTo CheckOrSkip
   ElseIf pm_KeyCode = vbKeyRight And pm_Shift = 0 Then
      PP_SSSMAIN.CursorDirection = Cn_Direction1 '1: Next
      pm_KeyCode = 0
      Select Case CP_SSSMAIN(wk_Px).TypeA
         Case Cn_InputOnly, Cn_ListBox
            PP_SSSMAIN.CursorDest = Cn_Dest6: GoTo CheckOrSkip
      End Select
      If PP_SSSMAIN.Mode = Cn_Mode3 Then PP_SSSMAIN.CursorDest = Cn_Dest6: GoTo CheckOrSkip
      If Not (PP_SSSMAIN.Override = 1 And Ct.SelLength = 1) And PP_SSSMAIN.SelValid And Ct.SelLength = Len(wk_Txt$) And Len(wk_Txt$) > 0 Then
         If CP_SSSMAIN(wk_Px).Alignment <> 1 Then '左詰め
            wk_SS = Len(wk_Txt$) - PP_SSSMAIN.Override
            Do While wk_SS > 0
               wk_Moji$ = Mid$(wk_Txt$, wk_SS, 1)
               If wk_Moji$ <> Space$(1) And AE_KeyInOkChar(PP_SSSMAIN, wk_Moji$, CP_SSSMAIN(wk_Px).KeyInOkClass) Then
                  Ct.SelStart = wk_SS
                  GoTo AE_KeyDownRightEnd1_SSSMAIN
               End If
               wk_SS = wk_SS - 1
            Loop
            Ct.SelStart = 0
         Else
            Ct.SelStart = Len(wk_Txt$) - PP_SSSMAIN.Override
         End If
AE_KeyDownRightEnd1_SSSMAIN:
         Ct.SelLength = PP_SSSMAIN.Override
      Else
         wk_Ln = Len(wk_Txt$)
         If wk_SS = wk_Ln Then
            If PP_SSSMAIN.ArrowLimit = False And PP_SSSMAIN.AL = False Then PP_SSSMAIN.CursorDest = Cn_Dest6: GoTo CheckOrSkip
         ElseIf wk_SS <= wk_Ln - 2 Or wk_Ln <= 1 And CP_SSSMAIN(wk_Px).MaxLength <> 0 Then
            Do While wk_SS <= wk_Ln - 2
               wk_SS = wk_SS + 1
               wk_Moji$ = Mid$(wk_Txt$, wk_SS + 1, 1)
               If AE_KeyInOkChar(PP_SSSMAIN, wk_Moji$, CP_SSSMAIN(wk_Px).KeyInOkClass) Then
                  Ct.SelStart = wk_SS
                  Ct.SelLength = PP_SSSMAIN.Override
                  GoTo AE_KeyDownRightEnd2_SSSMAIN
               ElseIf wk_Moji$ = Space$(1) And AE_KeyInOkChar(PP_SSSMAIN, Mid$(wk_Txt$, wk_SS, 1), CP_SSSMAIN(wk_Px).KeyInOkClass) Then
                  Ct.SelStart = wk_SS
                  Ct.SelLength = PP_SSSMAIN.Override
                  GoTo AE_KeyDownRightEnd2_SSSMAIN
               ElseIf wk_Moji$ = Space$(1) And Mid$(wk_Txt$, wk_SS, 1) <> Space$(1) And CP_SSSMAIN(wk_Px).FixedFormat = 1 Then
                  Ct.SelStart = wk_SS
                  Ct.SelLength = PP_SSSMAIN.Override
                  GoTo AE_KeyDownRightEnd2_SSSMAIN
               ElseIf Mid$(wk_Txt$, wk_SS, 1) = Space$(1) And Not AE_KeyInOkChar(PP_SSSMAIN, Space$(1), CP_SSSMAIN(wk_Px).KeyInOkClass) Then
                  Exit Do
               End If
            Loop
            If PP_SSSMAIN.ArrowLimit = False And PP_SSSMAIN.AL = False Then PP_SSSMAIN.CursorDest = Cn_Dest6: GoTo CheckOrSkip
AE_KeyDownRightEnd2_SSSMAIN:
         Else
            If (CP_SSSMAIN(wk_Px).Alignment <> 1 And CP_SSSMAIN(wk_Px).MaxLength <> 0) Or PP_SSSMAIN.Mode = Cn_Mode3 Then '左詰め
               If PP_SSSMAIN.Override And PP_SSSMAIN.ArrowLimit = False And PP_SSSMAIN.AL = False Then PP_SSSMAIN.CursorDest = Cn_Dest6: GoTo CheckOrSkip
               If AE_KeyInOkChar(PP_SSSMAIN, Mid$(wk_Txt$, wk_SS + 1, 1), CP_SSSMAIN(wk_Px).KeyInOkClass) Then
                  Ct.SelStart = wk_SS + 1
                  Ct.SelLength = PP_SSSMAIN.Override
                  GoTo AE_KeyDownRightEnd2_SSSMAIN
               End If
            Else
               Ct.SelStart = wk_Ln
               Ct.SelLength = PP_SSSMAIN.Override
            End If
         End If
      End If
   ElseIf pm_KeyCode = vbKeyRight And pm_Shift = 2 Then
      PP_SSSMAIN.CursorDirection = Cn_Direction1 '1: Next
      pm_KeyCode = 0
      PP_SSSMAIN.CursorDest = Cn_Dest6: GoTo CheckOrSkip
   ElseIf pm_KeyCode = vbKeyLeft And pm_Shift = 0 Then
      PP_SSSMAIN.CursorDirection = Cn_Direction2 '2: Prev
      pm_KeyCode = 0
      Select Case CP_SSSMAIN(wk_Px).TypeA
         Case Cn_InputOnly, Cn_ListBox
            PP_SSSMAIN.CursorDest = Cn_Dest7: GoTo CheckOrSkip
      End Select
      If PP_SSSMAIN.Mode = Cn_Mode3 Then PP_SSSMAIN.CursorDest = Cn_Dest7: GoTo CheckOrSkip
      If Not (PP_SSSMAIN.Override = 1 And Ct.SelLength = 1) And PP_SSSMAIN.SelValid And Ct.SelLength = Len(wk_Txt$) And Len(wk_Txt$) > 0 Then
         If CP_SSSMAIN(wk_Px).Alignment = 1 Then '右詰め
            wk_SS = 0
            wk_Ln = Len(wk_Txt$) - PP_SSSMAIN.Override
            Do While wk_SS < wk_Ln
               wk_Moji$ = Mid$(wk_Txt$, wk_SS + 1, 1)
               If AE_KeyInOkChar(PP_SSSMAIN, wk_Moji$, CP_SSSMAIN(wk_Px).KeyInOkClass) Then
                  Ct.SelStart = wk_SS
                  GoTo AE_KeyDownLeftEnd1_SSSMAIN
               End If
               wk_SS = wk_SS + 1
            Loop
            Ct.SelStart = wk_Ln
         Else
            Ct.SelStart = 0
         End If
AE_KeyDownLeftEnd1_SSSMAIN:
         Ct.SelLength = PP_SSSMAIN.Override
      Else
         If wk_SS > 0 And wk_SS = Len(wk_Txt$) Then
            PP_SSSMAIN.Override = 1
            Ct.SelStart = wk_SS - 1
            Ct.SelLength = PP_SSSMAIN.Override
         ElseIf wk_SS = 0 Then
            If PP_SSSMAIN.ArrowLimit = False And PP_SSSMAIN.AL = False Then PP_SSSMAIN.CursorDest = Cn_Dest7: GoTo CheckOrSkip
         Else
            Do While wk_SS > 0
               wk_Moji$ = Mid$(wk_Txt$, wk_SS, 1)
               wk_SS = wk_SS - 1
               If AE_KeyInOkChar(PP_SSSMAIN, wk_Moji$, CP_SSSMAIN(wk_Px).KeyInOkClass) Then
                  Ct.SelStart = wk_SS
                  Ct.SelLength = PP_SSSMAIN.Override
                  GoTo AE_KeyDownLeftEnd2_SSSMAIN
               End If
            Loop
            If PP_SSSMAIN.ArrowLimit = False And PP_SSSMAIN.AL = False Then PP_SSSMAIN.CursorDest = Cn_Dest7: GoTo CheckOrSkip
         End If
AE_KeyDownLeftEnd2_SSSMAIN:
      End If
   ElseIf pm_KeyCode = vbKeyLeft And pm_Shift = 2 Then
      PP_SSSMAIN.CursorDirection = Cn_Direction2 '2: Prev
      pm_KeyCode = 0
      PP_SSSMAIN.CursorDest = Cn_Dest7: GoTo CheckOrSkip
   ElseIf pm_KeyCode = 126 Then
      PP_SSSMAIN.CursorDirection = Cn_Direction2 '2: Prev
      pm_KeyCode = 0
      PP_SSSMAIN.CursorDest = Cn_Dest7
      GoTo CheckOrSkip
   ElseIf (pm_KeyCode = vbKeyExecute Or pm_KeyCode = vbKeyReturn) And pm_Shift = 0 Or pm_KeyCode = 127 Then
KeyExecute:
      PP_SSSMAIN.CursorDirection = Cn_Direction1 '1: Next
      pm_KeyCode = 0
      If wk_Tx >= 18 And wk_Tx < 24 Then
         wk_DeC = 0: If PP_SSSMAIN.ActiveDe >= 0 Or Not AE_GetDeApendable(PP_SSSMAIN) Then wk_DeC = 1
         If PP_SSSMAIN.De > PP_SSSMAIN.LastDe - wk_DeC Then
            PP_SSSMAIN.CursorDirection = Cn_Direction4 '4: Up
            wk_Bool = AE_CursorUp_SSSMAIN(wk_Tx)
         Else
            AE_KeyDown_SSSMAIN = True
            If PP_SSSMAIN.ActiveDe = PP_SSSMAIN.De Then
               If Not AE_IsClearedDe_SSSMAIN(PP_SSSMAIN.De) Then
                  PP_SSSMAIN.ActiveDe = -1: Call AE_ScrlMax(PP_SSSMAIN)
               End If
            End If
         End If
      Else
         AE_KeyDown_SSSMAIN = True
      End If
   ElseIf pm_KeyCode = vbKeyEnd And (pm_Shift And 1) <> 1 Then
      PP_SSSMAIN.CursorDirection = Cn_Direction2 '2: Prev
      PP_SSSMAIN.CursorDest = Cn_Dest3
      pm_KeyCode = 0
      GoTo CheckOrSkip
   ElseIf pm_KeyCode = vbKeyHome And (pm_Shift And 1) <> 1 Then
      PP_SSSMAIN.CursorDirection = Cn_Direction1 '1: Next
      PP_SSSMAIN.CursorDest = Cn_Dest2
      pm_KeyCode = 0
      GoTo CheckOrSkip
   ElseIf pm_KeyCode = vbKeyPageDown And pm_Shift = 0 Then
      pm_KeyCode = 0
      If (PP_SSSMAIN.ScrollObject And 1) > 0 Then
         If PP_SSSMAIN.MaxDspC > 0 Then Call AE_Scrl_SSSMAIN(PP_SSSMAIN.TopDe + PP_SSSMAIN.ScrlMaxL, True)
      End If
   ElseIf pm_KeyCode = vbKeyPageUp And pm_Shift = 0 Then
      pm_KeyCode = 0
      If (PP_SSSMAIN.ScrollObject And 1) > 0 Then Call AE_Scrl_SSSMAIN(PP_SSSMAIN.TopDe - PP_SSSMAIN.ScrlMaxL, True)
   ElseIf pm_KeyCode = 229 Then
      PP_SSSMAIN.EditText = True
   ElseIf pm_KeyCode = vbKeyDelete And pm_Shift <= 2 Then
      pm_KeyCode = 0
      If PP_SSSMAIN.Mode = Cn_Mode3 Then Exit Function
      wk_Ln = Len((Ct))
      If CP_SSSMAIN(wk_Px).KeyInOkClass = Asc("-") Then
         Exit Function
      ElseIf CP_SSSMAIN(wk_Px).TypeA = Cn_InputOnly Then
         Exit Function
      ElseIf Not AE_IsWritableInOutMode(PP_SSSMAIN, CP_SSSMAIN(wk_Px)) Or Not AE_IsEnable(CP_SSSMAIN(wk_Px).BlockNo, PP_SSSMAIN.ActiveBlockNo) Then
         Exit Function
      ElseIf CP_SSSMAIN(wk_Px).FixedFormat = 1 Then
         If AE_KeyInOkChar(PP_SSSMAIN, Space$(1), CP_SSSMAIN(wk_Px).KeyInOkClass) Then
            wk_Txt$ = Left$(wk_Txt$, wk_SS) & Space$(LenWid(Mid$(wk_Txt$, wk_SS + 1, 1))) & Mid$(wk_Txt$, wk_SS + 2)
            wk_Ln = Len(wk_Txt$) - PP_SSSMAIN.Override
            wk_SS = wk_SS + 1
            Do While wk_SS < wk_Ln
               wk_Moji$ = Mid$(wk_Txt$, wk_SS + 1, 1)
               If AE_KeyInOkChar(PP_SSSMAIN, wk_Moji$, CP_SSSMAIN(wk_Px).KeyInOkClass) Then Exit Do
               wk_SS = wk_SS + 1
            Loop
         Else
            Exit Function
         End If
      ElseIf Ct.SelLength = wk_Ln And wk_Ln > 1 Then
         wk_Txt$ = Space$(CP_SSSMAIN(wk_Px).MaxLength)
         If CP_SSSMAIN(wk_Px).Alignment = 1 And (PP_SSSMAIN.SelValid Or CP_SSSMAIN(wk_Px).FixedFormat = 1) Then wk_SS = CP_SSSMAIN(wk_Px).MaxLength
      ElseIf CP_SSSMAIN(wk_Px).MaxLength = 0 Then
         wk_Txt$ = Left$(wk_Txt$, wk_SS) & Mid$(wk_Txt$, wk_SS + 2)
      ElseIf CP_SSSMAIN(wk_Px).Alignment <> 1 Then
         If Ct.SelLength > 1 And (CP_SSSMAIN(wk_Px).FormatClass = Cn_Memo Or CP_SSSMAIN(wk_Px).FormatClass = Cn_Name) And AE_SSSWin Then
            wk_Txt$ = Left$(wk_Txt$, wk_SS) & Mid$(wk_Txt$, wk_SS + Ct.SelLength + 1) & Space$(LenWid(Mid$((Ct), wk_SS + 1, Ct.SelLength))) 'V6.52
         ElseIf Len(wk_Txt$) >= wk_SS + 1 Then
            wk_Txt$ = Left$(wk_Txt$, wk_SS) & Mid$(wk_Txt$, wk_SS + 2) & Space$(LenWid(Mid$((Ct), wk_SS + 1, 1)))
         End If
         If AE_Numerical(CP_SSSMAIN(wk_Px).FormatClass) Then
            If IsNull(AE_Val(CP_SSSMAIN(wk_Px), wk_Txt$, CP_SSSMAIN(wk_Px).FractionC)) Then
            ElseIf AE_Val(CP_SSSMAIN(wk_Px), wk_Txt$, CP_SSSMAIN(wk_Px).FractionC) = 0 Then
               wk_Txt$ = ""
            End If
         End If
      Else
         wk_SS2 = wk_SS: If Ct.SelLength = 0 And CP_SSSMAIN(wk_Px).Alignment = 1 And AE_Numerical(CP_SSSMAIN(wk_Px).FormatClass) And wk_SS > 0 Then wk_SS2 = wk_SS - 1
         If Mid$(wk_Txt$, wk_SS2 + 1, 1) = "." And AE_Numerical(CP_SSSMAIN(wk_Px).FormatClass) Then
            wk_Ln2 = Len(Trim$(AE_Format$(CP_SSSMAIN(wk_Px), AE_Val(CP_SSSMAIN(wk_Px), Left$(wk_Txt$, wk_SS2) & Mid$(wk_Txt$, wk_SS2 + 2), wk_FractionC), wk_FractionC, True)))
            If wk_Ln2 > CP_SSSMAIN(wk_Px).MaxLength Or _
               wk_Ln2 > CP_SSSMAIN(wk_Px).MaxLength - 1 And (CP_SSSMAIN(wk_Px).FormatClass = Cn_Snum Or CP_SSSMAIN(wk_Px).FormatClass = Cn_Schn) And InStr(wk_Txt$, "-") = 0 Then
               Beep
               Exit Function
            End If
         End If
         If Ct.SelLength > 1 And (CP_SSSMAIN(wk_Px).FormatClass = Cn_Memo Or CP_SSSMAIN(wk_Px).FormatClass = Cn_Name) And AE_SSSWin Then 'V6.52
            wk_Txt$ = Space$(LenWid(Mid$((Ct), wk_SS2 + 1, Ct.SelLength))) & Left$(wk_Txt$, wk_SS2) & Mid$(wk_Txt$, wk_SS2 + Ct.SelLength + 1) 'V6.52
         ElseIf Len(wk_Txt$) >= wk_SS + 1 Then
            wk_Txt$ = Space$(LenWid(Mid$((Ct), wk_SS2 + 1, 1))) & Left$(wk_Txt$, wk_SS2) & Mid$(wk_Txt$, wk_SS2 + 2)
         End If
         If AE_Numerical(CP_SSSMAIN(wk_Px).FormatClass) Then
            If IsNull(AE_Val(CP_SSSMAIN(wk_Px), wk_Txt$, CP_SSSMAIN(wk_Px).FractionC)) Then
               wk_SS = wk_Ln
            ElseIf AE_Val(CP_SSSMAIN(wk_Px), wk_Txt$, CP_SSSMAIN(wk_Px).FractionC) = 0 Then
               wk_Txt$ = ""
               wk_SS = wk_Ln
            End If
         End If
      End If
      pm_TA$ = AE_Format$(CP_SSSMAIN(wk_Px), AE_Val(CP_SSSMAIN(wk_Px), wk_Txt$, CP_SSSMAIN(wk_Px).FractionC), CP_SSSMAIN(wk_Px).FractionC, False)
      PP_SSSMAIN.MaskMode = True
         Ct = pm_TA$
         Ct.SelStart = wk_SS
         Call AE_SetSelLen(PP_SSSMAIN, CP_SSSMAIN(wk_Px), Ct, (PP_SSSMAIN.SelValid And Not CP_SSSMAIN(wk_Px).FixedFormat))
      PP_SSSMAIN.MaskMode = False
      Call AE_SetInitValStatus(PP_SSSMAIN, CP_SSSMAIN(wk_Px))
      CP_SSSMAIN(wk_Px).StatusC = Cn_Status1
      Ct.ForeColor = AE_Color(Cn_Status1)
      Select Case CP_SSSMAIN(wk_Px).TypeA
         Case Cn_NormalOrV, Cn_InputOnly
            Ct.BackColor = PP_SSSMAIN.BrightOnOff
      End Select
   ElseIf pm_KeyCode = vbKeyInsert Then
      If CP_SSSMAIN(wk_Px).TypeA = Cn_InputOnly Or CP_SSSMAIN(wk_Px).TypeA = Cn_ListBox Or CP_SSSMAIN(wk_Px).KeyInOkClass = Asc("1") Then Exit Function
      wk_Ln = Len(wk_Txt$)
      PP_SSSMAIN.Override = PP_SSSMAIN.Override Xor 1
      If CP_SSSMAIN(wk_Px).Alignment <> 1 And PP_SSSMAIN.Override = 1 And wk_SS > 0 And wk_SS = wk_Ln Then Ct.SelStart = wk_Ln - 1
      Ct.SelLength = PP_SSSMAIN.Override
   ElseIf pm_KeyCode >= vbKeyF1 And pm_KeyCode <= vbKeyF12 Then
      wk_Int = AE_FuncKey_SSSMAIN(pm_KeyCode, pm_Shift)
      If pm_KeyCode <> vbKeyF4 Or (pm_Shift And 6) <> 4 Then pm_KeyCode = 0
   ElseIf CP_SSSMAIN(wk_Px).TypeA = Cn_InputOnly Then
         pm_KeyCode = 0
   End If
   Exit Function
CheckOrSkip:
   If CP_SSSMAIN(wk_Px).StatusC = Cn_Status1 Then
      AE_KeyDown_SSSMAIN = True
   Else
      wk_Bool = AE_CursorSkip_SSSMAIN()
   End If
End Function

Function AE_Last_SSSMAIN(ByVal pm_Check As Integer) As Integer 'Generated.
   If pm_Check Then
      If AE_MsgLibrary(PP_SSSMAIN, "LastC") Then AE_Last_SSSMAIN = Cn_CuCurrent: Exit Function
   End If
   Call AE_InitValAll_SSSMAIN
   PP_SSSMAIN.LastDe = SSSMAIN_Last()
   If PP_SSSMAIN.LastDe = 0 Then
      If Not AE_MsgLibrary(PP_SSSMAIN, "LastCm") Then
         Call AE_InitValAll_SSSMAIN
      Else
         Call AE_ScrlMax(PP_SSSMAIN)
         Call AE_RecalcAll_SSSMAIN
         Call AE_Scrl_SSSMAIN(PP_SSSMAIN.DspTopDe, True)
      End If
   Else
      Call AE_ScrlMax(PP_SSSMAIN)
      Call AE_RecalcAll_SSSMAIN
      Call AE_Scrl_SSSMAIN(PP_SSSMAIN.DspTopDe, True)
   End If
   Call AE_ClearInitValStatus_SSSMAIN
   AE_Last_SSSMAIN = Cn_CuInit
End Function

Sub AE_Later_SSSMAIN() 'Generated.
   Select Case PP_SSSMAIN.ChOprtMode
      Case Cn_Mode1
         If PP_SSSMAIN.Mode <> Cn_Mode1 Then wk_Int = AE_AppendC_SSSMAIN(PP_SSSMAIN.Mode)
      Case Cn_Mode15
         wk_Int = AE_AppendC_SSSMAIN(PP_SSSMAIN.Mode, True)
      Case Cn_Mode16
         Call AE_InitValAll_SSSMAIN
      Case Cn_Mode2
         wk_Int = AE_SelectCm_SSSMAIN(PP_SSSMAIN.Mode, False)
      Case Cn_Mode25
         wk_Int = AE_SelectCm_SSSMAIN(PP_SSSMAIN.Mode, True)
      Case Cn_Mode3
         wk_Int = AE_Indicate_SSSMAIN(PP_SSSMAIN.Mode, False)
      Case Cn_Mode4
         wk_Int = AE_UpdateC_SSSMAIN(PP_SSSMAIN.Mode, False)
   End Select
   PP_SSSMAIN.ChOprtMode = 0
End Sub

Sub AE_LockBd_SSSMAIN(ByVal pm_De As Integer, ByVal pm_SetReset As Boolean) 'Generated.
Dim wk_Px As Integer
Dim wk_Px2 As Integer
Dim wk_Tx As Integer
Dim wk_InOutMode As Long
   wk_Px = 31 * pm_De + 38
   wk_Px2 = wk_Px + 31
   Do While wk_Px < wk_Px2
      If pm_SetReset Then
         CP_SSSMAIN(wk_Px).InOutMode = CP_SSSMAIN(wk_Px).InOutMode And &HFF5D
      Else
         wk_InOutMode = (CP_SSSMAIN(wk_Px).InOutMode \ 256) And &HFF
         CP_SSSMAIN(wk_Px).InOutMode = wk_InOutMode * 256 + wk_InOutMode
      End If
      wk_Tx = AE_Tx(PP_SSSMAIN, wk_Px)
      If wk_Tx >= 0 Then
         If CP_SSSMAIN(wk_Px).TypeA = Cn_OutputOnly Then
         ElseIf CP_SSSMAIN(wk_Px).TypeA = Cn_OptionButtonH Or CP_SSSMAIN(wk_Px).TypeA = Cn_OptionButtonC Or CP_SSSMAIN(wk_Px).TypeA = Cn_CheckBox Then
            AE_Controls(PP_SSSMAIN.CtB + wk_Tx).Enabled = (AE_GetInOutMode(CP_SSSMAIN(wk_Px).InOutMode, PP_SSSMAIN.Mode) >= Cn_InOutMode2)
         Else
            AE_Controls(PP_SSSMAIN.CtB + wk_Tx).TabStop = (AE_GetInOutMode(CP_SSSMAIN(wk_Px).InOutMode, PP_SSSMAIN.Mode) >= Cn_InOutMode2) And (AE_IsEnable(CP_SSSMAIN(wk_Px).BlockNo, PP_SSSMAIN.ActiveBlockNo))
         End If
      End If
      wk_Px = wk_Px + 1
   Loop
End Sub

Static Sub AE_ModeChange_SSSMAIN(ByVal pm_NewMode As Integer) 'Generated.
   Select Case pm_NewMode
      Case Cn_Mode1
         If PP_SSSMAIN.Mode <> Cn_Mode1 Then
            PP_SSSMAIN.Mode = Cn_Mode1: AE_ModeBar(PP_SSSMAIN.ScX) = "追加"
            Call AE_TabStop_SSSMAIN(0, 24, False)
            AE_CursorRest(PP_SSSMAIN.ScX).TabStop = False
         End If
      Case Cn_Mode2
         If PP_SSSMAIN.Mode <> Cn_Mode2 Then
            PP_SSSMAIN.Mode = Cn_Mode2: AE_ModeBar(PP_SSSMAIN.ScX) = "選択"
            Call AE_TabStop_SSSMAIN(0, 24, False)
            AE_CursorRest(PP_SSSMAIN.ScX).TabStop = False
         End If
      Case Cn_Mode3
         If PP_SSSMAIN.Mode <> Cn_Mode3 Then
            PP_SSSMAIN.Mode = Cn_Mode3: AE_ModeBar(PP_SSSMAIN.ScX) = "表示"
            Call AE_TabStop_SSSMAIN(0, 24, False)
            AE_CursorRest(PP_SSSMAIN.ScX).TabStop = True
         End If
      Case Cn_Mode4
         If PP_SSSMAIN.Mode <> Cn_Mode4 Then
            PP_SSSMAIN.Mode = Cn_Mode4: AE_ModeBar(PP_SSSMAIN.ScX) = "更新"
            Call AE_TabStop_SSSMAIN(0, 24, False)
            AE_CursorRest(PP_SSSMAIN.ScX).TabStop = False
         End If
      Case Else
         Call AE_SystemError("AE_ModeChange のパラメタに", 562)
   End Select
End Sub

Function AE_NextCm_SSSMAIN(ByVal pm_Check As Integer) As Integer 'Generated.
   If pm_Check Then
      If AE_MsgLibrary(PP_SSSMAIN, "NextC") Then AE_NextCm_SSSMAIN = Cn_CuCurrent: Exit Function
   End If
   Call AE_InitValAll_SSSMAIN
   PP_SSSMAIN.LastDe = SSSMAIN_Next()
   If PP_SSSMAIN.LastDe = 0 Then
      If Not AE_MsgLibrary(PP_SSSMAIN, "NextCm") Then
         If AE_Last_SSSMAIN(False) = Cn_CuInit Then AE_NextCm_SSSMAIN = Cn_CuInit: Exit Function
      Else
         Call AE_ScrlMax(PP_SSSMAIN)
         Call AE_RecalcAll_SSSMAIN
         Call AE_Scrl_SSSMAIN(PP_SSSMAIN.DspTopDe, True)
      End If
   Else
      Call AE_ScrlMax(PP_SSSMAIN)
      Call AE_RecalcAll_SSSMAIN
      Call AE_Scrl_SSSMAIN(PP_SSSMAIN.DspTopDe, True)
   End If
   Call AE_ClearInitValStatus_SSSMAIN
   AE_NextCm_SSSMAIN = Cn_CuInit
End Function

Function AE_NullCnv1_SSSMAIN(ByVal VALU) 'Generated.
   If IsEmpty(VALU) Then
       AE_NullCnv1_SSSMAIN = 0@
   ElseIf IsNull(VALU) Then
       AE_NullCnv1_SSSMAIN = 0@
   Else
       AE_NullCnv1_SSSMAIN = VALU
   End If
End Function

Function AE_NullCnv2_SSSMAIN(ByVal VALU) 'Generated.
   If IsEmpty(VALU) Then
       AE_NullCnv2_SSSMAIN = ""
   ElseIf IsNull(VALU) Then
       AE_NullCnv2_SSSMAIN = ""
   Else
       AE_NullCnv2_SSSMAIN = VALU
   End If
End Function

Sub AE_RecalcAll_SSSMAIN() 'Generated.
   PP_SSSMAIN.DerivedOrigin = ""
   Call AE_RecalcHd_SSSMAIN
   Call AE_RecalcBd_SSSMAIN
   Call AE_RecalcTl_SSSMAIN
End Sub

Sub AE_RecalcBd_SSSMAIN() 'Generated.
Dim wk_SaveDe As Integer
Dim wk_SaveDe2 As Integer
Dim wk_SaveMask As Boolean
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
      PP_SSSMAIN.ErrorC = 0
      PP_SSSMAIN.SuppressMultiTlDerived = True
      wk_SaveDe = PP_SSSMAIN.De: wk_SaveDe2 = PP_SSSMAIN.De2
      PP_SSSMAIN.De = 0: PP_SSSMAIN.De2 = 0
      Do While PP_SSSMAIN.De < PP_SSSMAIN.LastDe And PP_SSSMAIN.De <= 0
         If PP_SSSMAIN.De + 1 = PP_SSSMAIN.LastDe Or PP_SSSMAIN.De = 0 Then PP_SSSMAIN.SuppressMultiTlDerived = False
         Call AE_RecalcBdDe_SSSMAIN '(PP_SSSMAIN.De)
         PP_SSSMAIN.De = PP_SSSMAIN.De + 1: PP_SSSMAIN.De2 = PP_SSSMAIN.De
      Loop
      PP_SSSMAIN.SuppressMultiTlDerived = False
      PP_SSSMAIN.De = wk_SaveDe: PP_SSSMAIN.De2 = wk_SaveDe2
   PP_SSSMAIN.MaskMode = wk_SaveMask
   If PP_SSSMAIN.ErrorC <> 0 Then
      wk_Bool = AE_MsgLibrary(PP_SSSMAIN, "Recalc")
   End If
End Sub

Sub AE_RecalcBdDe_SSSMAIN() 'Generated.
Dim wk_PxBase As Integer
   wk_PxBase = 31 * PP_SSSMAIN.De
   PP_SSSMAIN.RecalcMode = True
   If PP_SSSMAIN.LastDe > 0 Then
      If AE_GetInOutMode(CP_SSSMAIN(38 + wk_PxBase).InOutMode, Cn_Mode1) >= Cn_InOutMode2 Or AE_GetInOutMode(CP_SSSMAIN(38 + wk_PxBase).InOutMode, Cn_Mode4) >= Cn_InOutMode2 Then
         If CP_SSSMAIN(38 + wk_PxBase).StatusC >= Cn_Status2 Then Call AE_Check_SSSMAIN_HINCD(AE_Val2(CP_SSSMAIN(38 + wk_PxBase)), CP_SSSMAIN(38 + wk_PxBase).StatusF, False, False)
      End If
      If AE_GetInOutMode(CP_SSSMAIN(39 + wk_PxBase).InOutMode, Cn_Mode1) >= Cn_InOutMode2 Or AE_GetInOutMode(CP_SSSMAIN(39 + wk_PxBase).InOutMode, Cn_Mode4) >= Cn_InOutMode2 Then
         If CP_SSSMAIN(39 + wk_PxBase).StatusC >= Cn_Status2 Then Call AE_Check_SSSMAIN_SBNNO(AE_Val2(CP_SSSMAIN(39 + wk_PxBase)), CP_SSSMAIN(39 + wk_PxBase).StatusF, False, False)
      End If
      If AE_GetInOutMode(CP_SSSMAIN(40 + wk_PxBase).InOutMode, Cn_Mode1) >= Cn_InOutMode2 Or AE_GetInOutMode(CP_SSSMAIN(40 + wk_PxBase).InOutMode, Cn_Mode4) >= Cn_InOutMode2 Then
         If CP_SSSMAIN(40 + wk_PxBase).StatusC >= Cn_Status2 Then Call AE_Check_SSSMAIN_HINNMA(AE_Val2(CP_SSSMAIN(40 + wk_PxBase)), CP_SSSMAIN(40 + wk_PxBase).StatusF, False, False)
      End If
      If AE_GetInOutMode(CP_SSSMAIN(41 + wk_PxBase).InOutMode, Cn_Mode1) >= Cn_InOutMode2 Or AE_GetInOutMode(CP_SSSMAIN(41 + wk_PxBase).InOutMode, Cn_Mode4) >= Cn_InOutMode2 Then
         If CP_SSSMAIN(41 + wk_PxBase).StatusC >= Cn_Status2 Then Call AE_Check_SSSMAIN_HINNMB(AE_Val2(CP_SSSMAIN(41 + wk_PxBase)), CP_SSSMAIN(41 + wk_PxBase).StatusF, False, False)
      End If
      If AE_GetInOutMode(CP_SSSMAIN(42 + wk_PxBase).InOutMode, Cn_Mode1) >= Cn_InOutMode2 Or AE_GetInOutMode(CP_SSSMAIN(42 + wk_PxBase).InOutMode, Cn_Mode4) >= Cn_InOutMode2 Then
         If CP_SSSMAIN(42 + wk_PxBase).StatusC >= Cn_Status2 Then Call AE_Check_SSSMAIN_URISU(AE_Val2(CP_SSSMAIN(42 + wk_PxBase)), CP_SSSMAIN(42 + wk_PxBase).StatusF, False, False)
      End If
      If AE_GetInOutMode(CP_SSSMAIN(43 + wk_PxBase).InOutMode, Cn_Mode1) >= Cn_InOutMode2 Or AE_GetInOutMode(CP_SSSMAIN(43 + wk_PxBase).InOutMode, Cn_Mode4) >= Cn_InOutMode2 Then
         If CP_SSSMAIN(43 + wk_PxBase).StatusC >= Cn_Status2 Then Call AE_Check_SSSMAIN_UNTNM(AE_Val2(CP_SSSMAIN(43 + wk_PxBase)), CP_SSSMAIN(43 + wk_PxBase).StatusF, False, False)
      End If
   End If
   If Left$(PP_SSSMAIN.DerivedOrigin, 1) <> "H" Then
      PP_SSSMAIN.DerivedOrigin = ""
   End If
   Call AE_RecalcBdDeSub_SSSMAIN
   PP_SSSMAIN.RecalcMode = False
End Sub

Sub AE_RecalcBdDeSub_SSSMAIN() 'Generated.
   Call AE_Derived_SSSMAIN_BV_UDNDKBID(PP_SSSMAIN, PP_SSSMAIN.De2)
   Call AE_Derived_SSSMAIN_BV_URIKN(CP_SSSMAIN(58 + 31 * PP_SSSMAIN.De))
   PP_SSSMAIN.DerivedFrom = "BV_URIKN"
   Call AE_Derived_SSSMAIN_BV_UZEKN(PP_SSSMAIN.De2, CP_SSSMAIN(59 + 31 * PP_SSSMAIN.De))
   Call AE_Derived_SSSMAIN_BV_FURIKN(CP_SSSMAIN(64 + 31 * PP_SSSMAIN.De))
   Call AE_Derived_SSSMAIN_BV_GNKKN
   Call AE_Derived_SSSMAIN_BV_SIKKN(CP_SSSMAIN(68 + 31 * PP_SSSMAIN.De))
   PP_SSSMAIN.DerivedFrom = "BV_UZEKN"
   Call AE_Derived_SSSMAIN_BV_ZKMUZEKN(PP_SSSMAIN.De2)
   PP_SSSMAIN.DerivedFrom = "BV_FURIKN"
   If Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_TV_SBAFRUKN(PP_SSSMAIN, CP_SSSMAIN(73))
   PP_SSSMAIN.DerivedFrom = "BV_URIKN"
   Call AE_Derived_SSSMAIN_BV_ZKMURIKN
   Call AE_Derived_SSSMAIN_BV_ZNKURIKN
   If Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_TV_SBAURIKN(PP_SSSMAIN, CP_SSSMAIN(70))
   PP_SSSMAIN.DerivedFrom = "BV_ZNKURIKN"
   If Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_TV_SBAUZEKN(PP_SSSMAIN)
   If Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_TV_SBAUZKKN(PP_SSSMAIN)
End Sub

Sub AE_RecalcHd_SSSMAIN() 'Generated.
   PP_SSSMAIN.RecalcMode = True
   If AE_GetInOutMode(CP_SSSMAIN(0).InOutMode, Cn_Mode1) >= Cn_InOutMode2 Or AE_GetInOutMode(CP_SSSMAIN(0).InOutMode, Cn_Mode4) >= Cn_InOutMode2 Then
      If CP_SSSMAIN(0).StatusC >= Cn_Status2 Then Call AE_Check_SSSMAIN_SRANO(AE_Val2(CP_SSSMAIN(0)), CP_SSSMAIN(0).StatusF, False, False)
   End If
   If AE_GetInOutMode(CP_SSSMAIN(1).InOutMode, Cn_Mode1) >= Cn_InOutMode2 Or AE_GetInOutMode(CP_SSSMAIN(1).InOutMode, Cn_Mode4) >= Cn_InOutMode2 Then
      If CP_SSSMAIN(1).StatusC >= Cn_Status2 Then Call AE_Check_SSSMAIN_UDNNO(AE_Val2(CP_SSSMAIN(1)), CP_SSSMAIN(1).StatusF, False, False)
   End If
   If AE_GetInOutMode(CP_SSSMAIN(2).InOutMode, Cn_Mode1) >= Cn_InOutMode2 Or AE_GetInOutMode(CP_SSSMAIN(2).InOutMode, Cn_Mode4) >= Cn_InOutMode2 Then
      If CP_SSSMAIN(2).StatusC >= Cn_Status2 Then Call AE_Check_SSSMAIN_JDNNO(AE_Val2(CP_SSSMAIN(2)), CP_SSSMAIN(2).StatusF, False, False)
   End If
   If AE_GetInOutMode(CP_SSSMAIN(3).InOutMode, Cn_Mode1) >= Cn_InOutMode2 Or AE_GetInOutMode(CP_SSSMAIN(3).InOutMode, Cn_Mode4) >= Cn_InOutMode2 Then
      If CP_SSSMAIN(3).StatusC >= Cn_Status2 Then Call AE_Check_SSSMAIN_UDNDT(AE_Val2(CP_SSSMAIN(3)), CP_SSSMAIN(3).StatusF, False, False)
   End If
   If AE_GetInOutMode(CP_SSSMAIN(4).InOutMode, Cn_Mode1) >= Cn_InOutMode2 Or AE_GetInOutMode(CP_SSSMAIN(4).InOutMode, Cn_Mode4) >= Cn_InOutMode2 Then
      If CP_SSSMAIN(4).StatusC >= Cn_Status2 Then Call AE_Check_SSSMAIN_HENRSNCD(AE_Val2(CP_SSSMAIN(4)), CP_SSSMAIN(4).StatusF, False, False)
   End If
   If AE_GetInOutMode(CP_SSSMAIN(5).InOutMode, Cn_Mode1) >= Cn_InOutMode2 Or AE_GetInOutMode(CP_SSSMAIN(5).InOutMode, Cn_Mode4) >= Cn_InOutMode2 Then
      If CP_SSSMAIN(5).StatusC >= Cn_Status2 Then Call AE_Check_SSSMAIN_HENRSNNM(AE_Val2(CP_SSSMAIN(5)), CP_SSSMAIN(5).StatusF, False, False)
   End If
   If AE_GetInOutMode(CP_SSSMAIN(6).InOutMode, Cn_Mode1) >= Cn_InOutMode2 Or AE_GetInOutMode(CP_SSSMAIN(6).InOutMode, Cn_Mode4) >= Cn_InOutMode2 Then
      If CP_SSSMAIN(6).StatusC >= Cn_Status2 Then Call AE_Check_SSSMAIN_HENSTTCD(AE_Val2(CP_SSSMAIN(6)), CP_SSSMAIN(6).StatusF, False, False)
   End If
   If AE_GetInOutMode(CP_SSSMAIN(7).InOutMode, Cn_Mode1) >= Cn_InOutMode2 Or AE_GetInOutMode(CP_SSSMAIN(7).InOutMode, Cn_Mode4) >= Cn_InOutMode2 Then
      If CP_SSSMAIN(7).StatusC >= Cn_Status2 Then Call AE_Check_SSSMAIN_HENSTTNM(AE_Val2(CP_SSSMAIN(7)), CP_SSSMAIN(7).StatusF, False, False)
   End If
   If AE_GetInOutMode(CP_SSSMAIN(8).InOutMode, Cn_Mode1) >= Cn_InOutMode2 Or AE_GetInOutMode(CP_SSSMAIN(8).InOutMode, Cn_Mode4) >= Cn_InOutMode2 Then
      If CP_SSSMAIN(8).StatusC >= Cn_Status2 Then Call AE_Check_SSSMAIN_OUTSOUCD(AE_Val2(CP_SSSMAIN(8)), CP_SSSMAIN(8).StatusF, False, False)
   End If
   If AE_GetInOutMode(CP_SSSMAIN(9).InOutMode, Cn_Mode1) >= Cn_InOutMode2 Or AE_GetInOutMode(CP_SSSMAIN(9).InOutMode, Cn_Mode4) >= Cn_InOutMode2 Then
      If CP_SSSMAIN(9).StatusC >= Cn_Status2 Then Call AE_Check_SSSMAIN_OUTSOUNM(AE_Val2(CP_SSSMAIN(9)), CP_SSSMAIN(9).StatusF, False, False)
   End If
   If AE_GetInOutMode(CP_SSSMAIN(10).InOutMode, Cn_Mode1) >= Cn_InOutMode2 Or AE_GetInOutMode(CP_SSSMAIN(10).InOutMode, Cn_Mode4) >= Cn_InOutMode2 Then
      If CP_SSSMAIN(10).StatusC >= Cn_Status2 Then Call AE_Check_SSSMAIN_SOUCD(AE_Val2(CP_SSSMAIN(10)), CP_SSSMAIN(10).StatusF, False, False)
   End If
   If AE_GetInOutMode(CP_SSSMAIN(11).InOutMode, Cn_Mode1) >= Cn_InOutMode2 Or AE_GetInOutMode(CP_SSSMAIN(11).InOutMode, Cn_Mode4) >= Cn_InOutMode2 Then
      If CP_SSSMAIN(11).StatusC >= Cn_Status2 Then Call AE_Check_SSSMAIN_SOUNM(AE_Val2(CP_SSSMAIN(11)), CP_SSSMAIN(11).StatusF, False, False)
   End If
   If AE_GetInOutMode(CP_SSSMAIN(12).InOutMode, Cn_Mode1) >= Cn_InOutMode2 Or AE_GetInOutMode(CP_SSSMAIN(12).InOutMode, Cn_Mode4) >= Cn_InOutMode2 Then
      If CP_SSSMAIN(12).StatusC >= Cn_Status2 Then Call AE_Check_SSSMAIN_JDNDT(AE_Val2(CP_SSSMAIN(12)), CP_SSSMAIN(12).StatusF, False, False)
   End If
   If AE_GetInOutMode(CP_SSSMAIN(13).InOutMode, Cn_Mode1) >= Cn_InOutMode2 Or AE_GetInOutMode(CP_SSSMAIN(13).InOutMode, Cn_Mode4) >= Cn_InOutMode2 Then
      If CP_SSSMAIN(13).StatusC >= Cn_Status2 Then Call AE_Check_SSSMAIN_ODNDT(AE_Val2(CP_SSSMAIN(13)), CP_SSSMAIN(13).StatusF, False, False)
   End If
   If AE_GetInOutMode(CP_SSSMAIN(14).InOutMode, Cn_Mode1) >= Cn_InOutMode2 Or AE_GetInOutMode(CP_SSSMAIN(14).InOutMode, Cn_Mode4) >= Cn_InOutMode2 Then
      If CP_SSSMAIN(14).StatusC >= Cn_Status2 Then Call AE_Check_SSSMAIN_TOKRN(AE_Val2(CP_SSSMAIN(14)), CP_SSSMAIN(14).StatusF, False, False)
   End If
   If AE_GetInOutMode(CP_SSSMAIN(15).InOutMode, Cn_Mode1) >= Cn_InOutMode2 Or AE_GetInOutMode(CP_SSSMAIN(15).InOutMode, Cn_Mode4) >= Cn_InOutMode2 Then
      If CP_SSSMAIN(15).StatusC >= Cn_Status2 Then Call AE_Check_SSSMAIN_NHSRN(AE_Val2(CP_SSSMAIN(15)), CP_SSSMAIN(15).StatusF, False, False)
   End If
   If AE_GetInOutMode(CP_SSSMAIN(16).InOutMode, Cn_Mode1) >= Cn_InOutMode2 Or AE_GetInOutMode(CP_SSSMAIN(16).InOutMode, Cn_Mode4) >= Cn_InOutMode2 Then
      If CP_SSSMAIN(16).StatusC >= Cn_Status2 Then Call AE_Check_SSSMAIN_OPEID(AE_Val2(CP_SSSMAIN(16)), CP_SSSMAIN(16).StatusF, False, False)
   End If
   If AE_GetInOutMode(CP_SSSMAIN(17).InOutMode, Cn_Mode1) >= Cn_InOutMode2 Or AE_GetInOutMode(CP_SSSMAIN(17).InOutMode, Cn_Mode4) >= Cn_InOutMode2 Then
      If CP_SSSMAIN(17).StatusC >= Cn_Status2 Then Call AE_Check_SSSMAIN_OPENM(AE_Val2(CP_SSSMAIN(17)), CP_SSSMAIN(17).StatusF, False, False)
   End If
   PP_SSSMAIN.DerivedFrom = "(Recalc)"
   If Left$(PP_SSSMAIN.DerivedOrigin, 1) <> "H" Then
      PP_SSSMAIN.DerivedOrigin = ""
   End If
   Call AE_RecalcHdSub_SSSMAIN
   PP_SSSMAIN.RecalcMode = False
End Sub

Sub AE_RecalcHdSub_SSSMAIN() 'Generated.
   Call AE_Derived_SSSMAIN_HV_ENTDT
   If Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_TV_SBAUZEKN(PP_SSSMAIN)
   If Not PP_SSSMAIN.SuppressMultiTlDerived Then Call AE_Derived_SSSMAIN_TV_SBAUZKKN(PP_SSSMAIN)
End Sub

Sub AE_RecalcTl_SSSMAIN() 'Generated.
   PP_SSSMAIN.RecalcMode = True
   If AE_GetInOutMode(CP_SSSMAIN(69).InOutMode, Cn_Mode1) >= Cn_InOutMode2 Or AE_GetInOutMode(CP_SSSMAIN(69).InOutMode, Cn_Mode4) >= Cn_InOutMode2 Then
      If CP_SSSMAIN(69).StatusC >= Cn_Status2 Then Call AE_Check_SSSMAIN_UDNCM(AE_Val2(CP_SSSMAIN(69)), CP_SSSMAIN(69).StatusF, False, False)
   End If
   PP_SSSMAIN.RecalcMode = False
End Sub

Sub AE_Scrl_SSSMAIN(ByVal pm_DeNo As Integer, ByVal pm_SetFocusOk As Integer) 'Generated.
Dim wk_Displacement As Integer
Dim wk_ExTopDe As Integer
Dim wk_ExTx As Integer
Dim wk_NewTx As Integer
Dim wk_NewTx2 As Integer
Dim wk_ww As Integer
Dim wk_De As Integer
Dim wk_LastDe As Integer
Dim it_InOutMode As Integer
Dim wk_SaveMask As Boolean
Dim wk_NewPxBase As Integer
Dim wk_ExPxBase As Integer
Dim wk_TxBase As Integer
Dim wk_OutOfDe As Boolean
   If pm_DeNo = PP_SSSMAIN.TopDe Then Exit Sub
   wk_ExTopDe = PP_SSSMAIN.TopDe
   wk_ExTx = PP_SSSMAIN.Tx
   wk_Displacement = AE_ScrlDisp(PP_SSSMAIN, pm_DeNo)
   PP_SSSMAIN.TopDe = PP_SSSMAIN.TopDe + wk_Displacement
   If PP_SSSMAIN.TopDe = wk_ExTopDe Then
      Exit Sub
   Else
      AE_ScrlBar(PP_SSSMAIN.ScX) = PP_SSSMAIN.TopDe
   End If
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   wk_De = 0
   Do While wk_De <= PP_SSSMAIN.MaxDspC
      wk_NewPxBase = 38 + 31 * (wk_De + PP_SSSMAIN.TopDe): wk_OutOfDe = False
      If wk_NewPxBase >= PP_SSSMAIN.EBodyPx Then wk_NewPxBase = 38 + 31 * (PP_SSSMAIN.MaxDe): wk_OutOfDe = True
      wk_ExPxBase = 38 + 31 * (wk_De + wk_ExTopDe)
      If wk_ExPxBase >= PP_SSSMAIN.EBodyPx Then wk_ExPxBase = 38 + 31 * (PP_SSSMAIN.MaxDe)
      wk_TxBase = 18 + 6 * wk_De
      wk_ww = 0
      Do While wk_ww < 6
         PP_SSSMAIN.MaskFurigana = True
         If CP_SSSMAIN(wk_NewPxBase + wk_ww).TypeA = Cn_CheckBox Then
            If Trim$(CP_SSSMAIN(wk_NewPxBase + wk_ww).TpStr) <> "1" Or wk_OutOfDe Then
                AE_Controls(PP_SSSMAIN.CtB + wk_TxBase + wk_ww) = "0"
            Else
                AE_Controls(PP_SSSMAIN.CtB + wk_TxBase + wk_ww) = "1"
            End If
         ElseIf wk_OutOfDe Then
             AE_Controls(PP_SSSMAIN.CtB + wk_TxBase + wk_ww) = AE_Format$(CP_SSSMAIN(wk_NewPxBase + wk_ww), Null, 0, True)
         Else
             AE_Controls(PP_SSSMAIN.CtB + wk_TxBase + wk_ww) = CP_SSSMAIN(wk_NewPxBase + wk_ww).TpStr
         End If
         PP_SSSMAIN.MaskFurigana = False
         Call AE_ColorSub2(PP_SSSMAIN, CP_SSSMAIN(wk_NewPxBase + wk_ww), CL_SSSMAIN(wk_NewPxBase + wk_ww), wk_TxBase + wk_ww)
         it_InOutMode = AE_GetInOutMode(CP_SSSMAIN(wk_NewPxBase + wk_ww).InOutMode, PP_SSSMAIN.Mode)
         If it_InOutMode <> AE_GetInOutMode(CP_SSSMAIN(wk_ExPxBase + wk_ww).InOutMode, PP_SSSMAIN.Mode) Or (CP_SSSMAIN(wk_NewPxBase + wk_ww).BlockNo) <> (CP_SSSMAIN(wk_ExPxBase + wk_ww).BlockNo) Then
            If CP_SSSMAIN(wk_ExPxBase + wk_ww).TypeA = Cn_OutputOnly Then
            ElseIf CP_SSSMAIN(wk_ExPxBase + wk_ww).TypeA = Cn_OptionButtonH Or CP_SSSMAIN(wk_ExPxBase + wk_ww).TypeA = Cn_OptionButtonC Or CP_SSSMAIN(wk_ExPxBase + wk_ww).TypeA = Cn_CheckBox Then
               AE_Controls(PP_SSSMAIN.CtB + wk_TxBase + wk_ww).Enabled = (it_InOutMode >= Cn_InOutMode2)
            Else
               AE_Controls(PP_SSSMAIN.CtB + wk_TxBase + wk_ww).TabStop = (it_InOutMode >= Cn_InOutMode2) And (AE_IsEnable(CP_SSSMAIN(wk_NewPxBase + wk_ww).BlockNo, PP_SSSMAIN.ActiveBlockNo))
            End If
         End If
         wk_ww = wk_ww + 1
      Loop
      wk_De = wk_De + 1
   Loop
   PP_SSSMAIN.MaskMode = wk_SaveMask
   wk_LastDe = PP_SSSMAIN.LastDe
   If PP_SSSMAIN.LastDe > wk_LastDe And PP_SSSMAIN.Mode <> 1 Then
      Call AE_ScrlMax(PP_SSSMAIN)
      Call AE_RecalcAll_SSSMAIN
   End If
   If wk_ExTx >= 0 And wk_ExTx < 18 Then Exit Sub
   If wk_ExTx >= PP_SSSMAIN.NrBodyTx Then Exit Sub
   If Not PP_SSSMAIN.UpDownFlag Then PP_SSSMAIN.ScrlFlag = True
   wk_NewTx = wk_ExTx - 6 * (PP_SSSMAIN.TopDe - wk_ExTopDe)
   If wk_ExTx < 0 Then
   ElseIf wk_NewTx < 18 Then
      wk_NewTx = 18 + (wk_ExTx - 18) Mod 6
   ElseIf wk_NewTx >= PP_SSSMAIN.NrBodyTx Then
      wk_NewTx = 18 + 6 * PP_SSSMAIN.MaxDspC + (wk_ExTx - 18) Mod 6
   End If
   Call AE_ScrlMax(PP_SSSMAIN)
   If wk_Displacement > 0 Then
      If PP_SSSMAIN.TopDe < 0 And PP_SSSMAIN.TopDe >= PP_SSSMAIN.MaxDe Then
      ElseIf wk_ExTx >= 0 Then
         wk_NewTx2 = wk_NewTx
         PP_SSSMAIN.CursorDirection = Cn_Direction3
         Do While wk_NewTx2 < PP_SSSMAIN.NrBodyTx
            If AE_CursorCheck_SSSMAIN(CP_SSSMAIN(AE_Px(PP_SSSMAIN, wk_NewTx2)).TypeA, wk_NewTx2) Then
               If pm_SetFocusOk Then Call AE_CursorMove_SSSMAIN(wk_NewTx2)
               Exit Sub
            End If
            wk_NewTx2 = wk_NewTx2 + 6
         Loop
         PP_SSSMAIN.CursorDirection = Cn_Direction1
         Do While wk_NewTx < 25
            If AE_CursorCheck_SSSMAIN(CP_SSSMAIN(AE_Px(PP_SSSMAIN, wk_NewTx)).TypeA, wk_NewTx) Then
               If pm_SetFocusOk Then Call AE_CursorMove_SSSMAIN(wk_NewTx)
               Exit Sub
            End If
            wk_NewTx = wk_NewTx + 1
         Loop
      End If
      wk_NewTx = 18
      PP_SSSMAIN.CursorDirection = Cn_Direction1
      Do While wk_NewTx < 25 And PP_SSSMAIN.TopDe >= 0 And PP_SSSMAIN.TopDe < PP_SSSMAIN.MaxDe
         If AE_CursorCheck_SSSMAIN(CP_SSSMAIN(AE_Px(PP_SSSMAIN, wk_NewTx)).TypeA, wk_NewTx) Then
            If pm_SetFocusOk Then Call AE_CursorMove_SSSMAIN(wk_NewTx)
            Exit Sub
         End If
         wk_NewTx = wk_NewTx + 1
      Loop
      If pm_SetFocusOk Then Call AE_CursorRestSub_SSSMAIN(Cn_CursorToRest)
   ElseIf wk_Displacement < 0 Then
      If PP_SSSMAIN.TopDe < 0 And PP_SSSMAIN.TopDe >= PP_SSSMAIN.MaxDe Then
      ElseIf wk_ExTx >= 0 Then
         wk_NewTx2 = wk_NewTx
         Do While wk_NewTx2 >= 6
            If AE_CursorCheck_SSSMAIN(CP_SSSMAIN(AE_Px(PP_SSSMAIN, wk_NewTx2)).TypeA, wk_NewTx2) Then
               If pm_SetFocusOk Then Call AE_CursorMove_SSSMAIN(wk_NewTx2)
               Exit Sub
            End If
            wk_NewTx2 = wk_NewTx2 - 6
         Loop
         PP_SSSMAIN.CursorDirection = Cn_Direction2
         Do While wk_NewTx >= 0
            If AE_CursorCheck_SSSMAIN(CP_SSSMAIN(AE_Px(PP_SSSMAIN, wk_NewTx)).TypeA, wk_NewTx) Then
               If pm_SetFocusOk Then Call AE_CursorMove_SSSMAIN(wk_NewTx)
               Exit Sub
            End If
            wk_NewTx = wk_NewTx - 1
         Loop
      End If
      wk_NewTx = PP_SSSMAIN.NrBodyTx - 1
      PP_SSSMAIN.CursorDirection = Cn_Direction2
      Do While wk_NewTx >= 0 And PP_SSSMAIN.TopDe >= 0 And PP_SSSMAIN.TopDe < PP_SSSMAIN.MaxDe
         If AE_CursorCheck_SSSMAIN(CP_SSSMAIN(AE_Px(PP_SSSMAIN, wk_NewTx)).TypeA, wk_NewTx) Then
            If pm_SetFocusOk Then Call AE_CursorMove_SSSMAIN(wk_NewTx)
            Exit Sub
         End If
         wk_NewTx = wk_NewTx - 1
      Loop
      If pm_SetFocusOk Then Call AE_CursorRestSub_SSSMAIN(Cn_CursorToRest)
   End If
End Sub

Function AE_SelectCm_SSSMAIN(ByVal pm_ExMode As Integer, ByVal pm_Init As Boolean) As Integer 'Generated.
Dim wk_ReturnCd As Integer
   If PP_SSSMAIN.Mode = Cn_Mode2 Then AE_SelectCm_SSSMAIN = Cn_CuCurrent: Exit Function
   If PP_SSSMAIN.InitValStatus <> PP_SSSMAIN.Mode Then
      If PP_SSSMAIN.ChOprtMode = 0 Then
         If AE_MsgLibrary(PP_SSSMAIN, "SelectCm") Then AE_SelectCm_SSSMAIN = Cn_CuCurrent: Exit Function
      End If
   End If
   wk_ReturnCd = SSSMAIN_Select()
   If wk_ReturnCd = 0 Then
      PP_SSSMAIN.NeglectLostFocusCheck = True
      AE_SelectCm_SSSMAIN = Cn_CuCurrent
      PP_SSSMAIN.NeglectLostFocusCheck = False
   ElseIf wk_ReturnCd = 1 Then
      PP_SSSMAIN.ChOprtMode = Cn_Mode2
      Call AE_ModeChange_SSSMAIN(Cn_Mode2)
      Call AE_InitValAll_SSSMAIN
      AE_SelectCm_SSSMAIN = Cn_CuInit
   ElseIf wk_ReturnCd = 2 Then
      AE_SelectCm_SSSMAIN = AE_Indicate_SSSMAIN(pm_ExMode, False)
   ElseIf wk_ReturnCd = 3 Then
      AE_SelectCm_SSSMAIN = AE_Indicate_SSSMAIN(pm_ExMode, False)
   ElseIf wk_ReturnCd = 4 Then
      AE_SelectCm_SSSMAIN = AE_UpdateC_SSSMAIN(pm_ExMode, False)
   ElseIf wk_ReturnCd = 15 Then
      AE_SelectCm_SSSMAIN = AE_AppendC_SSSMAIN(pm_ExMode, True)
   Else
      AE_SelectCm_SSSMAIN = AE_AppendC_SSSMAIN(pm_ExMode)
   End If
   PP_SSSMAIN.ChOprtMode = 0
End Function

Sub AE_SetCheck_SSSMAIN(ByVal CC_NewVal, ByVal pm_Status As Integer, ByVal pm_HandIn As Boolean) 'Generated.
Dim wk_PxBase As Integer
   If PP_SSSMAIN.Tx < 0 Then
   ElseIf PP_SSSMAIN.Tx < 18 Then
      Select Case PP_SSSMAIN.Px
         Case 0
            Call AE_Check_SSSMAIN_SRANO(CC_NewVal, pm_Status, False, pm_HandIn)
            If AE_ErrorToInteger(Ck_Error) = 0 Then
            End If
         Case 1
            Call AE_Check_SSSMAIN_UDNNO(CC_NewVal, pm_Status, False, pm_HandIn)
            If AE_ErrorToInteger(Ck_Error) = 0 Then
            End If
         Case 2
            Call AE_Check_SSSMAIN_JDNNO(CC_NewVal, pm_Status, False, pm_HandIn)
            If AE_ErrorToInteger(Ck_Error) = 0 Then
            End If
         Case 3
            Call AE_Check_SSSMAIN_UDNDT(CC_NewVal, pm_Status, False, pm_HandIn)
            If AE_ErrorToInteger(Ck_Error) = 0 Then
            PP_SSSMAIN.DerivedOrigin = "HD_UDNDT"
            Call AE_Derived_SSSMAIN_HV_ENTDT
            Call AE_Derived_SSSMAIN_TV_SBAUZEKN(PP_SSSMAIN)
            Call AE_Derived_SSSMAIN_TV_SBAUZKKN(PP_SSSMAIN)
            End If
         Case 4
            Call AE_Check_SSSMAIN_HENRSNCD(CC_NewVal, pm_Status, False, pm_HandIn)
            If AE_ErrorToInteger(Ck_Error) = 0 Then
            End If
         Case 5
            Call AE_Check_SSSMAIN_HENRSNNM(CC_NewVal, pm_Status, False, pm_HandIn)
            If AE_ErrorToInteger(Ck_Error) = 0 Then
            End If
         Case 6
            Call AE_Check_SSSMAIN_HENSTTCD(CC_NewVal, pm_Status, False, pm_HandIn)
            If AE_ErrorToInteger(Ck_Error) = 0 Then
            End If
         Case 7
            Call AE_Check_SSSMAIN_HENSTTNM(CC_NewVal, pm_Status, False, pm_HandIn)
            If AE_ErrorToInteger(Ck_Error) = 0 Then
            End If
         Case 8
            Call AE_Check_SSSMAIN_OUTSOUCD(CC_NewVal, pm_Status, False, pm_HandIn)
            If AE_ErrorToInteger(Ck_Error) = 0 Then
            End If
         Case 9
            Call AE_Check_SSSMAIN_OUTSOUNM(CC_NewVal, pm_Status, False, pm_HandIn)
            If AE_ErrorToInteger(Ck_Error) = 0 Then
            End If
         Case 10
            Call AE_Check_SSSMAIN_SOUCD(CC_NewVal, pm_Status, False, pm_HandIn)
            If AE_ErrorToInteger(Ck_Error) = 0 Then
            End If
         Case 11
            Call AE_Check_SSSMAIN_SOUNM(CC_NewVal, pm_Status, False, pm_HandIn)
            If AE_ErrorToInteger(Ck_Error) = 0 Then
            End If
         Case 12
            Call AE_Check_SSSMAIN_JDNDT(CC_NewVal, pm_Status, False, pm_HandIn)
            If AE_ErrorToInteger(Ck_Error) = 0 Then
            End If
         Case 13
            Call AE_Check_SSSMAIN_ODNDT(CC_NewVal, pm_Status, False, pm_HandIn)
            If AE_ErrorToInteger(Ck_Error) = 0 Then
            End If
         Case 14
            Call AE_Check_SSSMAIN_TOKRN(CC_NewVal, pm_Status, False, pm_HandIn)
            If AE_ErrorToInteger(Ck_Error) = 0 Then
            End If
         Case 15
            Call AE_Check_SSSMAIN_NHSRN(CC_NewVal, pm_Status, False, pm_HandIn)
            If AE_ErrorToInteger(Ck_Error) = 0 Then
            End If
         Case 16
            Call AE_Check_SSSMAIN_OPEID(CC_NewVal, pm_Status, False, pm_HandIn)
            If AE_ErrorToInteger(Ck_Error) = 0 Then
            End If
         Case 17
            Call AE_Check_SSSMAIN_OPENM(CC_NewVal, pm_Status, False, pm_HandIn)
            If AE_ErrorToInteger(Ck_Error) = 0 Then
            End If
      End Select
   ElseIf PP_SSSMAIN.Tx < 24 Then
      wk_PxBase = 31 * PP_SSSMAIN.De
      Select Case PP_SSSMAIN.Px
         Case 38 + wk_PxBase
            Call AE_Check_SSSMAIN_HINCD(CC_NewVal, pm_Status, False, pm_HandIn)
            If AE_ErrorToInteger(Ck_Error) = 0 Then
            PP_SSSMAIN.DerivedOrigin = "BD_HINCD"
            Call AE_Derived_SSSMAIN_BV_UDNDKBID(PP_SSSMAIN, PP_SSSMAIN.De2)
            Call AE_Derived_SSSMAIN_BV_UZEKN(PP_SSSMAIN.De2, CP_SSSMAIN(59 + 31 * PP_SSSMAIN.De))
            PP_SSSMAIN.DerivedFrom = "BV_UZEKN"
            Call AE_Derived_SSSMAIN_BV_ZKMUZEKN(PP_SSSMAIN.De2)
            Call AE_Derived_SSSMAIN_TV_SBAUZEKN(PP_SSSMAIN)
            PP_SSSMAIN.DerivedFrom = "BV_ZKMUZEKN"
            Call AE_Derived_SSSMAIN_TV_SBAUZKKN(PP_SSSMAIN)
            End If
         Case 39 + wk_PxBase
            Call AE_Check_SSSMAIN_SBNNO(CC_NewVal, pm_Status, False, pm_HandIn)
            If AE_ErrorToInteger(Ck_Error) = 0 Then
            End If
         Case 40 + wk_PxBase
            Call AE_Check_SSSMAIN_HINNMA(CC_NewVal, pm_Status, False, pm_HandIn)
            If AE_ErrorToInteger(Ck_Error) = 0 Then
            End If
         Case 41 + wk_PxBase
            Call AE_Check_SSSMAIN_HINNMB(CC_NewVal, pm_Status, False, pm_HandIn)
            If AE_ErrorToInteger(Ck_Error) = 0 Then
            End If
         Case 42 + wk_PxBase
            Call AE_Check_SSSMAIN_URISU(CC_NewVal, pm_Status, False, pm_HandIn)
            If AE_ErrorToInteger(Ck_Error) = 0 Then
            PP_SSSMAIN.DerivedOrigin = "BD_URISU"
            Call AE_Derived_SSSMAIN_BV_FURIKN(CP_SSSMAIN(64 + 31 * PP_SSSMAIN.De))
            Call AE_Derived_SSSMAIN_BV_GNKKN
            Call AE_Derived_SSSMAIN_BV_SIKKN(CP_SSSMAIN(68 + 31 * PP_SSSMAIN.De))
            Call AE_Derived_SSSMAIN_BV_URIKN(CP_SSSMAIN(58 + 31 * PP_SSSMAIN.De))
            PP_SSSMAIN.DerivedFrom = "BV_FURIKN"
            Call AE_Derived_SSSMAIN_TV_SBAFRUKN(PP_SSSMAIN, CP_SSSMAIN(73))
            PP_SSSMAIN.DerivedFrom = "BV_URIKN"
            Call AE_Derived_SSSMAIN_BV_UZEKN(PP_SSSMAIN.De2, CP_SSSMAIN(59 + 31 * PP_SSSMAIN.De))
            Call AE_Derived_SSSMAIN_BV_ZKMURIKN
            Call AE_Derived_SSSMAIN_BV_ZNKURIKN
            Call AE_Derived_SSSMAIN_TV_SBAURIKN(PP_SSSMAIN, CP_SSSMAIN(70))
            PP_SSSMAIN.DerivedFrom = "BV_UZEKN"
            Call AE_Derived_SSSMAIN_BV_ZKMUZEKN(PP_SSSMAIN.De2)
            PP_SSSMAIN.DerivedFrom = "BV_ZNKURIKN"
            Call AE_Derived_SSSMAIN_TV_SBAUZEKN(PP_SSSMAIN)
            PP_SSSMAIN.DerivedFrom = "BV_ZKMUZEKN"
            Call AE_Derived_SSSMAIN_TV_SBAUZKKN(PP_SSSMAIN)
            End If
         Case 43 + wk_PxBase
            Call AE_Check_SSSMAIN_UNTNM(CC_NewVal, pm_Status, False, pm_HandIn)
            If AE_ErrorToInteger(Ck_Error) = 0 Then
            End If
      End Select
   ElseIf PP_SSSMAIN.Tx < 25 Then
      Select Case PP_SSSMAIN.Px
         Case 69
            Call AE_Check_SSSMAIN_UDNCM(CC_NewVal, pm_Status, False, pm_HandIn)
            If AE_ErrorToInteger(Ck_Error) = 0 Then
            End If
      End Select
   End If
End Sub

Sub AE_Slist_SSSMAIN() 'Generated.
Dim wk_Slisted As Variant
Dim wk_PxBase As Integer
Dim wk_TxBase As Integer
   wk_PxBase = 31 * PP_SSSMAIN.De
   wk_TxBase = 6 * (PP_SSSMAIN.De - PP_SSSMAIN.TopDe)
   If False Then
   ElseIf PP_SSSMAIN.Tx = 1 Then
      PP_SSSMAIN.SlistCom = Null
      PP_SSSMAIN.SlistPx = PP_SSSMAIN.Px
      PP_SSSMAIN.NeglectLostFocusCheck = True
      wk_Slisted = UDNNO_Slist(PP_SSSMAIN, AE_NullCnv2_SSSMAIN(CP_SSSMAIN(1).CuVal))
      PP_SSSMAIN.NeglectLostFocusCheck = False
      If IsEmpty(wk_Slisted) Then wk_Slisted = Null
      PP_SSSMAIN.CursorDirection = Cn_Direction1 '1: Next
      If Not IsNull(wk_Slisted) Then
         PP_SSSMAIN.CursorDest = Cn_Dest9
         PP_SSSMAIN.SlistPx = -1
         PP_SSSMAIN.JustAfterSList = True
         PP_SSSMAIN.SlistCom = Null
         If PP_SSSMAIN.Mode <> Cn_Mode3 Then
            CP_SSSMAIN(1).TpStr = wk_Slisted
            CP_SSSMAIN(1).CIn = Cn_ChrInput
            AE_Controls(PP_SSSMAIN.CtB + 1) = wk_Slisted
            Call AE_Check_SSSMAIN_UDNNO(AE_Val3(CP_SSSMAIN(1), (AE_Controls(PP_SSSMAIN.CtB + 1))), Cn_Status6, True, True)
         End If
      Else
          PP_SSSMAIN.CursorDest = Cn_Dest0
          PP_SSSMAIN.NextTx = PP_SSSMAIN.Tx
      End If
   ElseIf PP_SSSMAIN.Tx = 3 Then
      PP_SSSMAIN.SlistCom = Null
      PP_SSSMAIN.SlistPx = PP_SSSMAIN.Px
      PP_SSSMAIN.NeglectLostFocusCheck = True
      wk_Slisted = UDNDT_Slist(AE_NullCnv2_SSSMAIN(CP_SSSMAIN(3).CuVal), PP_SSSMAIN)
      PP_SSSMAIN.NeglectLostFocusCheck = False
      If IsEmpty(wk_Slisted) Then wk_Slisted = Null
      PP_SSSMAIN.CursorDirection = Cn_Direction1 '1: Next
      If Not IsNull(wk_Slisted) Then
         PP_SSSMAIN.CursorDest = Cn_Dest9
         PP_SSSMAIN.SlistPx = -1
         PP_SSSMAIN.JustAfterSList = True
         PP_SSSMAIN.SlistCom = Null
         If PP_SSSMAIN.Mode <> Cn_Mode3 Then
            CP_SSSMAIN(3).TpStr = wk_Slisted
            CP_SSSMAIN(3).CIn = Cn_ChrInput
            AE_Controls(PP_SSSMAIN.CtB + 3) = wk_Slisted
            Call AE_Check_SSSMAIN_UDNDT(AE_Val3(CP_SSSMAIN(3), (AE_Controls(PP_SSSMAIN.CtB + 3))), Cn_Status6, True, True)
         End If
      Else
          PP_SSSMAIN.CursorDest = Cn_Dest0
          PP_SSSMAIN.NextTx = PP_SSSMAIN.Tx
      End If
   ElseIf PP_SSSMAIN.Tx = 4 Then
      PP_SSSMAIN.SlistCom = Null
      PP_SSSMAIN.SlistPx = PP_SSSMAIN.Px
      PP_SSSMAIN.NeglectLostFocusCheck = True
      wk_Slisted = HENRSNCD_Slist(PP_SSSMAIN)
      PP_SSSMAIN.NeglectLostFocusCheck = False
      If IsEmpty(wk_Slisted) Then wk_Slisted = Null
      PP_SSSMAIN.CursorDirection = Cn_Direction1 '1: Next
      If Not IsNull(wk_Slisted) Then
         PP_SSSMAIN.CursorDest = Cn_Dest9
         PP_SSSMAIN.SlistPx = -1
         PP_SSSMAIN.JustAfterSList = True
         PP_SSSMAIN.SlistCom = Null
         If PP_SSSMAIN.Mode <> Cn_Mode3 Then
            CP_SSSMAIN(4).TpStr = wk_Slisted
            CP_SSSMAIN(4).CIn = Cn_ChrInput
            AE_Controls(PP_SSSMAIN.CtB + 4) = wk_Slisted
            Call AE_Check_SSSMAIN_HENRSNCD(AE_Val3(CP_SSSMAIN(4), (AE_Controls(PP_SSSMAIN.CtB + 4))), Cn_Status6, True, True)
         End If
      Else
          PP_SSSMAIN.CursorDest = Cn_Dest0
          PP_SSSMAIN.NextTx = PP_SSSMAIN.Tx
      End If
   ElseIf PP_SSSMAIN.Tx = 6 Then
      PP_SSSMAIN.SlistCom = Null
      PP_SSSMAIN.SlistPx = PP_SSSMAIN.Px
      PP_SSSMAIN.NeglectLostFocusCheck = True
      wk_Slisted = HENSTTCD_Slist(PP_SSSMAIN)
      PP_SSSMAIN.NeglectLostFocusCheck = False
      If IsEmpty(wk_Slisted) Then wk_Slisted = Null
      PP_SSSMAIN.CursorDirection = Cn_Direction1 '1: Next
      If Not IsNull(wk_Slisted) Then
         PP_SSSMAIN.CursorDest = Cn_Dest9
         PP_SSSMAIN.SlistPx = -1
         PP_SSSMAIN.JustAfterSList = True
         PP_SSSMAIN.SlistCom = Null
         If PP_SSSMAIN.Mode <> Cn_Mode3 Then
            CP_SSSMAIN(6).TpStr = wk_Slisted
            CP_SSSMAIN(6).CIn = Cn_ChrInput
            AE_Controls(PP_SSSMAIN.CtB + 6) = wk_Slisted
            Call AE_Check_SSSMAIN_HENSTTCD(AE_Val3(CP_SSSMAIN(6), (AE_Controls(PP_SSSMAIN.CtB + 6))), Cn_Status6, True, True)
         End If
      Else
          PP_SSSMAIN.CursorDest = Cn_Dest0
          PP_SSSMAIN.NextTx = PP_SSSMAIN.Tx
      End If
   ElseIf PP_SSSMAIN.Tx = 8 Then
      PP_SSSMAIN.SlistCom = Null
      PP_SSSMAIN.SlistPx = PP_SSSMAIN.Px
      PP_SSSMAIN.NeglectLostFocusCheck = True
      wk_Slisted = OUTSOUCD_Slist(PP_SSSMAIN, AE_NullCnv2_SSSMAIN(CP_SSSMAIN(8).CuVal))
      PP_SSSMAIN.NeglectLostFocusCheck = False
      If IsEmpty(wk_Slisted) Then wk_Slisted = Null
      PP_SSSMAIN.CursorDirection = Cn_Direction1 '1: Next
      If Not IsNull(wk_Slisted) Then
         PP_SSSMAIN.CursorDest = Cn_Dest9
         PP_SSSMAIN.SlistPx = -1
         PP_SSSMAIN.JustAfterSList = True
         PP_SSSMAIN.SlistCom = Null
         If PP_SSSMAIN.Mode <> Cn_Mode3 Then
            CP_SSSMAIN(8).TpStr = wk_Slisted
            CP_SSSMAIN(8).CIn = Cn_ChrInput
            AE_Controls(PP_SSSMAIN.CtB + 8) = wk_Slisted
            Call AE_Check_SSSMAIN_OUTSOUCD(AE_Val3(CP_SSSMAIN(8), (AE_Controls(PP_SSSMAIN.CtB + 8))), Cn_Status6, True, True)
         End If
      Else
          PP_SSSMAIN.CursorDest = Cn_Dest0
          PP_SSSMAIN.NextTx = PP_SSSMAIN.Tx
      End If
   ElseIf ((PP_SSSMAIN.Tx - 18) Mod 6 = 4) And PP_SSSMAIN.Tx >= 18 And PP_SSSMAIN.Tx < 24 Then
      If ((PP_SSSMAIN.Tx - 18) \ 6) <> (PP_SSSMAIN.De - PP_SSSMAIN.TopDe) Then
         Call AE_SystemError("AE_Slist に", 600)
      End If
      PP_SSSMAIN.SlistCom = Null
      PP_SSSMAIN.SlistPx = PP_SSSMAIN.Px
      PP_SSSMAIN.NeglectLostFocusCheck = True
      wk_Slisted = URISU_Slist(PP_SSSMAIN, AE_NullCnv1_SSSMAIN(CP_SSSMAIN(57 + 31 * PP_SSSMAIN.De).CuVal), AE_NullCnv2_SSSMAIN(CP_SSSMAIN(13).CuVal), AE_NullCnv2_SSSMAIN(CP_SSSMAIN(38 + 31 * PP_SSSMAIN.De).CuVal), AE_NullCnv2_SSSMAIN(CP_SSSMAIN(39 + 31 * PP_SSSMAIN.De).CuVal), AE_NullCnv2_SSSMAIN(CP_SSSMAIN(49 + 31 * PP_SSSMAIN.De).CuVal), PP_SSSMAIN.De2)
      PP_SSSMAIN.NeglectLostFocusCheck = False
      If IsEmpty(wk_Slisted) Then wk_Slisted = Null
      PP_SSSMAIN.CursorDirection = Cn_Direction1 '1: Next
      If Not IsNull(wk_Slisted) Then
         PP_SSSMAIN.CursorDest = Cn_Dest9
         PP_SSSMAIN.SlistPx = -1
         PP_SSSMAIN.JustAfterSList = True
         PP_SSSMAIN.SlistCom = Null
         If PP_SSSMAIN.Mode <> Cn_Mode3 Then
            CP_SSSMAIN(42 + wk_PxBase).TpStr = wk_Slisted
            CP_SSSMAIN(42 + wk_PxBase).CIn = Cn_ChrInput
            AE_Controls(PP_SSSMAIN.CtB + 22 + wk_TxBase) = wk_Slisted
            Call AE_Check_SSSMAIN_URISU(AE_Val3(CP_SSSMAIN(42 + wk_PxBase), (AE_Controls(PP_SSSMAIN.CtB + 22 + wk_TxBase))), Cn_Status6, True, True)
         End If
      Else
          PP_SSSMAIN.CursorDest = Cn_Dest0
          PP_SSSMAIN.NextTx = PP_SSSMAIN.Tx
      End If
   Else
      Beep
   End If
End Sub

Static Sub AE_TabStop_SSSMAIN(ByVal pm_FromTx As Integer, ByVal pm_ToTx As Integer, ByVal pm_SetInOut As Boolean) 'Generated.
Dim wk_Tx As Integer
Dim wk_Px As Integer
Dim wk_InOutMode As Long
   If pm_FromTx < 0 Or pm_ToTx < 0 Then Exit Sub
   wk_Tx = pm_FromTx
   Do While wk_Tx <= pm_ToTx
      If wk_Tx >= PP_SSSMAIN.NrBodyTx And wk_Tx < 24 Then
      Else
         wk_Px = AE_Px(PP_SSSMAIN, wk_Tx)
         wk_InOutMode = (CP_SSSMAIN(wk_Px).InOutMode \ 256) And &HFF
         If pm_SetInOut Then CP_SSSMAIN(wk_Px).InOutMode = wk_InOutMode * 256 + wk_InOutMode
         If CP_SSSMAIN(wk_Px).TypeA = Cn_OutputOnly Then
         ElseIf CP_SSSMAIN(wk_Px).TypeA = Cn_OptionButtonH Or CP_SSSMAIN(wk_Px).TypeA = Cn_OptionButtonC Or CP_SSSMAIN(wk_Px).TypeA = Cn_CheckBox Then
            AE_Controls(PP_SSSMAIN.CtB + wk_Tx).TabStop = False
            AE_Controls(PP_SSSMAIN.CtB + wk_Tx).Enabled = (AE_GetInOutMode(CP_SSSMAIN(wk_Px).InOutMode, PP_SSSMAIN.Mode) >= Cn_InOutMode2)
         Else
            AE_Controls(PP_SSSMAIN.CtB + wk_Tx).TabStop = (AE_GetInOutMode(CP_SSSMAIN(wk_Px).InOutMode, PP_SSSMAIN.Mode) >= Cn_InOutMode2) And (AE_IsEnable(CP_SSSMAIN(wk_Px).BlockNo, PP_SSSMAIN.ActiveBlockNo))
         End If
      End If
      wk_Tx = wk_Tx + 1
   Loop
End Sub

Sub AE_Term_SSSMAIN() 'Generated.
End Sub

Sub AE_UnDoDe_SSSMAIN() 'Generated.
Dim wk_SaveDe As Integer
Dim wk_SaveDe2 As Integer
Dim wk_SaveLastDe As Integer
   If PP_SSSMAIN.Mode = Cn_Mode3 Then Beep: Call AE_CursorCurrent_SSSMAIN: Exit Sub
      If AE_ClearedDe_SSSMAIN(-1) <> PP_SSSMAIN.ActiveDe Then
         PP_SSSMAIN.ActiveDe = AE_ClearedDe_SSSMAIN(-1)
      End If
      wk_SaveDe = PP_SSSMAIN.De: wk_SaveDe2 = PP_SSSMAIN.De2
      PP_SSSMAIN.De = PP_SSSMAIN.UnDoDeNo: PP_SSSMAIN.De2 = PP_SSSMAIN.De
      If PP_SSSMAIN.UnDoDeOp = 1 Then
         If AE_IsClearedDe_SSSMAIN(PP_SSSMAIN.UnDoDeNo) And PP_SSSMAIN.UnDoDeNo <= PP_SSSMAIN.LastDe Then
            wk_SaveLastDe = PP_SSSMAIN.LastDe
            If PP_SSSMAIN.De = PP_SSSMAIN.LastDe Then PP_SSSMAIN.LastDe = PP_SSSMAIN.LastDe + 1
            Call AE_DeRestore_SSSMAIN(PP_SSSMAIN.UnDoDeNo)
            If AE_IsClearedDe_SSSMAIN(PP_SSSMAIN.UnDoDeNo) Then
               PP_SSSMAIN.LastDe = wk_SaveLastDe
            Else
               PP_SSSMAIN.DerivedOrigin = ""
               Call AE_RecalcBdDe_SSSMAIN '(PP_SSSMAIN.De)
            End If
            PP_SSSMAIN.ActiveDe = AE_ClearedDe_SSSMAIN(-1)
         Else
            Beep
         End If
      ElseIf PP_SSSMAIN.UnDoDeOp = 2 Then
         If PP_SSSMAIN.ActiveDe >= 0 Then
            If PP_SSSMAIN.UnDoDeNo >= PP_SSSMAIN.LastDe Then Beep: Exit Sub
            Call AE_DeUp_SSSMAIN(PP_SSSMAIN.ActiveDe)
            If PP_SSSMAIN.ActiveDe < PP_SSSMAIN.De Then
               PP_SSSMAIN.De = PP_SSSMAIN.De - 1
               PP_SSSMAIN.De2 = PP_SSSMAIN.De
            End If
         ElseIf PP_SSSMAIN.LastDe > 0 Then
            wk_Bool = AE_MsgLibrary(PP_SSSMAIN, "InsertDe")
            Exit Sub
         Else
            If PP_SSSMAIN.UnDoDeNo > PP_SSSMAIN.LastDe Then Beep: Exit Sub
         End If
         Call AE_DeDown_SSSMAIN(PP_SSSMAIN.UnDoDeNo)
         PP_SSSMAIN.ActiveDe = AE_ClearedDe_SSSMAIN(-1)
         Call AE_DeRestore_SSSMAIN(PP_SSSMAIN.UnDoDeNo)
         If AE_IsClearedDe_SSSMAIN(PP_SSSMAIN.UnDoDeNo) Then
            PP_SSSMAIN.ActiveDe = PP_SSSMAIN.UnDoDeNo
         Else
            PP_SSSMAIN.DerivedOrigin = ""
            Call AE_RecalcBdDe_SSSMAIN '(PP_SSSMAIN.De)
         End If
         PP_SSSMAIN.ActiveDe = AE_ClearedDe_SSSMAIN(-1)
      Else
         Beep
      End If
      PP_SSSMAIN.UnDoDeOp = 0
      PP_SSSMAIN.De = wk_SaveDe: PP_SSSMAIN.De2 = wk_SaveDe2
      Call AE_ScrlMax(PP_SSSMAIN)
End Sub

Sub AE_UnDoItem_SSSMAIN() 'Generated.
Dim wk_ExVal As Variant
Dim wk_ExStatus As Integer
Dim wk_SaveValue As Variant
Dim wk_SaveStatus As Integer
   If CP_SSSMAIN(PP_SSSMAIN.Px).StatusC <= Cn_Status2 Then
      wk_ExVal = CP_SSSMAIN(PP_SSSMAIN.Px).CuVal
      wk_ExStatus = CP_SSSMAIN(PP_SSSMAIN.Px).StatusF
      wk_SaveValue = CP_SSSMAIN(PP_SSSMAIN.Px).ExVal
      wk_SaveStatus = CP_SSSMAIN(PP_SSSMAIN.Px).ExStatus
   Else
      wk_ExVal = CP_SSSMAIN(PP_SSSMAIN.Px).ExVal
      wk_ExStatus = CP_SSSMAIN(PP_SSSMAIN.Px).ExStatus
      If wk_ExStatus = 0 Then Exit Sub
      wk_SaveValue = CP_SSSMAIN(PP_SSSMAIN.Px).CuVal
      wk_SaveStatus = CP_SSSMAIN(PP_SSSMAIN.Px).StatusF
   End If
   If wk_ExStatus = Cn_Status8 Then
      Call AE_ClearItm_SSSMAIN(False)
   Else
      PP_SSSMAIN.MaskMode = True
         CP_SSSMAIN(PP_SSSMAIN.Px).TpStr = AE_Format$(CP_SSSMAIN(PP_SSSMAIN.Px), wk_ExVal, 0, True)
         Call AE_CtSet(PP_SSSMAIN, PP_SSSMAIN.Px, CP_SSSMAIN(PP_SSSMAIN.Px).TpStr, CP_SSSMAIN(PP_SSSMAIN.Px).TypeA, True)
         Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(PP_SSSMAIN.Px), CL_SSSMAIN(PP_SSSMAIN.Px))
      PP_SSSMAIN.MaskMode = False
      AE_StatusCodeBar(PP_SSSMAIN.ScX) = ""
      AE_StatusBar(PP_SSSMAIN.ScX) = ""
      Call AE_SetCheck_SSSMAIN(wk_ExVal, wk_ExStatus, False)
   End If
   Call AE_CursorCurrent_SSSMAIN
   CP_SSSMAIN(PP_SSSMAIN.Px).ExVal = wk_SaveValue
   CP_SSSMAIN(PP_SSSMAIN.Px).ExStatus = wk_SaveStatus
End Sub

Function AE_UpdateC_SSSMAIN(ByVal pm_ExMode As Integer, ByVal pm_NextRec As Integer) As Integer 'Generated.
   If PP_SSSMAIN.Mode <> Cn_Mode2 And PP_SSSMAIN.InitValStatus <> PP_SSSMAIN.Mode And pm_NextRec <> 1000 Then
      If PP_SSSMAIN.ChOprtMode = 0 Then
         If AE_MsgLibrary(PP_SSSMAIN, "UpdateC") Then AE_UpdateC_SSSMAIN = Cn_CuCurrent: Exit Function
      End If
   End If
   PP_SSSMAIN.ChOprtMode = Cn_Mode4
   If SSSMAIN_UpdateC() Then
      Call AE_ModeChange_SSSMAIN(PP_SSSMAIN.ChOprtMode)
      If PP_SSSMAIN.Mode = PP_SSSMAIN.ChOprtMode Then
         If pm_NextRec = 1000 Then
            Call AE_RecalcAll_SSSMAIN
         ElseIf pm_NextRec = True Then
            wk_Int = AE_NextCm_SSSMAIN(False)
         ElseIf pm_NextRec = False Then
            wk_Int = AE_Current_SSSMAIN()
         End If
         Call AE_ClearInitValStatus_SSSMAIN
         AE_UpdateC_SSSMAIN = Cn_CuInit
      Else
         Call AE_ModeChange_SSSMAIN(pm_ExMode)
         AE_UpdateC_SSSMAIN = Cn_CuCurrent
      End If
   Else
      Call AE_ModeChange_SSSMAIN(pm_ExMode)
      AE_UpdateC_SSSMAIN = Cn_CuCurrent
   End If
   PP_SSSMAIN.ChOprtMode = 0
End Function

Function AE_WindowProc_SSSMAIN(ByVal hw As Long, ByVal uMsg As Long, ByVal wParam As Long, ByVal lParam As Long) As Long 'Generated.
Const WM_CONTEXTMENU = &H7B
   If uMsg = WM_CONTEXTMENU Then
      AE_WindowProc_SSSMAIN = 1
   Else
      AE_WindowProc_SSSMAIN = CallWindowProc(PP_SSSMAIN.lpPrevWndProc, hw, uMsg, wParam, lParam)
   End If
End Function

Sub AE_WindowProcSet_SSSMAIN() 'Generated.
   If Cn_DebugMode Then Exit Sub
Dim wk_Tx As Integer
   For wk_Tx = 0 To PP_SSSMAIN.ControlsC - 1
      PP_SSSMAIN.lpPrevWndProc = SetWindowLong(AE_Controls(PP_SSSMAIN.CtB + wk_Tx).hwnd, GWL_WNDPROC, AddressOf AE_WindowProc_SSSMAIN)
   Next wk_Tx
   PP_SSSMAIN.lpPrevWndProc = SetWindowLong(AE_StatusBar(PP_SSSMAIN.ScX).hwnd, GWL_WNDPROC, AddressOf AE_WindowProc_SSSMAIN)
   PP_SSSMAIN.lpPrevWndProc = SetWindowLong(AE_ModeBar(PP_SSSMAIN.ScX).hwnd, GWL_WNDPROC, AddressOf AE_WindowProc_SSSMAIN)
End Sub

Sub DP_SSSMAIN_HINCD(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
Dim wk_PxBase As Integer
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   wk_PxBase = 31 * pm_De
   V = AE_NormData(CP_SSSMAIN(38 + wk_PxBase), AE_Val3(CP_SSSMAIN(38 + wk_PxBase), CStr(DBItem)))
   If CP_SSSMAIN(38 + wk_PxBase).CuVal <> V Or CP_SSSMAIN(38 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(38 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(38 + wk_PxBase).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(38 + wk_PxBase).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(38 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(38 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(38 + wk_PxBase).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(38 + wk_PxBase).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(38 + wk_PxBase), CL_SSSMAIN(38 + wk_PxBase))
   CP_SSSMAIN(38 + wk_PxBase).CuVal = V
   CP_SSSMAIN(38 + wk_PxBase).TpStr = AE_Format$(CP_SSSMAIN(38 + wk_PxBase), CP_SSSMAIN(38 + wk_PxBase).CuVal, 0, True)
   Call AE_CtSet(PP_SSSMAIN, 38 + wk_PxBase, CP_SSSMAIN(38 + wk_PxBase).TpStr, CP_SSSMAIN(38 + wk_PxBase).TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_HINNMA(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
Dim wk_PxBase As Integer
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   wk_PxBase = 31 * pm_De
   V = AE_NormData(CP_SSSMAIN(40 + wk_PxBase), AE_Val3(CP_SSSMAIN(40 + wk_PxBase), CStr(DBItem)))
   If CP_SSSMAIN(40 + wk_PxBase).CuVal <> V Or CP_SSSMAIN(40 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(40 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(40 + wk_PxBase).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(40 + wk_PxBase).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(40 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(40 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(40 + wk_PxBase).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(40 + wk_PxBase).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(40 + wk_PxBase), CL_SSSMAIN(40 + wk_PxBase))
   CP_SSSMAIN(40 + wk_PxBase).CuVal = V
   CP_SSSMAIN(40 + wk_PxBase).TpStr = AE_Format$(CP_SSSMAIN(40 + wk_PxBase), CP_SSSMAIN(40 + wk_PxBase).CuVal, 0, True)
   Call AE_CtSet(PP_SSSMAIN, 40 + wk_PxBase, CP_SSSMAIN(40 + wk_PxBase).TpStr, CP_SSSMAIN(40 + wk_PxBase).TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_HINNMB(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
Dim wk_PxBase As Integer
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   wk_PxBase = 31 * pm_De
   V = AE_NormData(CP_SSSMAIN(41 + wk_PxBase), AE_Val3(CP_SSSMAIN(41 + wk_PxBase), CStr(DBItem)))
   If CP_SSSMAIN(41 + wk_PxBase).CuVal <> V Or CP_SSSMAIN(41 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(41 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(41 + wk_PxBase).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(41 + wk_PxBase).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(41 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(41 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(41 + wk_PxBase).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(41 + wk_PxBase).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(41 + wk_PxBase), CL_SSSMAIN(41 + wk_PxBase))
   CP_SSSMAIN(41 + wk_PxBase).CuVal = V
   CP_SSSMAIN(41 + wk_PxBase).TpStr = AE_Format$(CP_SSSMAIN(41 + wk_PxBase), CP_SSSMAIN(41 + wk_PxBase).CuVal, 0, True)
   Call AE_CtSet(PP_SSSMAIN, 41 + wk_PxBase, CP_SSSMAIN(41 + wk_PxBase).TpStr, CP_SSSMAIN(41 + wk_PxBase).TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_SBNNO(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
Dim wk_PxBase As Integer
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   wk_PxBase = 31 * pm_De
   V = AE_NormData(CP_SSSMAIN(39 + wk_PxBase), AE_Val3(CP_SSSMAIN(39 + wk_PxBase), CStr(DBItem)))
   If CP_SSSMAIN(39 + wk_PxBase).CuVal <> V Or CP_SSSMAIN(39 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(39 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(39 + wk_PxBase).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(39 + wk_PxBase).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(39 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(39 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(39 + wk_PxBase).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(39 + wk_PxBase).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(39 + wk_PxBase), CL_SSSMAIN(39 + wk_PxBase))
   CP_SSSMAIN(39 + wk_PxBase).CuVal = V
   CP_SSSMAIN(39 + wk_PxBase).TpStr = AE_Format$(CP_SSSMAIN(39 + wk_PxBase), CP_SSSMAIN(39 + wk_PxBase).CuVal, 0, True)
   Call AE_CtSet(PP_SSSMAIN, 39 + wk_PxBase, CP_SSSMAIN(39 + wk_PxBase).TpStr, CP_SSSMAIN(39 + wk_PxBase).TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_UNTNM(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
Dim wk_PxBase As Integer
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   wk_PxBase = 31 * pm_De
   V = AE_NormData(CP_SSSMAIN(43 + wk_PxBase), AE_Val3(CP_SSSMAIN(43 + wk_PxBase), CStr(DBItem)))
   If CP_SSSMAIN(43 + wk_PxBase).CuVal <> V Or CP_SSSMAIN(43 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(43 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(43 + wk_PxBase).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(43 + wk_PxBase).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(43 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(43 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(43 + wk_PxBase).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(43 + wk_PxBase).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(43 + wk_PxBase), CL_SSSMAIN(43 + wk_PxBase))
   CP_SSSMAIN(43 + wk_PxBase).CuVal = V
   CP_SSSMAIN(43 + wk_PxBase).TpStr = AE_Format$(CP_SSSMAIN(43 + wk_PxBase), CP_SSSMAIN(43 + wk_PxBase).CuVal, 0, True)
   Call AE_CtSet(PP_SSSMAIN, 43 + wk_PxBase, CP_SSSMAIN(43 + wk_PxBase).TpStr, CP_SSSMAIN(43 + wk_PxBase).TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_URISU(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
Dim wk_PxBase As Integer
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   wk_PxBase = 31 * pm_De
   V = AE_NormData(CP_SSSMAIN(42 + wk_PxBase), AE_Val3(CP_SSSMAIN(42 + wk_PxBase), CStr(DBItem)))
   If CP_SSSMAIN(42 + wk_PxBase).CuVal <> V Or CP_SSSMAIN(42 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(42 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(42 + wk_PxBase).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(42 + wk_PxBase).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(42 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(42 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(42 + wk_PxBase).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(42 + wk_PxBase).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(42 + wk_PxBase), CL_SSSMAIN(42 + wk_PxBase))
   CP_SSSMAIN(42 + wk_PxBase).CuVal = V
   CP_SSSMAIN(42 + wk_PxBase).TpStr = AE_Format$(CP_SSSMAIN(42 + wk_PxBase), CP_SSSMAIN(42 + wk_PxBase).CuVal, 0, True)
   Call AE_CtSet(PP_SSSMAIN, 42 + wk_PxBase, CP_SSSMAIN(42 + wk_PxBase).TpStr, CP_SSSMAIN(42 + wk_PxBase).TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_CASSU(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
Dim wk_PxBase As Integer
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   wk_PxBase = 31 * pm_De
   V = AE_NormData(CP_SSSMAIN(55 + wk_PxBase), AE_Val3(CP_SSSMAIN(55 + wk_PxBase), CStr(DBItem)))
   If CP_SSSMAIN(55 + wk_PxBase).CuVal <> V Or CP_SSSMAIN(55 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(55 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(55 + wk_PxBase).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(55 + wk_PxBase).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(55 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(55 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(55 + wk_PxBase).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(55 + wk_PxBase).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(55 + wk_PxBase), CL_SSSMAIN(55 + wk_PxBase))
   CP_SSSMAIN(55 + wk_PxBase).CuVal = V
   CP_SSSMAIN(55 + wk_PxBase).TpStr = AE_Format$(CP_SSSMAIN(55 + wk_PxBase), CP_SSSMAIN(55 + wk_PxBase).CuVal, 0, True)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_ERRKBA(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
Dim wk_PxBase As Integer
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   wk_PxBase = 31 * pm_De
   V = AE_NormData(CP_SSSMAIN(45 + wk_PxBase), AE_Val3(CP_SSSMAIN(45 + wk_PxBase), CStr(DBItem)))
   If CP_SSSMAIN(45 + wk_PxBase).CuVal <> V Or CP_SSSMAIN(45 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(45 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(45 + wk_PxBase).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(45 + wk_PxBase).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(45 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(45 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(45 + wk_PxBase).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(45 + wk_PxBase).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(45 + wk_PxBase), CL_SSSMAIN(45 + wk_PxBase))
   CP_SSSMAIN(45 + wk_PxBase).CuVal = V
   CP_SSSMAIN(45 + wk_PxBase).TpStr = AE_Format$(CP_SSSMAIN(45 + wk_PxBase), CP_SSSMAIN(45 + wk_PxBase).CuVal, 0, True)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_FURIKN(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
Dim wk_PxBase As Integer
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   wk_PxBase = 31 * pm_De
   V = AE_NormData(CP_SSSMAIN(64 + wk_PxBase), AE_Val3(CP_SSSMAIN(64 + wk_PxBase), CStr(DBItem)))
   If CP_SSSMAIN(64 + wk_PxBase).CuVal <> V Or CP_SSSMAIN(64 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(64 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(64 + wk_PxBase).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(64 + wk_PxBase).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(64 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(64 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(64 + wk_PxBase).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(64 + wk_PxBase).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(64 + wk_PxBase), CL_SSSMAIN(64 + wk_PxBase))
   CP_SSSMAIN(64 + wk_PxBase).CuVal = V
   CP_SSSMAIN(64 + wk_PxBase).TpStr = AE_Format$(CP_SSSMAIN(64 + wk_PxBase), CP_SSSMAIN(64 + wk_PxBase).CuVal, 0, True)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_FURITK(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
Dim wk_PxBase As Integer
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   wk_PxBase = 31 * pm_De
   V = AE_NormData(CP_SSSMAIN(63 + wk_PxBase), AE_Val3(CP_SSSMAIN(63 + wk_PxBase), CStr(DBItem)))
   If CP_SSSMAIN(63 + wk_PxBase).CuVal <> V Or CP_SSSMAIN(63 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(63 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(63 + wk_PxBase).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(63 + wk_PxBase).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(63 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(63 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(63 + wk_PxBase).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(63 + wk_PxBase).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(63 + wk_PxBase), CL_SSSMAIN(63 + wk_PxBase))
   CP_SSSMAIN(63 + wk_PxBase).CuVal = V
   CP_SSSMAIN(63 + wk_PxBase).TpStr = AE_Format$(CP_SSSMAIN(63 + wk_PxBase), CP_SSSMAIN(63 + wk_PxBase).CuVal, 0, True)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_GNKKN(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
Dim wk_PxBase As Integer
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   wk_PxBase = 31 * pm_De
   V = AE_NormData(CP_SSSMAIN(66 + wk_PxBase), AE_Val3(CP_SSSMAIN(66 + wk_PxBase), CStr(DBItem)))
   If CP_SSSMAIN(66 + wk_PxBase).CuVal <> V Or CP_SSSMAIN(66 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(66 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(66 + wk_PxBase).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(66 + wk_PxBase).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(66 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(66 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(66 + wk_PxBase).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(66 + wk_PxBase).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(66 + wk_PxBase), CL_SSSMAIN(66 + wk_PxBase))
   CP_SSSMAIN(66 + wk_PxBase).CuVal = V
   CP_SSSMAIN(66 + wk_PxBase).TpStr = AE_Format$(CP_SSSMAIN(66 + wk_PxBase), CP_SSSMAIN(66 + wk_PxBase).CuVal, 0, True)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_GNKTK(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
Dim wk_PxBase As Integer
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   wk_PxBase = 31 * pm_De
   V = AE_NormData(CP_SSSMAIN(65 + wk_PxBase), AE_Val3(CP_SSSMAIN(65 + wk_PxBase), CStr(DBItem)))
   If CP_SSSMAIN(65 + wk_PxBase).CuVal <> V Or CP_SSSMAIN(65 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(65 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(65 + wk_PxBase).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(65 + wk_PxBase).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(65 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(65 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(65 + wk_PxBase).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(65 + wk_PxBase).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(65 + wk_PxBase), CL_SSSMAIN(65 + wk_PxBase))
   CP_SSSMAIN(65 + wk_PxBase).CuVal = V
   CP_SSSMAIN(65 + wk_PxBase).TpStr = AE_Format$(CP_SSSMAIN(65 + wk_PxBase), CP_SSSMAIN(65 + wk_PxBase).CuVal, 0, True)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_HINID(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
Dim wk_PxBase As Integer
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   wk_PxBase = 31 * pm_De
   V = AE_NormData(CP_SSSMAIN(50 + wk_PxBase), AE_Val3(CP_SSSMAIN(50 + wk_PxBase), CStr(DBItem)))
   If CP_SSSMAIN(50 + wk_PxBase).CuVal <> V Or CP_SSSMAIN(50 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(50 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(50 + wk_PxBase).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(50 + wk_PxBase).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(50 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(50 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(50 + wk_PxBase).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(50 + wk_PxBase).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(50 + wk_PxBase), CL_SSSMAIN(50 + wk_PxBase))
   CP_SSSMAIN(50 + wk_PxBase).CuVal = V
   CP_SSSMAIN(50 + wk_PxBase).TpStr = AE_Format$(CP_SSSMAIN(50 + wk_PxBase), CP_SSSMAIN(50 + wk_PxBase).CuVal, 0, True)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_HINZEIKB(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
Dim wk_PxBase As Integer
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   wk_PxBase = 31 * pm_De
   V = AE_NormData(CP_SSSMAIN(52 + wk_PxBase), AE_Val3(CP_SSSMAIN(52 + wk_PxBase), CStr(DBItem)))
   If CP_SSSMAIN(52 + wk_PxBase).CuVal <> V Or CP_SSSMAIN(52 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(52 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(52 + wk_PxBase).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(52 + wk_PxBase).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(52 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(52 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(52 + wk_PxBase).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(52 + wk_PxBase).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(52 + wk_PxBase), CL_SSSMAIN(52 + wk_PxBase))
   CP_SSSMAIN(52 + wk_PxBase).CuVal = V
   CP_SSSMAIN(52 + wk_PxBase).TpStr = AE_Format$(CP_SSSMAIN(52 + wk_PxBase), CP_SSSMAIN(52 + wk_PxBase).CuVal, 0, True)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_LINNO(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
Dim wk_PxBase As Integer
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   wk_PxBase = 31 * pm_De
   V = AE_NormData(CP_SSSMAIN(46 + wk_PxBase), AE_Val3(CP_SSSMAIN(46 + wk_PxBase), CStr(DBItem)))
   If CP_SSSMAIN(46 + wk_PxBase).CuVal <> V Or CP_SSSMAIN(46 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(46 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(46 + wk_PxBase).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(46 + wk_PxBase).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(46 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(46 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(46 + wk_PxBase).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(46 + wk_PxBase).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(46 + wk_PxBase), CL_SSSMAIN(46 + wk_PxBase))
   CP_SSSMAIN(46 + wk_PxBase).CuVal = V
   CP_SSSMAIN(46 + wk_PxBase).TpStr = AE_Format$(CP_SSSMAIN(46 + wk_PxBase), CP_SSSMAIN(46 + wk_PxBase).CuVal, 0, True)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_RECNO(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
Dim wk_PxBase As Integer
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   wk_PxBase = 31 * pm_De
   V = AE_NormData(CP_SSSMAIN(44 + wk_PxBase), AE_Val3(CP_SSSMAIN(44 + wk_PxBase), CStr(DBItem)))
   If CP_SSSMAIN(44 + wk_PxBase).CuVal <> V Or CP_SSSMAIN(44 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(44 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(44 + wk_PxBase).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(44 + wk_PxBase).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(44 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(44 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(44 + wk_PxBase).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(44 + wk_PxBase).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(44 + wk_PxBase), CL_SSSMAIN(44 + wk_PxBase))
   CP_SSSMAIN(44 + wk_PxBase).CuVal = V
   CP_SSSMAIN(44 + wk_PxBase).TpStr = AE_Format$(CP_SSSMAIN(44 + wk_PxBase), CP_SSSMAIN(44 + wk_PxBase).CuVal, 0, True)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_SBNSU(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
Dim wk_PxBase As Integer
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   wk_PxBase = 31 * pm_De
   V = AE_NormData(CP_SSSMAIN(57 + wk_PxBase), AE_Val3(CP_SSSMAIN(57 + wk_PxBase), CStr(DBItem)))
   If CP_SSSMAIN(57 + wk_PxBase).CuVal <> V Or CP_SSSMAIN(57 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(57 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(57 + wk_PxBase).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(57 + wk_PxBase).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(57 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(57 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(57 + wk_PxBase).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(57 + wk_PxBase).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(57 + wk_PxBase), CL_SSSMAIN(57 + wk_PxBase))
   CP_SSSMAIN(57 + wk_PxBase).CuVal = V
   CP_SSSMAIN(57 + wk_PxBase).TpStr = AE_Format$(CP_SSSMAIN(57 + wk_PxBase), CP_SSSMAIN(57 + wk_PxBase).CuVal, 0, True)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_SERIKB(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
Dim wk_PxBase As Integer
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   wk_PxBase = 31 * pm_De
   V = AE_NormData(CP_SSSMAIN(49 + wk_PxBase), AE_Val3(CP_SSSMAIN(49 + wk_PxBase), CStr(DBItem)))
   If CP_SSSMAIN(49 + wk_PxBase).CuVal <> V Or CP_SSSMAIN(49 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(49 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(49 + wk_PxBase).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(49 + wk_PxBase).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(49 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(49 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(49 + wk_PxBase).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(49 + wk_PxBase).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(49 + wk_PxBase), CL_SSSMAIN(49 + wk_PxBase))
   CP_SSSMAIN(49 + wk_PxBase).CuVal = V
   CP_SSSMAIN(49 + wk_PxBase).TpStr = AE_Format$(CP_SSSMAIN(49 + wk_PxBase), CP_SSSMAIN(49 + wk_PxBase).CuVal, 0, True)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_SIKKN(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
Dim wk_PxBase As Integer
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   wk_PxBase = 31 * pm_De
   V = AE_NormData(CP_SSSMAIN(68 + wk_PxBase), AE_Val3(CP_SSSMAIN(68 + wk_PxBase), CStr(DBItem)))
   If CP_SSSMAIN(68 + wk_PxBase).CuVal <> V Or CP_SSSMAIN(68 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(68 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(68 + wk_PxBase).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(68 + wk_PxBase).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(68 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(68 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(68 + wk_PxBase).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(68 + wk_PxBase).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(68 + wk_PxBase), CL_SSSMAIN(68 + wk_PxBase))
   CP_SSSMAIN(68 + wk_PxBase).CuVal = V
   CP_SSSMAIN(68 + wk_PxBase).TpStr = AE_Format$(CP_SSSMAIN(68 + wk_PxBase), CP_SSSMAIN(68 + wk_PxBase).CuVal, 0, True)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_SIKTK(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
Dim wk_PxBase As Integer
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   wk_PxBase = 31 * pm_De
   V = AE_NormData(CP_SSSMAIN(67 + wk_PxBase), AE_Val3(CP_SSSMAIN(67 + wk_PxBase), CStr(DBItem)))
   If CP_SSSMAIN(67 + wk_PxBase).CuVal <> V Or CP_SSSMAIN(67 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(67 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(67 + wk_PxBase).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(67 + wk_PxBase).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(67 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(67 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(67 + wk_PxBase).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(67 + wk_PxBase).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(67 + wk_PxBase), CL_SSSMAIN(67 + wk_PxBase))
   CP_SSSMAIN(67 + wk_PxBase).CuVal = V
   CP_SSSMAIN(67 + wk_PxBase).TpStr = AE_Format$(CP_SSSMAIN(67 + wk_PxBase), CP_SSSMAIN(67 + wk_PxBase).CuVal, 0, True)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_SURYO(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
Dim wk_PxBase As Integer
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   wk_PxBase = 31 * pm_De
   V = AE_NormData(CP_SSSMAIN(54 + wk_PxBase), AE_Val3(CP_SSSMAIN(54 + wk_PxBase), CStr(DBItem)))
   If CP_SSSMAIN(54 + wk_PxBase).CuVal <> V Or CP_SSSMAIN(54 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(54 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(54 + wk_PxBase).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(54 + wk_PxBase).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(54 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(54 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(54 + wk_PxBase).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(54 + wk_PxBase).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(54 + wk_PxBase), CL_SSSMAIN(54 + wk_PxBase))
   CP_SSSMAIN(54 + wk_PxBase).CuVal = V
   CP_SSSMAIN(54 + wk_PxBase).TpStr = AE_Format$(CP_SSSMAIN(54 + wk_PxBase), CP_SSSMAIN(54 + wk_PxBase).CuVal, 0, True)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_UDNDKBID(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
Dim wk_PxBase As Integer
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   wk_PxBase = 31 * pm_De
   V = AE_NormData(CP_SSSMAIN(48 + wk_PxBase), AE_Val3(CP_SSSMAIN(48 + wk_PxBase), CStr(DBItem)))
   If CP_SSSMAIN(48 + wk_PxBase).CuVal <> V Or CP_SSSMAIN(48 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(48 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(48 + wk_PxBase).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(48 + wk_PxBase).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(48 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(48 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(48 + wk_PxBase).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(48 + wk_PxBase).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(48 + wk_PxBase), CL_SSSMAIN(48 + wk_PxBase))
   CP_SSSMAIN(48 + wk_PxBase).CuVal = V
   CP_SSSMAIN(48 + wk_PxBase).TpStr = AE_Format$(CP_SSSMAIN(48 + wk_PxBase), CP_SSSMAIN(48 + wk_PxBase).CuVal, 0, True)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_UDNDKBNM(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
Dim wk_PxBase As Integer
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   wk_PxBase = 31 * pm_De
   V = AE_NormData(CP_SSSMAIN(51 + wk_PxBase), AE_Val3(CP_SSSMAIN(51 + wk_PxBase), CStr(DBItem)))
   If CP_SSSMAIN(51 + wk_PxBase).CuVal <> V Or CP_SSSMAIN(51 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(51 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(51 + wk_PxBase).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(51 + wk_PxBase).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(51 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(51 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(51 + wk_PxBase).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(51 + wk_PxBase).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(51 + wk_PxBase), CL_SSSMAIN(51 + wk_PxBase))
   CP_SSSMAIN(51 + wk_PxBase).CuVal = V
   CP_SSSMAIN(51 + wk_PxBase).TpStr = AE_Format$(CP_SSSMAIN(51 + wk_PxBase), CP_SSSMAIN(51 + wk_PxBase).CuVal, 0, True)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_UPDID(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
Dim wk_PxBase As Integer
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   wk_PxBase = 31 * pm_De
   V = AE_NormData(CP_SSSMAIN(47 + wk_PxBase), AE_Val3(CP_SSSMAIN(47 + wk_PxBase), CStr(DBItem)))
   If CP_SSSMAIN(47 + wk_PxBase).CuVal <> V Or CP_SSSMAIN(47 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(47 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(47 + wk_PxBase).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(47 + wk_PxBase).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(47 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(47 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(47 + wk_PxBase).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(47 + wk_PxBase).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(47 + wk_PxBase), CL_SSSMAIN(47 + wk_PxBase))
   CP_SSSMAIN(47 + wk_PxBase).CuVal = V
   CP_SSSMAIN(47 + wk_PxBase).TpStr = AE_Format$(CP_SSSMAIN(47 + wk_PxBase), CP_SSSMAIN(47 + wk_PxBase).CuVal, 0, True)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_URIKN(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
Dim wk_PxBase As Integer
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   wk_PxBase = 31 * pm_De
   V = AE_NormData(CP_SSSMAIN(58 + wk_PxBase), AE_Val3(CP_SSSMAIN(58 + wk_PxBase), CStr(DBItem)))
   If CP_SSSMAIN(58 + wk_PxBase).CuVal <> V Or CP_SSSMAIN(58 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(58 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(58 + wk_PxBase).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(58 + wk_PxBase).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(58 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(58 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(58 + wk_PxBase).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(58 + wk_PxBase).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(58 + wk_PxBase), CL_SSSMAIN(58 + wk_PxBase))
   CP_SSSMAIN(58 + wk_PxBase).CuVal = V
   CP_SSSMAIN(58 + wk_PxBase).TpStr = AE_Format$(CP_SSSMAIN(58 + wk_PxBase), CP_SSSMAIN(58 + wk_PxBase).CuVal, 0, True)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_URITK(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
Dim wk_PxBase As Integer
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   wk_PxBase = 31 * pm_De
   V = AE_NormData(CP_SSSMAIN(56 + wk_PxBase), AE_Val3(CP_SSSMAIN(56 + wk_PxBase), CStr(DBItem)))
   If CP_SSSMAIN(56 + wk_PxBase).CuVal <> V Or CP_SSSMAIN(56 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(56 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(56 + wk_PxBase).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(56 + wk_PxBase).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(56 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(56 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(56 + wk_PxBase).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(56 + wk_PxBase).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(56 + wk_PxBase), CL_SSSMAIN(56 + wk_PxBase))
   CP_SSSMAIN(56 + wk_PxBase).CuVal = V
   CP_SSSMAIN(56 + wk_PxBase).TpStr = AE_Format$(CP_SSSMAIN(56 + wk_PxBase), CP_SSSMAIN(56 + wk_PxBase).CuVal, 0, True)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_UZEKN(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
Dim wk_PxBase As Integer
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   wk_PxBase = 31 * pm_De
   V = AE_NormData(CP_SSSMAIN(59 + wk_PxBase), AE_Val3(CP_SSSMAIN(59 + wk_PxBase), CStr(DBItem)))
   If CP_SSSMAIN(59 + wk_PxBase).CuVal <> V Or CP_SSSMAIN(59 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(59 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(59 + wk_PxBase).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(59 + wk_PxBase).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(59 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(59 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(59 + wk_PxBase).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(59 + wk_PxBase).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(59 + wk_PxBase), CL_SSSMAIN(59 + wk_PxBase))
   CP_SSSMAIN(59 + wk_PxBase).CuVal = V
   CP_SSSMAIN(59 + wk_PxBase).TpStr = AE_Format$(CP_SSSMAIN(59 + wk_PxBase), CP_SSSMAIN(59 + wk_PxBase).CuVal, 0, True)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_ZEIRNKKB(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
Dim wk_PxBase As Integer
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   wk_PxBase = 31 * pm_De
   V = AE_NormData(CP_SSSMAIN(53 + wk_PxBase), AE_Val3(CP_SSSMAIN(53 + wk_PxBase), CStr(DBItem)))
   If CP_SSSMAIN(53 + wk_PxBase).CuVal <> V Or CP_SSSMAIN(53 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(53 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(53 + wk_PxBase).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(53 + wk_PxBase).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(53 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(53 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(53 + wk_PxBase).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(53 + wk_PxBase).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(53 + wk_PxBase), CL_SSSMAIN(53 + wk_PxBase))
   CP_SSSMAIN(53 + wk_PxBase).CuVal = V
   CP_SSSMAIN(53 + wk_PxBase).TpStr = AE_Format$(CP_SSSMAIN(53 + wk_PxBase), CP_SSSMAIN(53 + wk_PxBase).CuVal, 0, True)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_ZKMURIKN(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
Dim wk_PxBase As Integer
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   wk_PxBase = 31 * pm_De
   V = AE_NormData(CP_SSSMAIN(61 + wk_PxBase), AE_Val3(CP_SSSMAIN(61 + wk_PxBase), CStr(DBItem)))
   If CP_SSSMAIN(61 + wk_PxBase).CuVal <> V Or CP_SSSMAIN(61 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(61 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(61 + wk_PxBase).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(61 + wk_PxBase).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(61 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(61 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(61 + wk_PxBase).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(61 + wk_PxBase).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(61 + wk_PxBase), CL_SSSMAIN(61 + wk_PxBase))
   CP_SSSMAIN(61 + wk_PxBase).CuVal = V
   CP_SSSMAIN(61 + wk_PxBase).TpStr = AE_Format$(CP_SSSMAIN(61 + wk_PxBase), CP_SSSMAIN(61 + wk_PxBase).CuVal, 0, True)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_ZKMUZEKN(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
Dim wk_PxBase As Integer
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   wk_PxBase = 31 * pm_De
   V = AE_NormData(CP_SSSMAIN(62 + wk_PxBase), AE_Val3(CP_SSSMAIN(62 + wk_PxBase), CStr(DBItem)))
   If CP_SSSMAIN(62 + wk_PxBase).CuVal <> V Or CP_SSSMAIN(62 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(62 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(62 + wk_PxBase).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(62 + wk_PxBase).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(62 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(62 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(62 + wk_PxBase).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(62 + wk_PxBase).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(62 + wk_PxBase), CL_SSSMAIN(62 + wk_PxBase))
   CP_SSSMAIN(62 + wk_PxBase).CuVal = V
   CP_SSSMAIN(62 + wk_PxBase).TpStr = AE_Format$(CP_SSSMAIN(62 + wk_PxBase), CP_SSSMAIN(62 + wk_PxBase).CuVal, 0, True)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_ZNKURIKN(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
Dim wk_PxBase As Integer
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   wk_PxBase = 31 * pm_De
   V = AE_NormData(CP_SSSMAIN(60 + wk_PxBase), AE_Val3(CP_SSSMAIN(60 + wk_PxBase), CStr(DBItem)))
   If CP_SSSMAIN(60 + wk_PxBase).CuVal <> V Or CP_SSSMAIN(60 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(60 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(60 + wk_PxBase).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(60 + wk_PxBase).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(60 + wk_PxBase).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(60 + wk_PxBase).StatusC = Cn_Status6: CP_SSSMAIN(60 + wk_PxBase).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(60 + wk_PxBase).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(60 + wk_PxBase), CL_SSSMAIN(60 + wk_PxBase))
   CP_SSSMAIN(60 + wk_PxBase).CuVal = V
   CP_SSSMAIN(60 + wk_PxBase).TpStr = AE_Format$(CP_SSSMAIN(60 + wk_PxBase), CP_SSSMAIN(60 + wk_PxBase).CuVal, 0, True)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_HENRSNCD(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   V = AE_NormData(CP_SSSMAIN(4), AE_Val3(CP_SSSMAIN(4), CStr(DBItem)))
   If CP_SSSMAIN(4).CuVal <> V Or CP_SSSMAIN(4).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(4).StatusC = Cn_Status6: CP_SSSMAIN(4).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(4).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(4).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(4).StatusC = Cn_Status6: CP_SSSMAIN(4).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(4).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(4), CL_SSSMAIN(4))
   CP_SSSMAIN(4).CuVal = V
   CP_SSSMAIN(4).TpStr = AE_Format$(CP_SSSMAIN(4), CP_SSSMAIN(4).CuVal, 0, True)
   Call AE_CtSet(PP_SSSMAIN, 4, CP_SSSMAIN(4).TpStr, CP_SSSMAIN(4).TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_HENRSNNM(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   V = AE_NormData(CP_SSSMAIN(5), AE_Val3(CP_SSSMAIN(5), CStr(DBItem)))
   If CP_SSSMAIN(5).CuVal <> V Or CP_SSSMAIN(5).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(5).StatusC = Cn_Status6: CP_SSSMAIN(5).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(5).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(5).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(5).StatusC = Cn_Status6: CP_SSSMAIN(5).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(5).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(5), CL_SSSMAIN(5))
   CP_SSSMAIN(5).CuVal = V
   CP_SSSMAIN(5).TpStr = AE_Format$(CP_SSSMAIN(5), CP_SSSMAIN(5).CuVal, 0, True)
   Call AE_CtSet(PP_SSSMAIN, 5, CP_SSSMAIN(5).TpStr, CP_SSSMAIN(5).TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_HENSTTCD(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   V = AE_NormData(CP_SSSMAIN(6), AE_Val3(CP_SSSMAIN(6), CStr(DBItem)))
   If CP_SSSMAIN(6).CuVal <> V Or CP_SSSMAIN(6).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(6).StatusC = Cn_Status6: CP_SSSMAIN(6).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(6).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(6).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(6).StatusC = Cn_Status6: CP_SSSMAIN(6).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(6).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(6), CL_SSSMAIN(6))
   CP_SSSMAIN(6).CuVal = V
   CP_SSSMAIN(6).TpStr = AE_Format$(CP_SSSMAIN(6), CP_SSSMAIN(6).CuVal, 0, True)
   Call AE_CtSet(PP_SSSMAIN, 6, CP_SSSMAIN(6).TpStr, CP_SSSMAIN(6).TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_HENSTTNM(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   V = AE_NormData(CP_SSSMAIN(7), AE_Val3(CP_SSSMAIN(7), CStr(DBItem)))
   If CP_SSSMAIN(7).CuVal <> V Or CP_SSSMAIN(7).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(7).StatusC = Cn_Status6: CP_SSSMAIN(7).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(7).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(7).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(7).StatusC = Cn_Status6: CP_SSSMAIN(7).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(7).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(7), CL_SSSMAIN(7))
   CP_SSSMAIN(7).CuVal = V
   CP_SSSMAIN(7).TpStr = AE_Format$(CP_SSSMAIN(7), CP_SSSMAIN(7).CuVal, 0, True)
   Call AE_CtSet(PP_SSSMAIN, 7, CP_SSSMAIN(7).TpStr, CP_SSSMAIN(7).TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_JDNDT(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   V = AE_NormData(CP_SSSMAIN(12), AE_Val3(CP_SSSMAIN(12), CStr(DBItem)))
   If CP_SSSMAIN(12).CuVal <> V Or CP_SSSMAIN(12).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(12).StatusC = Cn_Status6: CP_SSSMAIN(12).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(12).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(12).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(12).StatusC = Cn_Status6: CP_SSSMAIN(12).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(12).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(12), CL_SSSMAIN(12))
   CP_SSSMAIN(12).CuVal = V
   CP_SSSMAIN(12).TpStr = AE_Format$(CP_SSSMAIN(12), CP_SSSMAIN(12).CuVal, 0, True)
   Call AE_CtSet(PP_SSSMAIN, 12, CP_SSSMAIN(12).TpStr, CP_SSSMAIN(12).TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_JDNNO(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   V = AE_NormData(CP_SSSMAIN(2), AE_Val3(CP_SSSMAIN(2), CStr(DBItem)))
   If CP_SSSMAIN(2).CuVal <> V Or CP_SSSMAIN(2).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(2).StatusC = Cn_Status6: CP_SSSMAIN(2).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(2).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(2).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(2).StatusC = Cn_Status6: CP_SSSMAIN(2).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(2).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(2), CL_SSSMAIN(2))
   CP_SSSMAIN(2).CuVal = V
   CP_SSSMAIN(2).TpStr = AE_Format$(CP_SSSMAIN(2), CP_SSSMAIN(2).CuVal, 0, True)
   Call AE_CtSet(PP_SSSMAIN, 2, CP_SSSMAIN(2).TpStr, CP_SSSMAIN(2).TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_NHSRN(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   V = AE_NormData(CP_SSSMAIN(15), AE_Val3(CP_SSSMAIN(15), CStr(DBItem)))
   If CP_SSSMAIN(15).CuVal <> V Or CP_SSSMAIN(15).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(15).StatusC = Cn_Status6: CP_SSSMAIN(15).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(15).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(15).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(15).StatusC = Cn_Status6: CP_SSSMAIN(15).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(15).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(15), CL_SSSMAIN(15))
   CP_SSSMAIN(15).CuVal = V
   CP_SSSMAIN(15).TpStr = AE_Format$(CP_SSSMAIN(15), CP_SSSMAIN(15).CuVal, 0, True)
   Call AE_CtSet(PP_SSSMAIN, 15, CP_SSSMAIN(15).TpStr, CP_SSSMAIN(15).TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_ODNDT(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   V = AE_NormData(CP_SSSMAIN(13), AE_Val3(CP_SSSMAIN(13), CStr(DBItem)))
   If CP_SSSMAIN(13).CuVal <> V Or CP_SSSMAIN(13).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(13).StatusC = Cn_Status6: CP_SSSMAIN(13).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(13).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(13).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(13).StatusC = Cn_Status6: CP_SSSMAIN(13).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(13).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(13), CL_SSSMAIN(13))
   CP_SSSMAIN(13).CuVal = V
   CP_SSSMAIN(13).TpStr = AE_Format$(CP_SSSMAIN(13), CP_SSSMAIN(13).CuVal, 0, True)
   Call AE_CtSet(PP_SSSMAIN, 13, CP_SSSMAIN(13).TpStr, CP_SSSMAIN(13).TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_OPEID(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   V = AE_NormData(CP_SSSMAIN(16), AE_Val3(CP_SSSMAIN(16), CStr(DBItem)))
   If CP_SSSMAIN(16).CuVal <> V Or CP_SSSMAIN(16).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(16).StatusC = Cn_Status6: CP_SSSMAIN(16).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(16).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(16).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(16).StatusC = Cn_Status6: CP_SSSMAIN(16).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(16).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(16), CL_SSSMAIN(16))
   CP_SSSMAIN(16).CuVal = V
   CP_SSSMAIN(16).TpStr = AE_Format$(CP_SSSMAIN(16), CP_SSSMAIN(16).CuVal, 0, True)
   Call AE_CtSet(PP_SSSMAIN, 16, CP_SSSMAIN(16).TpStr, CP_SSSMAIN(16).TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_OPENM(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   V = AE_NormData(CP_SSSMAIN(17), AE_Val3(CP_SSSMAIN(17), CStr(DBItem)))
   If CP_SSSMAIN(17).CuVal <> V Or CP_SSSMAIN(17).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(17).StatusC = Cn_Status6: CP_SSSMAIN(17).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(17).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(17).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(17).StatusC = Cn_Status6: CP_SSSMAIN(17).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(17).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(17), CL_SSSMAIN(17))
   CP_SSSMAIN(17).CuVal = V
   CP_SSSMAIN(17).TpStr = AE_Format$(CP_SSSMAIN(17), CP_SSSMAIN(17).CuVal, 0, True)
   Call AE_CtSet(PP_SSSMAIN, 17, CP_SSSMAIN(17).TpStr, CP_SSSMAIN(17).TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_OUTSOUCD(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   V = AE_NormData(CP_SSSMAIN(8), AE_Val3(CP_SSSMAIN(8), CStr(DBItem)))
   If CP_SSSMAIN(8).CuVal <> V Or CP_SSSMAIN(8).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(8).StatusC = Cn_Status6: CP_SSSMAIN(8).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(8).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(8).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(8).StatusC = Cn_Status6: CP_SSSMAIN(8).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(8).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(8), CL_SSSMAIN(8))
   CP_SSSMAIN(8).CuVal = V
   CP_SSSMAIN(8).TpStr = AE_Format$(CP_SSSMAIN(8), CP_SSSMAIN(8).CuVal, 0, True)
   Call AE_CtSet(PP_SSSMAIN, 8, CP_SSSMAIN(8).TpStr, CP_SSSMAIN(8).TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_OUTSOUNM(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   V = AE_NormData(CP_SSSMAIN(9), AE_Val3(CP_SSSMAIN(9), CStr(DBItem)))
   If CP_SSSMAIN(9).CuVal <> V Or CP_SSSMAIN(9).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(9).StatusC = Cn_Status6: CP_SSSMAIN(9).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(9).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(9).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(9).StatusC = Cn_Status6: CP_SSSMAIN(9).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(9).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(9), CL_SSSMAIN(9))
   CP_SSSMAIN(9).CuVal = V
   CP_SSSMAIN(9).TpStr = AE_Format$(CP_SSSMAIN(9), CP_SSSMAIN(9).CuVal, 0, True)
   Call AE_CtSet(PP_SSSMAIN, 9, CP_SSSMAIN(9).TpStr, CP_SSSMAIN(9).TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_SOUCD(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   V = AE_NormData(CP_SSSMAIN(10), AE_Val3(CP_SSSMAIN(10), CStr(DBItem)))
   If CP_SSSMAIN(10).CuVal <> V Or CP_SSSMAIN(10).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(10).StatusC = Cn_Status6: CP_SSSMAIN(10).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(10).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(10).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(10).StatusC = Cn_Status6: CP_SSSMAIN(10).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(10).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(10), CL_SSSMAIN(10))
   CP_SSSMAIN(10).CuVal = V
   CP_SSSMAIN(10).TpStr = AE_Format$(CP_SSSMAIN(10), CP_SSSMAIN(10).CuVal, 0, True)
   Call AE_CtSet(PP_SSSMAIN, 10, CP_SSSMAIN(10).TpStr, CP_SSSMAIN(10).TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_SOUNM(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   V = AE_NormData(CP_SSSMAIN(11), AE_Val3(CP_SSSMAIN(11), CStr(DBItem)))
   If CP_SSSMAIN(11).CuVal <> V Or CP_SSSMAIN(11).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(11).StatusC = Cn_Status6: CP_SSSMAIN(11).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(11).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(11).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(11).StatusC = Cn_Status6: CP_SSSMAIN(11).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(11).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(11), CL_SSSMAIN(11))
   CP_SSSMAIN(11).CuVal = V
   CP_SSSMAIN(11).TpStr = AE_Format$(CP_SSSMAIN(11), CP_SSSMAIN(11).CuVal, 0, True)
   Call AE_CtSet(PP_SSSMAIN, 11, CP_SSSMAIN(11).TpStr, CP_SSSMAIN(11).TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_SRANO(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   V = AE_NormData(CP_SSSMAIN(0), AE_Val3(CP_SSSMAIN(0), CStr(DBItem)))
   If CP_SSSMAIN(0).CuVal <> V Or CP_SSSMAIN(0).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(0).StatusC = Cn_Status6: CP_SSSMAIN(0).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(0).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(0).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(0).StatusC = Cn_Status6: CP_SSSMAIN(0).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(0).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(0), CL_SSSMAIN(0))
   CP_SSSMAIN(0).CuVal = V
   CP_SSSMAIN(0).TpStr = AE_Format$(CP_SSSMAIN(0), CP_SSSMAIN(0).CuVal, 0, True)
   Call AE_CtSet(PP_SSSMAIN, 0, CP_SSSMAIN(0).TpStr, CP_SSSMAIN(0).TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_TOKRN(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   V = AE_NormData(CP_SSSMAIN(14), AE_Val3(CP_SSSMAIN(14), CStr(DBItem)))
   If CP_SSSMAIN(14).CuVal <> V Or CP_SSSMAIN(14).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(14).StatusC = Cn_Status6: CP_SSSMAIN(14).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(14).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(14).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(14).StatusC = Cn_Status6: CP_SSSMAIN(14).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(14).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(14), CL_SSSMAIN(14))
   CP_SSSMAIN(14).CuVal = V
   CP_SSSMAIN(14).TpStr = AE_Format$(CP_SSSMAIN(14), CP_SSSMAIN(14).CuVal, 0, True)
   Call AE_CtSet(PP_SSSMAIN, 14, CP_SSSMAIN(14).TpStr, CP_SSSMAIN(14).TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_UDNDT(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   V = AE_NormData(CP_SSSMAIN(3), AE_Val3(CP_SSSMAIN(3), CStr(DBItem)))
   If CP_SSSMAIN(3).CuVal <> V Or CP_SSSMAIN(3).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(3).StatusC = Cn_Status6: CP_SSSMAIN(3).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(3).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(3).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(3).StatusC = Cn_Status6: CP_SSSMAIN(3).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(3).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(3), CL_SSSMAIN(3))
   CP_SSSMAIN(3).CuVal = V
   CP_SSSMAIN(3).TpStr = AE_Format$(CP_SSSMAIN(3), CP_SSSMAIN(3).CuVal, 0, True)
   Call AE_CtSet(PP_SSSMAIN, 3, CP_SSSMAIN(3).TpStr, CP_SSSMAIN(3).TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_UDNNO(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   V = AE_NormData(CP_SSSMAIN(1), AE_Val3(CP_SSSMAIN(1), CStr(DBItem)))
   If CP_SSSMAIN(1).CuVal <> V Or CP_SSSMAIN(1).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(1).StatusC = Cn_Status6: CP_SSSMAIN(1).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(1).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(1).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(1).StatusC = Cn_Status6: CP_SSSMAIN(1).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(1).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(1), CL_SSSMAIN(1))
   CP_SSSMAIN(1).CuVal = V
   CP_SSSMAIN(1).TpStr = AE_Format$(CP_SSSMAIN(1), CP_SSSMAIN(1).CuVal, 0, True)
   Call AE_CtSet(PP_SSSMAIN, 1, CP_SSSMAIN(1).TpStr, CP_SSSMAIN(1).TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_CLTID(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   V = AE_NormData(CP_SSSMAIN(25), AE_Val3(CP_SSSMAIN(25), CStr(DBItem)))
   If CP_SSSMAIN(25).CuVal <> V Or CP_SSSMAIN(25).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(25).StatusC = Cn_Status6: CP_SSSMAIN(25).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(25).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(25).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(25).StatusC = Cn_Status6: CP_SSSMAIN(25).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(25).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(25), CL_SSSMAIN(25))
   CP_SSSMAIN(25).CuVal = V
   CP_SSSMAIN(25).TpStr = AE_Format$(CP_SSSMAIN(25), CP_SSSMAIN(25).CuVal, 0, True)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_DATNO(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   V = AE_NormData(CP_SSSMAIN(18), AE_Val3(CP_SSSMAIN(18), CStr(DBItem)))
   If CP_SSSMAIN(18).CuVal <> V Or CP_SSSMAIN(18).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(18).StatusC = Cn_Status6: CP_SSSMAIN(18).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(18).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(18).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(18).StatusC = Cn_Status6: CP_SSSMAIN(18).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(18).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(18), CL_SSSMAIN(18))
   CP_SSSMAIN(18).CuVal = V
   CP_SSSMAIN(18).TpStr = AE_Format$(CP_SSSMAIN(18), CP_SSSMAIN(18).CuVal, 0, True)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_DENDT(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   V = AE_NormData(CP_SSSMAIN(21), AE_Val3(CP_SSSMAIN(21), CStr(DBItem)))
   If CP_SSSMAIN(21).CuVal <> V Or CP_SSSMAIN(21).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(21).StatusC = Cn_Status6: CP_SSSMAIN(21).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(21).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(21).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(21).StatusC = Cn_Status6: CP_SSSMAIN(21).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(21).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(21), CL_SSSMAIN(21))
   CP_SSSMAIN(21).CuVal = V
   CP_SSSMAIN(21).TpStr = AE_Format$(CP_SSSMAIN(21), CP_SSSMAIN(21).CuVal, 0, True)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_ENTDT(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   V = AE_NormData(CP_SSSMAIN(20), AE_Val3(CP_SSSMAIN(20), CStr(DBItem)))
   If CP_SSSMAIN(20).CuVal <> V Or CP_SSSMAIN(20).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(20).StatusC = Cn_Status6: CP_SSSMAIN(20).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(20).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(20).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(20).StatusC = Cn_Status6: CP_SSSMAIN(20).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(20).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(20), CL_SSSMAIN(20))
   CP_SSSMAIN(20).CuVal = V
   CP_SSSMAIN(20).TpStr = AE_Format$(CP_SSSMAIN(20), CP_SSSMAIN(20).CuVal, 0, True)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_FRNKB(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   V = AE_NormData(CP_SSSMAIN(36), AE_Val3(CP_SSSMAIN(36), CStr(DBItem)))
   If CP_SSSMAIN(36).CuVal <> V Or CP_SSSMAIN(36).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(36).StatusC = Cn_Status6: CP_SSSMAIN(36).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(36).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(36).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(36).StatusC = Cn_Status6: CP_SSSMAIN(36).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(36).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(36), CL_SSSMAIN(36))
   CP_SSSMAIN(36).CuVal = V
   CP_SSSMAIN(36).TpStr = AE_Format$(CP_SSSMAIN(36), CP_SSSMAIN(36).CuVal, 0, True)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_JDNLINNO(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   V = AE_NormData(CP_SSSMAIN(19), AE_Val3(CP_SSSMAIN(19), CStr(DBItem)))
   If CP_SSSMAIN(19).CuVal <> V Or CP_SSSMAIN(19).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(19).StatusC = Cn_Status6: CP_SSSMAIN(19).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(19).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(19).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(19).StatusC = Cn_Status6: CP_SSSMAIN(19).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(19).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(19), CL_SSSMAIN(19))
   CP_SSSMAIN(19).CuVal = V
   CP_SSSMAIN(19).TpStr = AE_Format$(CP_SSSMAIN(19), CP_SSSMAIN(19).CuVal, 0, True)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_MEIKBA(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   V = AE_NormData(CP_SSSMAIN(33), AE_Val3(CP_SSSMAIN(33), CStr(DBItem)))
   If CP_SSSMAIN(33).CuVal <> V Or CP_SSSMAIN(33).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(33).StatusC = Cn_Status6: CP_SSSMAIN(33).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(33).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(33).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(33).StatusC = Cn_Status6: CP_SSSMAIN(33).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(33).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(33), CL_SSSMAIN(33))
   CP_SSSMAIN(33).CuVal = V
   CP_SSSMAIN(33).TpStr = AE_Format$(CP_SSSMAIN(33), CP_SSSMAIN(33).CuVal, 0, True)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_MEIKBB(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   V = AE_NormData(CP_SSSMAIN(35), AE_Val3(CP_SSSMAIN(35), CStr(DBItem)))
   If CP_SSSMAIN(35).CuVal <> V Or CP_SSSMAIN(35).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(35).StatusC = Cn_Status6: CP_SSSMAIN(35).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(35).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(35).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(35).StatusC = Cn_Status6: CP_SSSMAIN(35).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(35).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(35), CL_SSSMAIN(35))
   CP_SSSMAIN(35).CuVal = V
   CP_SSSMAIN(35).TpStr = AE_Format$(CP_SSSMAIN(35), CP_SSSMAIN(35).CuVal, 0, True)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_MEIKBC(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   V = AE_NormData(CP_SSSMAIN(34), AE_Val3(CP_SSSMAIN(34), CStr(DBItem)))
   If CP_SSSMAIN(34).CuVal <> V Or CP_SSSMAIN(34).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(34).StatusC = Cn_Status6: CP_SSSMAIN(34).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(34).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(34).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(34).StatusC = Cn_Status6: CP_SSSMAIN(34).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(34).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(34), CL_SSSMAIN(34))
   CP_SSSMAIN(34).CuVal = V
   CP_SSSMAIN(34).TpStr = AE_Format$(CP_SSSMAIN(34), CP_SSSMAIN(34).CuVal, 0, True)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_NHSCD(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   V = AE_NormData(CP_SSSMAIN(24), AE_Val3(CP_SSSMAIN(24), CStr(DBItem)))
   If CP_SSSMAIN(24).CuVal <> V Or CP_SSSMAIN(24).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(24).StatusC = Cn_Status6: CP_SSSMAIN(24).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(24).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(24).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(24).StatusC = Cn_Status6: CP_SSSMAIN(24).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(24).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(24), CL_SSSMAIN(24))
   CP_SSSMAIN(24).CuVal = V
   CP_SSSMAIN(24).TpStr = AE_Format$(CP_SSSMAIN(24), CP_SSSMAIN(24).CuVal, 0, True)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_NXTKB(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   V = AE_NormData(CP_SSSMAIN(22), AE_Val3(CP_SSSMAIN(22), CStr(DBItem)))
   If CP_SSSMAIN(22).CuVal <> V Or CP_SSSMAIN(22).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(22).StatusC = Cn_Status6: CP_SSSMAIN(22).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(22).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(22).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(22).StatusC = Cn_Status6: CP_SSSMAIN(22).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(22).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(22), CL_SSSMAIN(22))
   CP_SSSMAIN(22).CuVal = V
   CP_SSSMAIN(22).TpStr = AE_Format$(CP_SSSMAIN(22), CP_SSSMAIN(22).CuVal, 0, True)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_TKNRPSKB(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   V = AE_NormData(CP_SSSMAIN(29), AE_Val3(CP_SSSMAIN(29), CStr(DBItem)))
   If CP_SSSMAIN(29).CuVal <> V Or CP_SSSMAIN(29).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(29).StatusC = Cn_Status6: CP_SSSMAIN(29).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(29).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(29).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(29).StatusC = Cn_Status6: CP_SSSMAIN(29).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(29).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(29), CL_SSSMAIN(29))
   CP_SSSMAIN(29).CuVal = V
   CP_SSSMAIN(29).TpStr = AE_Format$(CP_SSSMAIN(29), CP_SSSMAIN(29).CuVal, 0, True)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_TKNZRNKB(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   V = AE_NormData(CP_SSSMAIN(30), AE_Val3(CP_SSSMAIN(30), CStr(DBItem)))
   If CP_SSSMAIN(30).CuVal <> V Or CP_SSSMAIN(30).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(30).StatusC = Cn_Status6: CP_SSSMAIN(30).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(30).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(30).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(30).StatusC = Cn_Status6: CP_SSSMAIN(30).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(30).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(30), CL_SSSMAIN(30))
   CP_SSSMAIN(30).CuVal = V
   CP_SSSMAIN(30).TpStr = AE_Format$(CP_SSSMAIN(30), CP_SSSMAIN(30).CuVal, 0, True)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_TOKCD(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   V = AE_NormData(CP_SSSMAIN(23), AE_Val3(CP_SSSMAIN(23), CStr(DBItem)))
   If CP_SSSMAIN(23).CuVal <> V Or CP_SSSMAIN(23).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(23).StatusC = Cn_Status6: CP_SSSMAIN(23).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(23).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(23).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(23).StatusC = Cn_Status6: CP_SSSMAIN(23).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(23).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(23), CL_SSSMAIN(23))
   CP_SSSMAIN(23).CuVal = V
   CP_SSSMAIN(23).TpStr = AE_Format$(CP_SSSMAIN(23), CP_SSSMAIN(23).CuVal, 0, True)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_TOKRPSKB(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   V = AE_NormData(CP_SSSMAIN(31), AE_Val3(CP_SSSMAIN(31), CStr(DBItem)))
   If CP_SSSMAIN(31).CuVal <> V Or CP_SSSMAIN(31).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(31).StatusC = Cn_Status6: CP_SSSMAIN(31).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(31).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(31).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(31).StatusC = Cn_Status6: CP_SSSMAIN(31).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(31).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(31), CL_SSSMAIN(31))
   CP_SSSMAIN(31).CuVal = V
   CP_SSSMAIN(31).TpStr = AE_Format$(CP_SSSMAIN(31), CP_SSSMAIN(31).CuVal, 0, True)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_TOKSEICD(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   V = AE_NormData(CP_SSSMAIN(26), AE_Val3(CP_SSSMAIN(26), CStr(DBItem)))
   If CP_SSSMAIN(26).CuVal <> V Or CP_SSSMAIN(26).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(26).StatusC = Cn_Status6: CP_SSSMAIN(26).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(26).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(26).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(26).StatusC = Cn_Status6: CP_SSSMAIN(26).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(26).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(26), CL_SSSMAIN(26))
   CP_SSSMAIN(26).CuVal = V
   CP_SSSMAIN(26).TpStr = AE_Format$(CP_SSSMAIN(26), CP_SSSMAIN(26).CuVal, 0, True)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_TOKZCLKB(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   V = AE_NormData(CP_SSSMAIN(28), AE_Val3(CP_SSSMAIN(28), CStr(DBItem)))
   If CP_SSSMAIN(28).CuVal <> V Or CP_SSSMAIN(28).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(28).StatusC = Cn_Status6: CP_SSSMAIN(28).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(28).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(28).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(28).StatusC = Cn_Status6: CP_SSSMAIN(28).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(28).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(28), CL_SSSMAIN(28))
   CP_SSSMAIN(28).CuVal = V
   CP_SSSMAIN(28).TpStr = AE_Format$(CP_SSSMAIN(28), CP_SSSMAIN(28).CuVal, 0, True)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_TOKZEIKB(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   V = AE_NormData(CP_SSSMAIN(27), AE_Val3(CP_SSSMAIN(27), CStr(DBItem)))
   If CP_SSSMAIN(27).CuVal <> V Or CP_SSSMAIN(27).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(27).StatusC = Cn_Status6: CP_SSSMAIN(27).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(27).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(27).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(27).StatusC = Cn_Status6: CP_SSSMAIN(27).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(27).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(27), CL_SSSMAIN(27))
   CP_SSSMAIN(27).CuVal = V
   CP_SSSMAIN(27).TpStr = AE_Format$(CP_SSSMAIN(27), CP_SSSMAIN(27).CuVal, 0, True)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_TOKZRNKB(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   V = AE_NormData(CP_SSSMAIN(32), AE_Val3(CP_SSSMAIN(32), CStr(DBItem)))
   If CP_SSSMAIN(32).CuVal <> V Or CP_SSSMAIN(32).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(32).StatusC = Cn_Status6: CP_SSSMAIN(32).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(32).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(32).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(32).StatusC = Cn_Status6: CP_SSSMAIN(32).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(32).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(32), CL_SSSMAIN(32))
   CP_SSSMAIN(32).CuVal = V
   CP_SSSMAIN(32).TpStr = AE_Format$(CP_SSSMAIN(32), CP_SSSMAIN(32).CuVal, 0, True)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_TUKKB(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   V = AE_NormData(CP_SSSMAIN(37), AE_Val3(CP_SSSMAIN(37), CStr(DBItem)))
   If CP_SSSMAIN(37).CuVal <> V Or CP_SSSMAIN(37).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(37).StatusC = Cn_Status6: CP_SSSMAIN(37).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(37).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(37).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(37).StatusC = Cn_Status6: CP_SSSMAIN(37).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(37).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(37), CL_SSSMAIN(37))
   CP_SSSMAIN(37).CuVal = V
   CP_SSSMAIN(37).TpStr = AE_Format$(CP_SSSMAIN(37), CP_SSSMAIN(37).CuVal, 0, True)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_UDNCM(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   V = AE_NormData(CP_SSSMAIN(69), AE_Val3(CP_SSSMAIN(69), CStr(DBItem)))
   If CP_SSSMAIN(69).CuVal <> V Or CP_SSSMAIN(69).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(69).StatusC = Cn_Status6: CP_SSSMAIN(69).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(69).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(69).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(69).StatusC = Cn_Status6: CP_SSSMAIN(69).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(69).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(69), CL_SSSMAIN(69))
   CP_SSSMAIN(69).CuVal = V
   CP_SSSMAIN(69).TpStr = AE_Format$(CP_SSSMAIN(69), CP_SSSMAIN(69).CuVal, 0, True)
   Call AE_CtSet(PP_SSSMAIN, 69, CP_SSSMAIN(69).TpStr, CP_SSSMAIN(69).TypeA, False)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_SBAFRUKN(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   V = AE_NormData(CP_SSSMAIN(73), AE_Val3(CP_SSSMAIN(73), CStr(DBItem)))
   If CP_SSSMAIN(73).CuVal <> V Or CP_SSSMAIN(73).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(73).StatusC = Cn_Status6: CP_SSSMAIN(73).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(73).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(73).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(73).StatusC = Cn_Status6: CP_SSSMAIN(73).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(73).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(73), CL_SSSMAIN(73))
   CP_SSSMAIN(73).CuVal = V
   CP_SSSMAIN(73).TpStr = AE_Format$(CP_SSSMAIN(73), CP_SSSMAIN(73).CuVal, 0, True)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_SBAURIKN(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   V = AE_NormData(CP_SSSMAIN(70), AE_Val3(CP_SSSMAIN(70), CStr(DBItem)))
   If CP_SSSMAIN(70).CuVal <> V Or CP_SSSMAIN(70).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(70).StatusC = Cn_Status6: CP_SSSMAIN(70).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(70).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(70).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(70).StatusC = Cn_Status6: CP_SSSMAIN(70).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(70).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(70), CL_SSSMAIN(70))
   CP_SSSMAIN(70).CuVal = V
   CP_SSSMAIN(70).TpStr = AE_Format$(CP_SSSMAIN(70), CP_SSSMAIN(70).CuVal, 0, True)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_SBAUZEKN(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   V = AE_NormData(CP_SSSMAIN(71), AE_Val3(CP_SSSMAIN(71), CStr(DBItem)))
   If CP_SSSMAIN(71).CuVal <> V Or CP_SSSMAIN(71).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(71).StatusC = Cn_Status6: CP_SSSMAIN(71).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(71).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(71).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(71).StatusC = Cn_Status6: CP_SSSMAIN(71).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(71).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(71), CL_SSSMAIN(71))
   CP_SSSMAIN(71).CuVal = V
   CP_SSSMAIN(71).TpStr = AE_Format$(CP_SSSMAIN(71), CP_SSSMAIN(71).CuVal, 0, True)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Sub DP_SSSMAIN_SBAUZKKN(ByVal pm_De As Integer, DBItem) 'Generated.
Dim V As Variant
Dim wk_SaveMask As Boolean
   wk_SaveMask = PP_SSSMAIN.MaskMode
   PP_SSSMAIN.MaskMode = True
   V = AE_NormData(CP_SSSMAIN(72), AE_Val3(CP_SSSMAIN(72), CStr(DBItem)))
   If CP_SSSMAIN(72).CuVal <> V Or CP_SSSMAIN(72).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(72).StatusC = Cn_Status6: CP_SSSMAIN(72).StatusF = Cn_Status6
   ElseIf (IsNull(CP_SSSMAIN(72).CuVal) Xor IsNull(V)) Or CP_SSSMAIN(72).StatusC <> Cn_Status8 Then
      CP_SSSMAIN(72).StatusC = Cn_Status6: CP_SSSMAIN(72).StatusF = Cn_Status6
   End If
   CP_SSSMAIN(72).CheckRtnCode = 0
   Call AE_ColorSub(PP_SSSMAIN, CP_SSSMAIN(72), CL_SSSMAIN(72))
   CP_SSSMAIN(72).CuVal = V
   CP_SSSMAIN(72).TpStr = AE_Format$(CP_SSSMAIN(72), CP_SSSMAIN(72).CuVal, 0, True)
   PP_SSSMAIN.MaskMode = wk_SaveMask
End Sub

Function RD_SSSMAIN_HINCD(ByVal De As Integer) 'Generated.
Dim st_Work$
Dim wk_PxBase As Integer
   wk_PxBase = 31 * De
   If IsNull(CP_SSSMAIN(38 + wk_PxBase).CuVal) Then
      RD_SSSMAIN_HINCD = Space$(8)
   Else
      st_Work$ = CStr(CP_SSSMAIN(38 + wk_PxBase).CuVal)
      If LenWid(st_Work$) < 8 Then
         RD_SSSMAIN_HINCD = CStr(CP_SSSMAIN(38 + wk_PxBase).CuVal) & Space$(8 - LenWid(st_Work$))
      Else
         RD_SSSMAIN_HINCD = CStr(CP_SSSMAIN(38 + wk_PxBase).CuVal)
      End If
   End If
End Function

Function RD_SSSMAIN_HINNMA(ByVal De As Integer) 'Generated.
Dim st_Work$
Dim wk_PxBase As Integer
   wk_PxBase = 31 * De
   If IsNull(CP_SSSMAIN(40 + wk_PxBase).CuVal) Then
      RD_SSSMAIN_HINNMA = Space$(30)
   Else
      st_Work$ = CStr(CP_SSSMAIN(40 + wk_PxBase).CuVal)
      If LenWid(st_Work$) < 30 Then
         RD_SSSMAIN_HINNMA = CStr(CP_SSSMAIN(40 + wk_PxBase).CuVal) & Space$(30 - LenWid(st_Work$))
      Else
         RD_SSSMAIN_HINNMA = CStr(CP_SSSMAIN(40 + wk_PxBase).CuVal)
      End If
   End If
End Function

Function RD_SSSMAIN_HINNMB(ByVal De As Integer) 'Generated.
Dim st_Work$
Dim wk_PxBase As Integer
   wk_PxBase = 31 * De
   If IsNull(CP_SSSMAIN(41 + wk_PxBase).CuVal) Then
      RD_SSSMAIN_HINNMB = Space$(30)
   Else
      st_Work$ = CStr(CP_SSSMAIN(41 + wk_PxBase).CuVal)
      If LenWid(st_Work$) < 30 Then
         RD_SSSMAIN_HINNMB = CStr(CP_SSSMAIN(41 + wk_PxBase).CuVal) & Space$(30 - LenWid(st_Work$))
      Else
         RD_SSSMAIN_HINNMB = CStr(CP_SSSMAIN(41 + wk_PxBase).CuVal)
      End If
   End If
End Function

Function RD_SSSMAIN_SBNNO(ByVal De As Integer) 'Generated.
Dim st_Work$
Dim wk_PxBase As Integer
   wk_PxBase = 31 * De
   If IsNull(CP_SSSMAIN(39 + wk_PxBase).CuVal) Then
      RD_SSSMAIN_SBNNO = Space$(10)
   Else
      st_Work$ = CStr(CP_SSSMAIN(39 + wk_PxBase).CuVal)
      If LenWid(st_Work$) < 10 Then
         RD_SSSMAIN_SBNNO = CStr(CP_SSSMAIN(39 + wk_PxBase).CuVal) & Space$(10 - LenWid(st_Work$))
      Else
         RD_SSSMAIN_SBNNO = CStr(CP_SSSMAIN(39 + wk_PxBase).CuVal)
      End If
   End If
End Function

Function RD_SSSMAIN_UNTNM(ByVal De As Integer) 'Generated.
Dim st_Work$
Dim wk_PxBase As Integer
   wk_PxBase = 31 * De
   If IsNull(CP_SSSMAIN(43 + wk_PxBase).CuVal) Then
      RD_SSSMAIN_UNTNM = Space$(4)
   Else
      st_Work$ = CStr(CP_SSSMAIN(43 + wk_PxBase).CuVal)
      If LenWid(st_Work$) < 4 Then
         RD_SSSMAIN_UNTNM = CStr(CP_SSSMAIN(43 + wk_PxBase).CuVal) & Space$(4 - LenWid(st_Work$))
      Else
         RD_SSSMAIN_UNTNM = CStr(CP_SSSMAIN(43 + wk_PxBase).CuVal)
      End If
   End If
End Function

Function RD_SSSMAIN_URISU(ByVal De As Integer) 'Generated.
Dim st_Work$
Dim wk_PxBase As Integer
   wk_PxBase = 31 * De
   If IsEmpty(CP_SSSMAIN(42 + wk_PxBase).CuVal) Then
      RD_SSSMAIN_URISU = 0@
   ElseIf IsNull(CP_SSSMAIN(42 + wk_PxBase).CuVal) Then
      RD_SSSMAIN_URISU = 0@
   Else
      RD_SSSMAIN_URISU = CP_SSSMAIN(42 + wk_PxBase).CuVal
   End If
End Function

Function RD_SSSMAIN_CASSU(ByVal De As Integer) 'Generated.
Dim st_Work$
Dim wk_PxBase As Integer
   wk_PxBase = 31 * De
   If IsEmpty(CP_SSSMAIN(55 + wk_PxBase).CuVal) Then
      RD_SSSMAIN_CASSU = 0@
   ElseIf IsNull(CP_SSSMAIN(55 + wk_PxBase).CuVal) Then
      RD_SSSMAIN_CASSU = 0@
   Else
      RD_SSSMAIN_CASSU = CP_SSSMAIN(55 + wk_PxBase).CuVal
   End If
End Function

Function RD_SSSMAIN_ERRKBA(ByVal De As Integer) 'Generated.
Dim st_Work$
Dim wk_PxBase As Integer
   wk_PxBase = 31 * De
   If IsNull(CP_SSSMAIN(45 + wk_PxBase).CuVal) Then
      RD_SSSMAIN_ERRKBA = Space$(1)
   Else
      st_Work$ = CStr(CP_SSSMAIN(45 + wk_PxBase).CuVal)
      If LenWid(st_Work$) < 1 Then
         RD_SSSMAIN_ERRKBA = CStr(CP_SSSMAIN(45 + wk_PxBase).CuVal) & Space$(1 - LenWid(st_Work$))
      Else
         RD_SSSMAIN_ERRKBA = CStr(CP_SSSMAIN(45 + wk_PxBase).CuVal)
      End If
   End If
End Function

Function RD_SSSMAIN_FURIKN(ByVal De As Integer) 'Generated.
Dim st_Work$
Dim wk_PxBase As Integer
   wk_PxBase = 31 * De
   If IsEmpty(CP_SSSMAIN(64 + wk_PxBase).CuVal) Then
      RD_SSSMAIN_FURIKN = 0@
   ElseIf IsNull(CP_SSSMAIN(64 + wk_PxBase).CuVal) Then
      RD_SSSMAIN_FURIKN = 0@
   Else
      RD_SSSMAIN_FURIKN = CP_SSSMAIN(64 + wk_PxBase).CuVal
   End If
End Function

Function RD_SSSMAIN_FURITK(ByVal De As Integer) 'Generated.
Dim st_Work$
Dim wk_PxBase As Integer
   wk_PxBase = 31 * De
   If IsEmpty(CP_SSSMAIN(63 + wk_PxBase).CuVal) Then
      RD_SSSMAIN_FURITK = 0@
   ElseIf IsNull(CP_SSSMAIN(63 + wk_PxBase).CuVal) Then
      RD_SSSMAIN_FURITK = 0@
   Else
      RD_SSSMAIN_FURITK = CP_SSSMAIN(63 + wk_PxBase).CuVal
   End If
End Function

Function RD_SSSMAIN_GNKKN(ByVal De As Integer) 'Generated.
Dim st_Work$
Dim wk_PxBase As Integer
   wk_PxBase = 31 * De
   If IsEmpty(CP_SSSMAIN(66 + wk_PxBase).CuVal) Then
      RD_SSSMAIN_GNKKN = 0@
   ElseIf IsNull(CP_SSSMAIN(66 + wk_PxBase).CuVal) Then
      RD_SSSMAIN_GNKKN = 0@
   Else
      RD_SSSMAIN_GNKKN = CP_SSSMAIN(66 + wk_PxBase).CuVal
   End If
End Function

Function RD_SSSMAIN_GNKTK(ByVal De As Integer) 'Generated.
Dim st_Work$
Dim wk_PxBase As Integer
   wk_PxBase = 31 * De
   If IsEmpty(CP_SSSMAIN(65 + wk_PxBase).CuVal) Then
      RD_SSSMAIN_GNKTK = 0@
   ElseIf IsNull(CP_SSSMAIN(65 + wk_PxBase).CuVal) Then
      RD_SSSMAIN_GNKTK = 0@
   Else
      RD_SSSMAIN_GNKTK = CP_SSSMAIN(65 + wk_PxBase).CuVal
   End If
End Function

Function RD_SSSMAIN_HINID(ByVal De As Integer) 'Generated.
Dim st_Work$
Dim wk_PxBase As Integer
   wk_PxBase = 31 * De
   If IsNull(CP_SSSMAIN(50 + wk_PxBase).CuVal) Then
      RD_SSSMAIN_HINID = Space$(2)
   Else
      st_Work$ = CStr(CP_SSSMAIN(50 + wk_PxBase).CuVal)
      If LenWid(st_Work$) < 2 Then
         RD_SSSMAIN_HINID = CStr(CP_SSSMAIN(50 + wk_PxBase).CuVal) & Space$(2 - LenWid(st_Work$))
      Else
         RD_SSSMAIN_HINID = CStr(CP_SSSMAIN(50 + wk_PxBase).CuVal)
      End If
   End If
End Function

Function RD_SSSMAIN_HINZEIKB(ByVal De As Integer) 'Generated.
Dim st_Work$
Dim wk_PxBase As Integer
   wk_PxBase = 31 * De
   If IsNull(CP_SSSMAIN(52 + wk_PxBase).CuVal) Then
      RD_SSSMAIN_HINZEIKB = Space$(1)
   Else
      st_Work$ = CStr(CP_SSSMAIN(52 + wk_PxBase).CuVal)
      If LenWid(st_Work$) < 1 Then
         RD_SSSMAIN_HINZEIKB = CStr(CP_SSSMAIN(52 + wk_PxBase).CuVal) & Space$(1 - LenWid(st_Work$))
      Else
         RD_SSSMAIN_HINZEIKB = CStr(CP_SSSMAIN(52 + wk_PxBase).CuVal)
      End If
   End If
End Function

Function RD_SSSMAIN_LINNO(ByVal De As Integer) 'Generated.
Dim st_Work$
Dim wk_PxBase As Integer
   wk_PxBase = 31 * De
   If IsNull(CP_SSSMAIN(46 + wk_PxBase).CuVal) Then
      RD_SSSMAIN_LINNO = Space$(3)
   Else
      st_Work$ = CStr(CP_SSSMAIN(46 + wk_PxBase).CuVal)
      If LenWid(st_Work$) < 3 Then
         RD_SSSMAIN_LINNO = CStr(CP_SSSMAIN(46 + wk_PxBase).CuVal) & Space$(3 - LenWid(st_Work$))
      Else
         RD_SSSMAIN_LINNO = CStr(CP_SSSMAIN(46 + wk_PxBase).CuVal)
      End If
   End If
End Function

Function RD_SSSMAIN_RECNO(ByVal De As Integer) 'Generated.
Dim st_Work$
Dim wk_PxBase As Integer
   wk_PxBase = 31 * De
   If IsNull(CP_SSSMAIN(44 + wk_PxBase).CuVal) Then
      RD_SSSMAIN_RECNO = Space$(10)
   Else
      st_Work$ = CStr(CP_SSSMAIN(44 + wk_PxBase).CuVal)
      If LenWid(st_Work$) < 10 Then
         RD_SSSMAIN_RECNO = CStr(CP_SSSMAIN(44 + wk_PxBase).CuVal) & Space$(10 - LenWid(st_Work$))
      Else
         RD_SSSMAIN_RECNO = CStr(CP_SSSMAIN(44 + wk_PxBase).CuVal)
      End If
   End If
End Function

Function RD_SSSMAIN_SBNSU(ByVal De As Integer) 'Generated.
Dim st_Work$
Dim wk_PxBase As Integer
   wk_PxBase = 31 * De
   If IsEmpty(CP_SSSMAIN(57 + wk_PxBase).CuVal) Then
      RD_SSSMAIN_SBNSU = 0@
   ElseIf IsNull(CP_SSSMAIN(57 + wk_PxBase).CuVal) Then
      RD_SSSMAIN_SBNSU = 0@
   Else
      RD_SSSMAIN_SBNSU = CP_SSSMAIN(57 + wk_PxBase).CuVal
   End If
End Function

Function RD_SSSMAIN_SERIKB(ByVal De As Integer) 'Generated.
Dim st_Work$
Dim wk_PxBase As Integer
   wk_PxBase = 31 * De
   If IsNull(CP_SSSMAIN(49 + wk_PxBase).CuVal) Then
      RD_SSSMAIN_SERIKB = Space$(1)
   Else
      st_Work$ = CStr(CP_SSSMAIN(49 + wk_PxBase).CuVal)
      If LenWid(st_Work$) < 1 Then
         RD_SSSMAIN_SERIKB = CStr(CP_SSSMAIN(49 + wk_PxBase).CuVal) & Space$(1 - LenWid(st_Work$))
      Else
         RD_SSSMAIN_SERIKB = CStr(CP_SSSMAIN(49 + wk_PxBase).CuVal)
      End If
   End If
End Function

Function RD_SSSMAIN_SIKKN(ByVal De As Integer) 'Generated.
Dim st_Work$
Dim wk_PxBase As Integer
   wk_PxBase = 31 * De
   If IsEmpty(CP_SSSMAIN(68 + wk_PxBase).CuVal) Then
      RD_SSSMAIN_SIKKN = 0@
   ElseIf IsNull(CP_SSSMAIN(68 + wk_PxBase).CuVal) Then
      RD_SSSMAIN_SIKKN = 0@
   Else
      RD_SSSMAIN_SIKKN = CP_SSSMAIN(68 + wk_PxBase).CuVal
   End If
End Function

Function RD_SSSMAIN_SIKTK(ByVal De As Integer) 'Generated.
Dim st_Work$
Dim wk_PxBase As Integer
   wk_PxBase = 31 * De
   If IsEmpty(CP_SSSMAIN(67 + wk_PxBase).CuVal) Then
      RD_SSSMAIN_SIKTK = 0@
   ElseIf IsNull(CP_SSSMAIN(67 + wk_PxBase).CuVal) Then
      RD_SSSMAIN_SIKTK = 0@
   Else
      RD_SSSMAIN_SIKTK = CP_SSSMAIN(67 + wk_PxBase).CuVal
   End If
End Function

Function RD_SSSMAIN_SURYO(ByVal De As Integer) 'Generated.
Dim st_Work$
Dim wk_PxBase As Integer
   wk_PxBase = 31 * De
   If IsEmpty(CP_SSSMAIN(54 + wk_PxBase).CuVal) Then
      RD_SSSMAIN_SURYO = 0@
   ElseIf IsNull(CP_SSSMAIN(54 + wk_PxBase).CuVal) Then
      RD_SSSMAIN_SURYO = 0@
   Else
      RD_SSSMAIN_SURYO = CP_SSSMAIN(54 + wk_PxBase).CuVal
   End If
End Function

Function RD_SSSMAIN_UDNDKBID(ByVal De As Integer) 'Generated.
Dim st_Work$
Dim wk_PxBase As Integer
   wk_PxBase = 31 * De
   If IsNull(CP_SSSMAIN(48 + wk_PxBase).CuVal) Then
      RD_SSSMAIN_UDNDKBID = Space$(2)
   Else
      st_Work$ = CStr(CP_SSSMAIN(48 + wk_PxBase).CuVal)
      If LenWid(st_Work$) < 2 Then
         RD_SSSMAIN_UDNDKBID = CStr(CP_SSSMAIN(48 + wk_PxBase).CuVal) & Space$(2 - LenWid(st_Work$))
      Else
         RD_SSSMAIN_UDNDKBID = CStr(CP_SSSMAIN(48 + wk_PxBase).CuVal)
      End If
   End If
End Function

Function RD_SSSMAIN_UDNDKBNM(ByVal De As Integer) 'Generated.
Dim st_Work$
Dim wk_PxBase As Integer
   wk_PxBase = 31 * De
   If IsNull(CP_SSSMAIN(51 + wk_PxBase).CuVal) Then
      RD_SSSMAIN_UDNDKBNM = Space$(6)
   Else
      st_Work$ = CStr(CP_SSSMAIN(51 + wk_PxBase).CuVal)
      If LenWid(st_Work$) < 6 Then
         RD_SSSMAIN_UDNDKBNM = CStr(CP_SSSMAIN(51 + wk_PxBase).CuVal) & Space$(6 - LenWid(st_Work$))
      Else
         RD_SSSMAIN_UDNDKBNM = CStr(CP_SSSMAIN(51 + wk_PxBase).CuVal)
      End If
   End If
End Function

Function RD_SSSMAIN_UPDID(ByVal De As Integer) 'Generated.
Dim st_Work$
Dim wk_PxBase As Integer
   wk_PxBase = 31 * De
   If IsNull(CP_SSSMAIN(47 + wk_PxBase).CuVal) Then
      RD_SSSMAIN_UPDID = Space$(2)
   Else
      st_Work$ = CStr(CP_SSSMAIN(47 + wk_PxBase).CuVal)
      If LenWid(st_Work$) < 2 Then
         RD_SSSMAIN_UPDID = CStr(CP_SSSMAIN(47 + wk_PxBase).CuVal) & Space$(2 - LenWid(st_Work$))
      Else
         RD_SSSMAIN_UPDID = CStr(CP_SSSMAIN(47 + wk_PxBase).CuVal)
      End If
   End If
End Function

Function RD_SSSMAIN_URIKN(ByVal De As Integer) 'Generated.
Dim st_Work$
Dim wk_PxBase As Integer
   wk_PxBase = 31 * De
   If IsEmpty(CP_SSSMAIN(58 + wk_PxBase).CuVal) Then
      RD_SSSMAIN_URIKN = 0@
   ElseIf IsNull(CP_SSSMAIN(58 + wk_PxBase).CuVal) Then
      RD_SSSMAIN_URIKN = 0@
   Else
      RD_SSSMAIN_URIKN = CP_SSSMAIN(58 + wk_PxBase).CuVal
   End If
End Function

Function RD_SSSMAIN_URITK(ByVal De As Integer) 'Generated.
Dim st_Work$
Dim wk_PxBase As Integer
   wk_PxBase = 31 * De
   If IsEmpty(CP_SSSMAIN(56 + wk_PxBase).CuVal) Then
      RD_SSSMAIN_URITK = 0@
   ElseIf IsNull(CP_SSSMAIN(56 + wk_PxBase).CuVal) Then
      RD_SSSMAIN_URITK = 0@
   Else
      RD_SSSMAIN_URITK = CP_SSSMAIN(56 + wk_PxBase).CuVal
   End If
End Function

Function RD_SSSMAIN_UZEKN(ByVal De As Integer) 'Generated.
Dim st_Work$
Dim wk_PxBase As Integer
   wk_PxBase = 31 * De
   If IsEmpty(CP_SSSMAIN(59 + wk_PxBase).CuVal) Then
      RD_SSSMAIN_UZEKN = 0@
   ElseIf IsNull(CP_SSSMAIN(59 + wk_PxBase).CuVal) Then
      RD_SSSMAIN_UZEKN = 0@
   Else
      RD_SSSMAIN_UZEKN = CP_SSSMAIN(59 + wk_PxBase).CuVal
   End If
End Function

Function RD_SSSMAIN_ZEIRNKKB(ByVal De As Integer) 'Generated.
Dim st_Work$
Dim wk_PxBase As Integer
   wk_PxBase = 31 * De
   If IsNull(CP_SSSMAIN(53 + wk_PxBase).CuVal) Then
      RD_SSSMAIN_ZEIRNKKB = Space$(1)
   Else
      st_Work$ = CStr(CP_SSSMAIN(53 + wk_PxBase).CuVal)
      If LenWid(st_Work$) < 1 Then
         RD_SSSMAIN_ZEIRNKKB = CStr(CP_SSSMAIN(53 + wk_PxBase).CuVal) & Space$(1 - LenWid(st_Work$))
      Else
         RD_SSSMAIN_ZEIRNKKB = CStr(CP_SSSMAIN(53 + wk_PxBase).CuVal)
      End If
   End If
End Function

'2014/01/16 START INS RS)Ishida 消費税法改正対応
Function RD_SSSMAIN_ZEIRT(ByVal De As Integer) 'Generated.
    RD_SSSMAIN_ZEIRT = DB_JDNTRA.ZEIRT
End Function
'2014/01/16 E.N.D INS RS)Ishida 消費税法改正対応

Function RD_SSSMAIN_ZKMURIKN(ByVal De As Integer) 'Generated.
Dim st_Work$
Dim wk_PxBase As Integer
   wk_PxBase = 31 * De
   If IsEmpty(CP_SSSMAIN(61 + wk_PxBase).CuVal) Then
      RD_SSSMAIN_ZKMURIKN = 0@
   ElseIf IsNull(CP_SSSMAIN(61 + wk_PxBase).CuVal) Then
      RD_SSSMAIN_ZKMURIKN = 0@
   Else
      RD_SSSMAIN_ZKMURIKN = CP_SSSMAIN(61 + wk_PxBase).CuVal
   End If
End Function

Function RD_SSSMAIN_ZKMUZEKN(ByVal De As Integer) 'Generated.
Dim st_Work$
Dim wk_PxBase As Integer
   wk_PxBase = 31 * De
   If IsEmpty(CP_SSSMAIN(62 + wk_PxBase).CuVal) Then
      RD_SSSMAIN_ZKMUZEKN = 0@
   ElseIf IsNull(CP_SSSMAIN(62 + wk_PxBase).CuVal) Then
      RD_SSSMAIN_ZKMUZEKN = 0@
   Else
      RD_SSSMAIN_ZKMUZEKN = CP_SSSMAIN(62 + wk_PxBase).CuVal
   End If
End Function

Function RD_SSSMAIN_ZNKURIKN(ByVal De As Integer) 'Generated.
Dim st_Work$
Dim wk_PxBase As Integer
   wk_PxBase = 31 * De
   If IsEmpty(CP_SSSMAIN(60 + wk_PxBase).CuVal) Then
      RD_SSSMAIN_ZNKURIKN = 0@
   ElseIf IsNull(CP_SSSMAIN(60 + wk_PxBase).CuVal) Then
      RD_SSSMAIN_ZNKURIKN = 0@
   Else
      RD_SSSMAIN_ZNKURIKN = CP_SSSMAIN(60 + wk_PxBase).CuVal
   End If
End Function

Function RD_SSSMAIN_HENRSNCD(ByVal De As Integer) 'Generated.
Dim st_Work$
   If IsNull(CP_SSSMAIN(4).CuVal) Then
      RD_SSSMAIN_HENRSNCD = Space$(2)
   Else
      st_Work$ = CStr(CP_SSSMAIN(4).CuVal)
      If LenWid(st_Work$) < 2 Then
         RD_SSSMAIN_HENRSNCD = CStr(CP_SSSMAIN(4).CuVal) & Space$(2 - LenWid(st_Work$))
      Else
         RD_SSSMAIN_HENRSNCD = CStr(CP_SSSMAIN(4).CuVal)
      End If
   End If
End Function

Function RD_SSSMAIN_HENRSNNM(ByVal De As Integer) 'Generated.
Dim st_Work$
   If IsNull(CP_SSSMAIN(5).CuVal) Then
      RD_SSSMAIN_HENRSNNM = Space$(20)
   Else
      st_Work$ = CStr(CP_SSSMAIN(5).CuVal)
      If LenWid(st_Work$) < 20 Then
         RD_SSSMAIN_HENRSNNM = CStr(CP_SSSMAIN(5).CuVal) & Space$(20 - LenWid(st_Work$))
      Else
         RD_SSSMAIN_HENRSNNM = CStr(CP_SSSMAIN(5).CuVal)
      End If
   End If
End Function

Function RD_SSSMAIN_HENSTTCD(ByVal De As Integer) 'Generated.
Dim st_Work$
   If IsNull(CP_SSSMAIN(6).CuVal) Then
      RD_SSSMAIN_HENSTTCD = Space$(2)
   Else
      st_Work$ = CStr(CP_SSSMAIN(6).CuVal)
      If LenWid(st_Work$) < 2 Then
         RD_SSSMAIN_HENSTTCD = CStr(CP_SSSMAIN(6).CuVal) & Space$(2 - LenWid(st_Work$))
      Else
         RD_SSSMAIN_HENSTTCD = CStr(CP_SSSMAIN(6).CuVal)
      End If
   End If
End Function

Function RD_SSSMAIN_HENSTTNM(ByVal De As Integer) 'Generated.
Dim st_Work$
   If IsNull(CP_SSSMAIN(7).CuVal) Then
      RD_SSSMAIN_HENSTTNM = Space$(20)
   Else
      st_Work$ = CStr(CP_SSSMAIN(7).CuVal)
      If LenWid(st_Work$) < 20 Then
         RD_SSSMAIN_HENSTTNM = CStr(CP_SSSMAIN(7).CuVal) & Space$(20 - LenWid(st_Work$))
      Else
         RD_SSSMAIN_HENSTTNM = CStr(CP_SSSMAIN(7).CuVal)
      End If
   End If
End Function

Function RD_SSSMAIN_JDNDT(ByVal De As Integer) 'Generated.
Dim st_Work$
   If IsNull(CP_SSSMAIN(12).CuVal) Then
      RD_SSSMAIN_JDNDT = Space$(8)
   ElseIf Not IsDate(CP_SSSMAIN(12).CuVal) Then
      RD_SSSMAIN_JDNDT = Space$(8)
   Else
      RD_SSSMAIN_JDNDT = Format$(CP_SSSMAIN(12).CuVal, "YYYYMMDD")
   End If
End Function

Function RD_SSSMAIN_JDNNO(ByVal De As Integer) 'Generated.
Dim st_Work$
   If IsNull(CP_SSSMAIN(2).CuVal) Then
      RD_SSSMAIN_JDNNO = Space$(8)
   Else
      st_Work$ = CStr(CP_SSSMAIN(2).CuVal)
      If LenWid(st_Work$) < 8 Then
         RD_SSSMAIN_JDNNO = CStr(CP_SSSMAIN(2).CuVal) & Space$(8 - LenWid(st_Work$))
      Else
         RD_SSSMAIN_JDNNO = CStr(CP_SSSMAIN(2).CuVal)
      End If
   End If
End Function

Function RD_SSSMAIN_NHSRN(ByVal De As Integer) 'Generated.
Dim st_Work$
   If IsNull(CP_SSSMAIN(15).CuVal) Then
      RD_SSSMAIN_NHSRN = Space$(40)
   Else
      st_Work$ = CStr(CP_SSSMAIN(15).CuVal)
      If LenWid(st_Work$) < 40 Then
         RD_SSSMAIN_NHSRN = CStr(CP_SSSMAIN(15).CuVal) & Space$(40 - LenWid(st_Work$))
      Else
         RD_SSSMAIN_NHSRN = CStr(CP_SSSMAIN(15).CuVal)
      End If
   End If
End Function

Function RD_SSSMAIN_ODNDT(ByVal De As Integer) 'Generated.
Dim st_Work$
   If IsNull(CP_SSSMAIN(13).CuVal) Then
      RD_SSSMAIN_ODNDT = Space$(8)
   ElseIf Not IsDate(CP_SSSMAIN(13).CuVal) Then
      RD_SSSMAIN_ODNDT = Space$(8)
   Else
      RD_SSSMAIN_ODNDT = Format$(CP_SSSMAIN(13).CuVal, "YYYYMMDD")
   End If
End Function

Function RD_SSSMAIN_OPEID(ByVal De As Integer) 'Generated.
Dim st_Work$
   If IsNull(CP_SSSMAIN(16).CuVal) Then
      RD_SSSMAIN_OPEID = Space$(6)
   Else
      st_Work$ = CStr(CP_SSSMAIN(16).CuVal)
      If LenWid(st_Work$) < 6 Then
         RD_SSSMAIN_OPEID = CStr(CP_SSSMAIN(16).CuVal) & Space$(6 - LenWid(st_Work$))
      Else
         RD_SSSMAIN_OPEID = CStr(CP_SSSMAIN(16).CuVal)
      End If
   End If
End Function

Function RD_SSSMAIN_OPENM(ByVal De As Integer) 'Generated.
Dim st_Work$
   If IsNull(CP_SSSMAIN(17).CuVal) Then
      RD_SSSMAIN_OPENM = Space$(20)
   Else
      st_Work$ = CStr(CP_SSSMAIN(17).CuVal)
      If LenWid(st_Work$) < 20 Then
         RD_SSSMAIN_OPENM = CStr(CP_SSSMAIN(17).CuVal) & Space$(20 - LenWid(st_Work$))
      Else
         RD_SSSMAIN_OPENM = CStr(CP_SSSMAIN(17).CuVal)
      End If
   End If
End Function

Function RD_SSSMAIN_OUTSOUCD(ByVal De As Integer) 'Generated.
Dim st_Work$
   If IsNull(CP_SSSMAIN(8).CuVal) Then
      RD_SSSMAIN_OUTSOUCD = Space$(3)
   Else
      st_Work$ = CStr(CP_SSSMAIN(8).CuVal)
      If LenWid(st_Work$) < 3 Then
         RD_SSSMAIN_OUTSOUCD = Space$(3 - LenWid(st_Work$)) & CStr(CP_SSSMAIN(8).CuVal)
      Else
         RD_SSSMAIN_OUTSOUCD = CStr(CP_SSSMAIN(8).CuVal)
      End If
   End If
End Function

Function RD_SSSMAIN_OUTSOUNM(ByVal De As Integer) 'Generated.
Dim st_Work$
   If IsNull(CP_SSSMAIN(9).CuVal) Then
      RD_SSSMAIN_OUTSOUNM = Space$(20)
   Else
      st_Work$ = CStr(CP_SSSMAIN(9).CuVal)
      If LenWid(st_Work$) < 20 Then
         RD_SSSMAIN_OUTSOUNM = CStr(CP_SSSMAIN(9).CuVal) & Space$(20 - LenWid(st_Work$))
      Else
         RD_SSSMAIN_OUTSOUNM = CStr(CP_SSSMAIN(9).CuVal)
      End If
   End If
End Function

Function RD_SSSMAIN_SOUCD(ByVal De As Integer) 'Generated.
Dim st_Work$
   If IsNull(CP_SSSMAIN(10).CuVal) Then
      RD_SSSMAIN_SOUCD = Space$(3)
   Else
      st_Work$ = CStr(CP_SSSMAIN(10).CuVal)
      If LenWid(st_Work$) < 3 Then
         RD_SSSMAIN_SOUCD = Space$(3 - LenWid(st_Work$)) & CStr(CP_SSSMAIN(10).CuVal)
      Else
         RD_SSSMAIN_SOUCD = CStr(CP_SSSMAIN(10).CuVal)
      End If
   End If
End Function

Function RD_SSSMAIN_SOUNM(ByVal De As Integer) 'Generated.
Dim st_Work$
   If IsNull(CP_SSSMAIN(11).CuVal) Then
      RD_SSSMAIN_SOUNM = Space$(20)
   Else
      st_Work$ = CStr(CP_SSSMAIN(11).CuVal)
      If LenWid(st_Work$) < 20 Then
         RD_SSSMAIN_SOUNM = CStr(CP_SSSMAIN(11).CuVal) & Space$(20 - LenWid(st_Work$))
      Else
         RD_SSSMAIN_SOUNM = CStr(CP_SSSMAIN(11).CuVal)
      End If
   End If
End Function

Function RD_SSSMAIN_SRANO(ByVal De As Integer) 'Generated.
Dim st_Work$
   If IsNull(CP_SSSMAIN(0).CuVal) Then
      RD_SSSMAIN_SRANO = Space$(13)
   Else
      st_Work$ = CStr(CP_SSSMAIN(0).CuVal)
      If LenWid(st_Work$) < 13 Then
         RD_SSSMAIN_SRANO = CStr(CP_SSSMAIN(0).CuVal) & Space$(13 - LenWid(st_Work$))
      Else
         RD_SSSMAIN_SRANO = CStr(CP_SSSMAIN(0).CuVal)
      End If
   End If
End Function

Function RD_SSSMAIN_TOKRN(ByVal De As Integer) 'Generated.
Dim st_Work$
   If IsNull(CP_SSSMAIN(14).CuVal) Then
      RD_SSSMAIN_TOKRN = Space$(40)
   Else
      st_Work$ = CStr(CP_SSSMAIN(14).CuVal)
      If LenWid(st_Work$) < 40 Then
         RD_SSSMAIN_TOKRN = CStr(CP_SSSMAIN(14).CuVal) & Space$(40 - LenWid(st_Work$))
      Else
         RD_SSSMAIN_TOKRN = CStr(CP_SSSMAIN(14).CuVal)
      End If
   End If
End Function

Function RD_SSSMAIN_UDNDT(ByVal De As Integer) 'Generated.
Dim st_Work$
   If IsNull(CP_SSSMAIN(3).CuVal) Then
      RD_SSSMAIN_UDNDT = Space$(8)
   ElseIf Not IsDate(CP_SSSMAIN(3).CuVal) Then
      RD_SSSMAIN_UDNDT = Space$(8)
   Else
      RD_SSSMAIN_UDNDT = Format$(CP_SSSMAIN(3).CuVal, "YYYYMMDD")
   End If
End Function

Function RD_SSSMAIN_UDNNO(ByVal De As Integer) 'Generated.
Dim st_Work$
   If IsNull(CP_SSSMAIN(1).CuVal) Then
      RD_SSSMAIN_UDNNO = Space$(21)
   Else
      st_Work$ = CStr(CP_SSSMAIN(1).CuVal)
      If LenWid(st_Work$) < 21 Then
         RD_SSSMAIN_UDNNO = CStr(CP_SSSMAIN(1).CuVal) & Space$(21 - LenWid(st_Work$))
      Else
         RD_SSSMAIN_UDNNO = CStr(CP_SSSMAIN(1).CuVal)
      End If
   End If
End Function

Function RD_SSSMAIN_CLTID(ByVal De As Integer) 'Generated.
Dim st_Work$
   If IsNull(CP_SSSMAIN(25).CuVal) Then
      RD_SSSMAIN_CLTID = Space$(5)
   Else
      st_Work$ = CStr(CP_SSSMAIN(25).CuVal)
      If LenWid(st_Work$) < 5 Then
         RD_SSSMAIN_CLTID = CStr(CP_SSSMAIN(25).CuVal) & Space$(5 - LenWid(st_Work$))
      Else
         RD_SSSMAIN_CLTID = CStr(CP_SSSMAIN(25).CuVal)
      End If
   End If
End Function

Function RD_SSSMAIN_DATNO(ByVal De As Integer) 'Generated.
Dim st_Work$
   If IsNull(CP_SSSMAIN(18).CuVal) Then
      RD_SSSMAIN_DATNO = Space$(10)
   Else
      st_Work$ = CStr(CP_SSSMAIN(18).CuVal)
      If LenWid(st_Work$) < 10 Then
         RD_SSSMAIN_DATNO = CStr(CP_SSSMAIN(18).CuVal) & Space$(10 - LenWid(st_Work$))
      Else
         RD_SSSMAIN_DATNO = CStr(CP_SSSMAIN(18).CuVal)
      End If
   End If
End Function

Function RD_SSSMAIN_DENDT(ByVal De As Integer) 'Generated.
Dim st_Work$
   If IsNull(CP_SSSMAIN(21).CuVal) Then
      RD_SSSMAIN_DENDT = Space$(8)
   ElseIf Not IsDate(CP_SSSMAIN(21).CuVal) Then
      RD_SSSMAIN_DENDT = Space$(8)
   Else
      RD_SSSMAIN_DENDT = Format$(CP_SSSMAIN(21).CuVal, "YYYYMMDD")
   End If
End Function

Function RD_SSSMAIN_ENTDT(ByVal De As Integer) 'Generated.
Dim st_Work$
   If IsNull(CP_SSSMAIN(20).CuVal) Then
      RD_SSSMAIN_ENTDT = Space$(8)
   Else
      st_Work$ = CStr(CP_SSSMAIN(20).CuVal)
      If LenWid(st_Work$) < 8 Then
         RD_SSSMAIN_ENTDT = CStr(CP_SSSMAIN(20).CuVal) & Space$(8 - LenWid(st_Work$))
      Else
         RD_SSSMAIN_ENTDT = CStr(CP_SSSMAIN(20).CuVal)
      End If
   End If
End Function

Function RD_SSSMAIN_FRNKB(ByVal De As Integer) 'Generated.
Dim st_Work$
   If IsNull(CP_SSSMAIN(36).CuVal) Then
      RD_SSSMAIN_FRNKB = Space$(1)
   Else
      st_Work$ = CStr(CP_SSSMAIN(36).CuVal)
      If LenWid(st_Work$) < 1 Then
         RD_SSSMAIN_FRNKB = CStr(CP_SSSMAIN(36).CuVal) & Space$(1 - LenWid(st_Work$))
      Else
         RD_SSSMAIN_FRNKB = CStr(CP_SSSMAIN(36).CuVal)
      End If
   End If
End Function

Function RD_SSSMAIN_JDNLINNO(ByVal De As Integer) 'Generated.
Dim st_Work$
   If IsNull(CP_SSSMAIN(19).CuVal) Then
      RD_SSSMAIN_JDNLINNO = Space$(3)
   Else
      st_Work$ = CStr(CP_SSSMAIN(19).CuVal)
      If LenWid(st_Work$) < 3 Then
         RD_SSSMAIN_JDNLINNO = CStr(CP_SSSMAIN(19).CuVal) & Space$(3 - LenWid(st_Work$))
      Else
         RD_SSSMAIN_JDNLINNO = CStr(CP_SSSMAIN(19).CuVal)
      End If
   End If
End Function

Function RD_SSSMAIN_MEIKBA(ByVal De As Integer) 'Generated.
Dim st_Work$
   If IsNull(CP_SSSMAIN(33).CuVal) Then
      RD_SSSMAIN_MEIKBA = Space$(1)
   Else
      st_Work$ = CStr(CP_SSSMAIN(33).CuVal)
      If LenWid(st_Work$) < 1 Then
         RD_SSSMAIN_MEIKBA = CStr(CP_SSSMAIN(33).CuVal) & Space$(1 - LenWid(st_Work$))
      Else
         RD_SSSMAIN_MEIKBA = CStr(CP_SSSMAIN(33).CuVal)
      End If
   End If
End Function

Function RD_SSSMAIN_MEIKBB(ByVal De As Integer) 'Generated.
Dim st_Work$
   If IsNull(CP_SSSMAIN(35).CuVal) Then
      RD_SSSMAIN_MEIKBB = Space$(1)
   Else
      st_Work$ = CStr(CP_SSSMAIN(35).CuVal)
      If LenWid(st_Work$) < 1 Then
         RD_SSSMAIN_MEIKBB = CStr(CP_SSSMAIN(35).CuVal) & Space$(1 - LenWid(st_Work$))
      Else
         RD_SSSMAIN_MEIKBB = CStr(CP_SSSMAIN(35).CuVal)
      End If
   End If
End Function

Function RD_SSSMAIN_MEIKBC(ByVal De As Integer) 'Generated.
Dim st_Work$
   If IsNull(CP_SSSMAIN(34).CuVal) Then
      RD_SSSMAIN_MEIKBC = Space$(1)
   Else
      st_Work$ = CStr(CP_SSSMAIN(34).CuVal)
      If LenWid(st_Work$) < 1 Then
         RD_SSSMAIN_MEIKBC = CStr(CP_SSSMAIN(34).CuVal) & Space$(1 - LenWid(st_Work$))
      Else
         RD_SSSMAIN_MEIKBC = CStr(CP_SSSMAIN(34).CuVal)
      End If
   End If
End Function

Function RD_SSSMAIN_NHSCD(ByVal De As Integer) 'Generated.
Dim st_Work$
   If IsNull(CP_SSSMAIN(24).CuVal) Then
      RD_SSSMAIN_NHSCD = Space$(10)
   Else
      st_Work$ = CStr(CP_SSSMAIN(24).CuVal)
      If LenWid(st_Work$) < 10 Then
         RD_SSSMAIN_NHSCD = CStr(CP_SSSMAIN(24).CuVal) & Space$(10 - LenWid(st_Work$))
      Else
         RD_SSSMAIN_NHSCD = CStr(CP_SSSMAIN(24).CuVal)
      End If
   End If
End Function

Function RD_SSSMAIN_NXTKB(ByVal De As Integer) 'Generated.
Dim st_Work$
   If IsNull(CP_SSSMAIN(22).CuVal) Then
      RD_SSSMAIN_NXTKB = Space$(1)
   Else
      st_Work$ = CStr(CP_SSSMAIN(22).CuVal)
      If LenWid(st_Work$) < 1 Then
         RD_SSSMAIN_NXTKB = CStr(CP_SSSMAIN(22).CuVal) & Space$(1 - LenWid(st_Work$))
      Else
         RD_SSSMAIN_NXTKB = CStr(CP_SSSMAIN(22).CuVal)
      End If
   End If
End Function

Function RD_SSSMAIN_TKNRPSKB(ByVal De As Integer) 'Generated.
Dim st_Work$
   If IsNull(CP_SSSMAIN(29).CuVal) Then
      RD_SSSMAIN_TKNRPSKB = Space$(1)
   Else
      st_Work$ = CStr(CP_SSSMAIN(29).CuVal)
      If LenWid(st_Work$) < 1 Then
         RD_SSSMAIN_TKNRPSKB = CStr(CP_SSSMAIN(29).CuVal) & Space$(1 - LenWid(st_Work$))
      Else
         RD_SSSMAIN_TKNRPSKB = CStr(CP_SSSMAIN(29).CuVal)
      End If
   End If
End Function

Function RD_SSSMAIN_TKNZRNKB(ByVal De As Integer) 'Generated.
Dim st_Work$
   If IsNull(CP_SSSMAIN(30).CuVal) Then
      RD_SSSMAIN_TKNZRNKB = Space$(1)
   Else
      st_Work$ = CStr(CP_SSSMAIN(30).CuVal)
      If LenWid(st_Work$) < 1 Then
         RD_SSSMAIN_TKNZRNKB = CStr(CP_SSSMAIN(30).CuVal) & Space$(1 - LenWid(st_Work$))
      Else
         RD_SSSMAIN_TKNZRNKB = CStr(CP_SSSMAIN(30).CuVal)
      End If
   End If
End Function

Function RD_SSSMAIN_TOKCD(ByVal De As Integer) 'Generated.
Dim st_Work$
   If IsNull(CP_SSSMAIN(23).CuVal) Then
      RD_SSSMAIN_TOKCD = Space$(10)
   Else
      st_Work$ = CStr(CP_SSSMAIN(23).CuVal)
      If LenWid(st_Work$) < 10 Then
         RD_SSSMAIN_TOKCD = CStr(CP_SSSMAIN(23).CuVal) & Space$(10 - LenWid(st_Work$))
      Else
         RD_SSSMAIN_TOKCD = CStr(CP_SSSMAIN(23).CuVal)
      End If
   End If
End Function

Function RD_SSSMAIN_TOKRPSKB(ByVal De As Integer) 'Generated.
Dim st_Work$
   If IsNull(CP_SSSMAIN(31).CuVal) Then
      RD_SSSMAIN_TOKRPSKB = Space$(1)
   Else
      st_Work$ = CStr(CP_SSSMAIN(31).CuVal)
      If LenWid(st_Work$) < 1 Then
         RD_SSSMAIN_TOKRPSKB = CStr(CP_SSSMAIN(31).CuVal) & Space$(1 - LenWid(st_Work$))
      Else
         RD_SSSMAIN_TOKRPSKB = CStr(CP_SSSMAIN(31).CuVal)
      End If
   End If
End Function

Function RD_SSSMAIN_TOKSEICD(ByVal De As Integer) 'Generated.
Dim st_Work$
   If IsNull(CP_SSSMAIN(26).CuVal) Then
      RD_SSSMAIN_TOKSEICD = Space$(10)
   Else
      st_Work$ = CStr(CP_SSSMAIN(26).CuVal)
      If LenWid(st_Work$) < 10 Then
         RD_SSSMAIN_TOKSEICD = CStr(CP_SSSMAIN(26).CuVal) & Space$(10 - LenWid(st_Work$))
      Else
         RD_SSSMAIN_TOKSEICD = CStr(CP_SSSMAIN(26).CuVal)
      End If
   End If
End Function

Function RD_SSSMAIN_TOKZCLKB(ByVal De As Integer) 'Generated.
Dim st_Work$
   If IsNull(CP_SSSMAIN(28).CuVal) Then
      RD_SSSMAIN_TOKZCLKB = Space$(1)
   Else
      st_Work$ = CStr(CP_SSSMAIN(28).CuVal)
      If LenWid(st_Work$) < 1 Then
         RD_SSSMAIN_TOKZCLKB = CStr(CP_SSSMAIN(28).CuVal) & Space$(1 - LenWid(st_Work$))
      Else
         RD_SSSMAIN_TOKZCLKB = CStr(CP_SSSMAIN(28).CuVal)
      End If
   End If
End Function

Function RD_SSSMAIN_TOKZEIKB(ByVal De As Integer) 'Generated.
Dim st_Work$
   If IsNull(CP_SSSMAIN(27).CuVal) Then
      RD_SSSMAIN_TOKZEIKB = Space$(1)
   Else
      st_Work$ = CStr(CP_SSSMAIN(27).CuVal)
      If LenWid(st_Work$) < 1 Then
         RD_SSSMAIN_TOKZEIKB = CStr(CP_SSSMAIN(27).CuVal) & Space$(1 - LenWid(st_Work$))
      Else
         RD_SSSMAIN_TOKZEIKB = CStr(CP_SSSMAIN(27).CuVal)
      End If
   End If
End Function

Function RD_SSSMAIN_TOKZRNKB(ByVal De As Integer) 'Generated.
Dim st_Work$
   If IsNull(CP_SSSMAIN(32).CuVal) Then
      RD_SSSMAIN_TOKZRNKB = Space$(1)
   Else
      st_Work$ = CStr(CP_SSSMAIN(32).CuVal)
      If LenWid(st_Work$) < 1 Then
         RD_SSSMAIN_TOKZRNKB = CStr(CP_SSSMAIN(32).CuVal) & Space$(1 - LenWid(st_Work$))
      Else
         RD_SSSMAIN_TOKZRNKB = CStr(CP_SSSMAIN(32).CuVal)
      End If
   End If
End Function

Function RD_SSSMAIN_TUKKB(ByVal De As Integer) 'Generated.
Dim st_Work$
   If IsNull(CP_SSSMAIN(37).CuVal) Then
      RD_SSSMAIN_TUKKB = Space$(3)
   Else
      st_Work$ = CStr(CP_SSSMAIN(37).CuVal)
      If LenWid(st_Work$) < 3 Then
         RD_SSSMAIN_TUKKB = CStr(CP_SSSMAIN(37).CuVal) & Space$(3 - LenWid(st_Work$))
      Else
         RD_SSSMAIN_TUKKB = CStr(CP_SSSMAIN(37).CuVal)
      End If
   End If
End Function

Function RD_SSSMAIN_UDNCM(ByVal De As Integer) 'Generated.
Dim st_Work$
   If IsNull(CP_SSSMAIN(69).CuVal) Then
      RD_SSSMAIN_UDNCM = Space$(40)
   Else
      st_Work$ = CStr(CP_SSSMAIN(69).CuVal)
      If LenWid(st_Work$) < 40 Then
         RD_SSSMAIN_UDNCM = CStr(CP_SSSMAIN(69).CuVal) & Space$(40 - LenWid(st_Work$))
      Else
         RD_SSSMAIN_UDNCM = CStr(CP_SSSMAIN(69).CuVal)
      End If
   End If
End Function

Function RD_SSSMAIN_SBAFRUKN(ByVal De As Integer) 'Generated.
Dim st_Work$
   If IsEmpty(CP_SSSMAIN(73).CuVal) Then
      RD_SSSMAIN_SBAFRUKN = 0@
   ElseIf IsNull(CP_SSSMAIN(73).CuVal) Then
      RD_SSSMAIN_SBAFRUKN = 0@
   Else
      RD_SSSMAIN_SBAFRUKN = CP_SSSMAIN(73).CuVal
   End If
End Function

Function RD_SSSMAIN_SBAURIKN(ByVal De As Integer) 'Generated.
Dim st_Work$
   If IsEmpty(CP_SSSMAIN(70).CuVal) Then
      RD_SSSMAIN_SBAURIKN = 0@
   ElseIf IsNull(CP_SSSMAIN(70).CuVal) Then
      RD_SSSMAIN_SBAURIKN = 0@
   Else
      RD_SSSMAIN_SBAURIKN = CP_SSSMAIN(70).CuVal
   End If
End Function

Function RD_SSSMAIN_SBAUZEKN(ByVal De As Integer) 'Generated.
Dim st_Work$
   If IsEmpty(CP_SSSMAIN(71).CuVal) Then
      RD_SSSMAIN_SBAUZEKN = 0@
   ElseIf IsNull(CP_SSSMAIN(71).CuVal) Then
      RD_SSSMAIN_SBAUZEKN = 0@
   Else
      RD_SSSMAIN_SBAUZEKN = CP_SSSMAIN(71).CuVal
   End If
End Function

Function RD_SSSMAIN_SBAUZKKN(ByVal De As Integer) 'Generated.
Dim st_Work$
   If IsEmpty(CP_SSSMAIN(72).CuVal) Then
      RD_SSSMAIN_SBAUZKKN = 0@
   ElseIf IsNull(CP_SSSMAIN(72).CuVal) Then
      RD_SSSMAIN_SBAUZKKN = 0@
   Else
      RD_SSSMAIN_SBAUZKKN = CP_SSSMAIN(72).CuVal
   End If
End Function

